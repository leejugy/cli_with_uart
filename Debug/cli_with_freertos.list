
cli_with_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f64  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005640  08005640  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005640  08005640  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005640  08005640  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005644  08005644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000730  20000060  080056a8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000790  080056a8  00020790  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009729  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ff3  00000000  00000000  000297f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  0002b7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000677  00000000  00000000  0002c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018534  00000000  00000000  0002c6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d260  00000000  00000000  00044c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087466  00000000  00000000  00051e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002674  00000000  00000000  000d92ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000db960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800505c 	.word	0x0800505c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800505c 	.word	0x0800505c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_ADC1_Init+0x74>)
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <MX_ADC1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_ADC1_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000796:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007aa:	f001 fdff 	bl	80023ac <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f001 fba7 	bl	8001f06 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007ca:	f001 ff81 	bl	80026d0 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f001 fb97 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000007c 	.word	0x2000007c
 80007e4:	40012400 	.word	0x40012400

080007e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_ADC_MspInit+0x6c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d121      	bne.n	800084c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_ADC_MspInit+0x74>)
 8000848:	f002 fc0e 	bl	8003068 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40012400 	.word	0x40012400
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_DMA_Init+0x38>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <MX_DMA_Init+0x38>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_DMA_Init+0x38>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200f      	movs	r0, #15
 8000884:	f002 f98f 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000888:	200f      	movs	r0, #15
 800088a:	f002 f9a8 	bl	8002bde <HAL_NVIC_EnableIRQ>

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_GPIO_Init+0x78>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_GPIO_Init+0x78>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_GPIO_Init+0x78>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_GPIO_Init+0x78>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <MX_GPIO_Init+0x78>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_GPIO_Init+0x78>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0x7c>)
 80008e8:	f002 fd42 	bl	8003370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80008ec:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80008f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2302      	movs	r3, #2
 80008fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4619      	mov	r1, r3
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0x7c>)
 8000906:	f002 fbaf 	bl	8003068 <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <uart_send_1bit>:
void ymodem_transmit();
void uart_send_1bit(uint8_t uart_num,uint8_t *send_1bit_buffer);
void uart_send(uint8_t uart_num, char *fmt,...);


void uart_send_1bit(uint8_t uart_num,uint8_t *send_1bit_buffer){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
	if(uart_num==1){
 8000928:	79fb      	ldrb	r3, [r7, #7]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d106      	bne.n	800093c <uart_send_1bit+0x20>
		HAL_UART_Transmit(&huart1,send_1bit_buffer,1,100);
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	2201      	movs	r2, #1
 8000932:	6839      	ldr	r1, [r7, #0]
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <uart_send_1bit+0x3c>)
 8000936:	f003 fa63 	bl	8003e00 <HAL_UART_Transmit>
	}
	else if(uart_num==2){
		HAL_UART_Transmit(&huart2,send_1bit_buffer,1,100);
	}
}
 800093a:	e008      	b.n	800094e <uart_send_1bit+0x32>
	else if(uart_num==2){
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d105      	bne.n	800094e <uart_send_1bit+0x32>
		HAL_UART_Transmit(&huart2,send_1bit_buffer,1,100);
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	2201      	movs	r2, #1
 8000946:	6839      	ldr	r1, [r7, #0]
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <uart_send_1bit+0x40>)
 800094a:	f003 fa59 	bl	8003e00 <HAL_UART_Transmit>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000570 	.word	0x20000570
 800095c:	200005b8 	.word	0x200005b8

08000960 <calculate_crc16>:

bool calculate_crc16(uint8_t *data, int length, bool *loop_do) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < length; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	e016      	b.n	80009a4 <calculate_crc16+0x44>
        crc = (crc << 8) ^ crc_table[((crc >> 8) ^ data[i]) & 0xFF];
 8000976:	8afb      	ldrh	r3, [r7, #22]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	b21a      	sxth	r2, r3
 800097c:	8afb      	ldrh	r3, [r7, #22]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	68f9      	ldr	r1, [r7, #12]
 8000988:	440b      	add	r3, r1
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4043      	eors	r3, r0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	490f      	ldr	r1, [pc, #60]	; (80009d0 <calculate_crc16+0x70>)
 8000992:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000996:	b21b      	sxth	r3, r3
 8000998:	4053      	eors	r3, r2
 800099a:	b21b      	sxth	r3, r3
 800099c:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < length; i++) {
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	3301      	adds	r3, #1
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbe4      	blt.n	8000976 <calculate_crc16+0x16>
    }
    if(crc!=0){
 80009ac:	8afb      	ldrh	r3, [r7, #22]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d008      	beq.n	80009c4 <calculate_crc16+0x64>
    	uart_send(2,"CRC is incorrect!\n");
 80009b2:	4908      	ldr	r1, [pc, #32]	; (80009d4 <calculate_crc16+0x74>)
 80009b4:	2002      	movs	r0, #2
 80009b6:	f000 f9db 	bl	8000d70 <uart_send>
    	*loop_do=false;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
    	return false;
 80009c0:	2300      	movs	r3, #0
 80009c2:	e000      	b.n	80009c6 <calculate_crc16+0x66>
    }
    return true;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	080053e0 	.word	0x080053e0
 80009d4:	08005074 	.word	0x08005074

080009d8 <ymodem_transmit>:
void ymodem_transmit(){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	; 0x50
 80009dc:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart1);
 80009de:	48bb      	ldr	r0, [pc, #748]	; (8000ccc <ymodem_transmit+0x2f4>)
 80009e0:	f003 fab6 	bl	8003f50 <HAL_UART_DMAStop>
	UART_Start_Receive_DMA(&huart1,&rx_1bit,1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	49ba      	ldr	r1, [pc, #744]	; (8000cd0 <ymodem_transmit+0x2f8>)
 80009e8:	48b8      	ldr	r0, [pc, #736]	; (8000ccc <ymodem_transmit+0x2f4>)
 80009ea:	f003 fcb9 	bl	8004360 <UART_Start_Receive_DMA>

	HAL_Delay(100);
 80009ee:	2064      	movs	r0, #100	; 0x64
 80009f0:	f001 fcb8 	bl	8002364 <HAL_Delay>
	bool send_c_flag=true;
 80009f4:	2301      	movs	r3, #1
 80009f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	bool first_send_eot=true;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	bool loop_do=true;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	uint8_t _1bit_buffer;
	uint32_t file_size=0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t file_index;
	uint8_t file_name[64];
	memset(file_name,0,64);
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2240      	movs	r2, #64	; 0x40
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fe91 	bl	8004738 <memset>
	memset(rx_ymodem,0,1029);
 8000a16:	f240 4205 	movw	r2, #1029	; 0x405
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	48ad      	ldr	r0, [pc, #692]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000a1e:	f003 fe8b 	bl	8004738 <memset>
	rx_index=0;
 8000a22:	4bad      	ldr	r3, [pc, #692]	; (8000cd8 <ymodem_transmit+0x300>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	801a      	strh	r2, [r3, #0]

	uart_send(1,"\n");
 8000a28:	49ac      	ldr	r1, [pc, #688]	; (8000cdc <ymodem_transmit+0x304>)
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	f000 f9a0 	bl	8000d70 <uart_send>
	while(loop_do){
 8000a30:	e141      	b.n	8000cb6 <ymodem_transmit+0x2de>
		uart1_send_flag=true;
 8000a32:	4bab      	ldr	r3, [pc, #684]	; (8000ce0 <ymodem_transmit+0x308>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
		if(send_c_flag){
 8000a38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d014      	beq.n	8000a6a <ymodem_transmit+0x92>
			HAL_Delay(100);
 8000a40:	2064      	movs	r0, #100	; 0x64
 8000a42:	f001 fc8f 	bl	8002364 <HAL_Delay>
			_1bit_buffer='C';
 8000a46:	2343      	movs	r3, #67	; 0x43
 8000a48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000a4c:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000a50:	4619      	mov	r1, r3
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff ff62 	bl	800091c <uart_send_1bit>
			_1bit_buffer='C';
 8000a58:	2343      	movs	r3, #67	; 0x43
 8000a5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000a5e:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000a62:	4619      	mov	r1, r3
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff ff59 	bl	800091c <uart_send_1bit>
		}
		if(rx_ymodem[0]==SOH){
 8000a6a:	4b9a      	ldr	r3, [pc, #616]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d16b      	bne.n	8000b4a <ymodem_transmit+0x172>
			HAL_Delay(10);
 8000a72:	200a      	movs	r0, #10
 8000a74:	f001 fc76 	bl	8002364 <HAL_Delay>
			for(file_index=3;file_index<128;file_index++){
 8000a78:	2303      	movs	r3, #3
 8000a7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000a7e:	e01b      	b.n	8000ab8 <ymodem_transmit+0xe0>
				file_name[file_index-3]=rx_ymodem[file_index];
 8000a80:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000a84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a88:	3b03      	subs	r3, #3
 8000a8a:	4992      	ldr	r1, [pc, #584]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000a8c:	5c8a      	ldrb	r2, [r1, r2]
 8000a8e:	3350      	adds	r3, #80	; 0x50
 8000a90:	443b      	add	r3, r7
 8000a92:	f803 2c50 	strb.w	r2, [r3, #-80]
				if(rx_ymodem[file_index]==0){
 8000a96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000a9a:	4a8e      	ldr	r2, [pc, #568]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000a9c:	5cd3      	ldrb	r3, [r2, r3]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d105      	bne.n	8000aae <ymodem_transmit+0xd6>
					file_index++;
 8000aa2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
 8000aac:	e008      	b.n	8000ac0 <ymodem_transmit+0xe8>
			for(file_index=3;file_index<128;file_index++){
 8000aae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ab8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	dadf      	bge.n	8000a80 <ymodem_transmit+0xa8>
				}
			}
			for(;file_index<128;file_index++){
 8000ac0:	e017      	b.n	8000af2 <ymodem_transmit+0x11a>
				if(rx_ymodem[file_index]==' '){
 8000ac2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ac6:	4a83      	ldr	r2, [pc, #524]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000ac8:	5cd3      	ldrb	r3, [r2, r3]
 8000aca:	2b20      	cmp	r3, #32
 8000acc:	d016      	beq.n	8000afc <ymodem_transmit+0x124>
					break;
				}
				else{
					file_size=(rx_ymodem[file_index]-48)+file_size*10;
 8000ace:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ad2:	4a80      	ldr	r2, [pc, #512]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000ad4:	5cd3      	ldrb	r3, [r2, r3]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ada:	4613      	mov	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	440b      	add	r3, r1
 8000ae4:	3b30      	subs	r3, #48	; 0x30
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
			for(;file_index<128;file_index++){
 8000ae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000aec:	3301      	adds	r3, #1
 8000aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000af2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	dae3      	bge.n	8000ac2 <ymodem_transmit+0xea>
 8000afa:	e000      	b.n	8000afe <ymodem_transmit+0x126>
					break;
 8000afc:	bf00      	nop
				}
			}
			calculate_crc16(rx_ymodem+1027, 2, &loop_do);
 8000afe:	4879      	ldr	r0, [pc, #484]	; (8000ce4 <ymodem_transmit+0x30c>)
 8000b00:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000b04:	461a      	mov	r2, r3
 8000b06:	2102      	movs	r1, #2
 8000b08:	f7ff ff2a 	bl	8000960 <calculate_crc16>

			memset(rx_ymodem,0,1029);
 8000b0c:	f240 4205 	movw	r2, #1029	; 0x405
 8000b10:	2100      	movs	r1, #0
 8000b12:	4870      	ldr	r0, [pc, #448]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000b14:	f003 fe10 	bl	8004738 <memset>
			rx_index=0;
 8000b18:	4b6f      	ldr	r3, [pc, #444]	; (8000cd8 <ymodem_transmit+0x300>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	801a      	strh	r2, [r3, #0]

			_1bit_buffer=ACK;
 8000b1e:	2306      	movs	r3, #6
 8000b20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000b24:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000b28:	4619      	mov	r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f7ff fef6 	bl	800091c <uart_send_1bit>
			_1bit_buffer='C';
 8000b30:	2343      	movs	r3, #67	; 0x43
 8000b32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000b36:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f7ff feed 	bl	800091c <uart_send_1bit>
			send_c_flag=false;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000b48:	e0b5      	b.n	8000cb6 <ymodem_transmit+0x2de>
		}
		else if(rx_1bit==EOT && first_send_eot){
 8000b4a:	4b61      	ldr	r3, [pc, #388]	; (8000cd0 <ymodem_transmit+0x2f8>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d110      	bne.n	8000b74 <ymodem_transmit+0x19c>
 8000b52:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00c      	beq.n	8000b74 <ymodem_transmit+0x19c>
			_1bit_buffer=NAK;
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000b60:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000b64:	4619      	mov	r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	f7ff fed8 	bl	800091c <uart_send_1bit>
			first_send_eot=false;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000b72:	e0a0      	b.n	8000cb6 <ymodem_transmit+0x2de>
		}
		else if(rx_1bit==EOT && !first_send_eot){
 8000b74:	4b56      	ldr	r3, [pc, #344]	; (8000cd0 <ymodem_transmit+0x2f8>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d162      	bne.n	8000c42 <ymodem_transmit+0x26a>
 8000b7c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000b80:	f083 0301 	eor.w	r3, r3, #1
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d05b      	beq.n	8000c42 <ymodem_transmit+0x26a>
			first_send_eot=true;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			_1bit_buffer=ACK;
 8000b90:	2306      	movs	r3, #6
 8000b92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000b96:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff febd 	bl	800091c <uart_send_1bit>
			_1bit_buffer='C';
 8000ba2:	2343      	movs	r3, #67	; 0x43
 8000ba4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000ba8:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000bac:	4619      	mov	r1, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f7ff feb4 	bl	800091c <uart_send_1bit>

			_1bit_buffer=ACK;
 8000bb4:	2306      	movs	r3, #6
 8000bb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000bba:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff feab 	bl	800091c <uart_send_1bit>
			_1bit_buffer='C';
 8000bc6:	2343      	movs	r3, #67	; 0x43
 8000bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000bcc:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff fea2 	bl	800091c <uart_send_1bit>

			loop_do=false;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			uart1_send_flag=false;
 8000bde:	4b40      	ldr	r3, [pc, #256]	; (8000ce0 <ymodem_transmit+0x308>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
			rx_1bit=0;
 8000be4:	4b3a      	ldr	r3, [pc, #232]	; (8000cd0 <ymodem_transmit+0x2f8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]

			uart_send(2,"\n+++++++++++++++++++++++++++++++++++++++++\n");
 8000bea:	493f      	ldr	r1, [pc, #252]	; (8000ce8 <ymodem_transmit+0x310>)
 8000bec:	2002      	movs	r0, #2
 8000bee:	f000 f8bf 	bl	8000d70 <uart_send>
			uart_send(2,"\nsend_complete!\n");
 8000bf2:	493e      	ldr	r1, [pc, #248]	; (8000cec <ymodem_transmit+0x314>)
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f000 f8bb 	bl	8000d70 <uart_send>
			uart_send(2,"INFO)\nfile name : ");
 8000bfa:	493d      	ldr	r1, [pc, #244]	; (8000cf0 <ymodem_transmit+0x318>)
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f000 f8b7 	bl	8000d70 <uart_send>
			uart_send(2,"%s",file_name);
 8000c02:	463b      	mov	r3, r7
 8000c04:	461a      	mov	r2, r3
 8000c06:	493b      	ldr	r1, [pc, #236]	; (8000cf4 <ymodem_transmit+0x31c>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f000 f8b1 	bl	8000d70 <uart_send>
			uart_send(2,"\n");
 8000c0e:	4933      	ldr	r1, [pc, #204]	; (8000cdc <ymodem_transmit+0x304>)
 8000c10:	2002      	movs	r0, #2
 8000c12:	f000 f8ad 	bl	8000d70 <uart_send>
			uart_send(2,"file size : ");
 8000c16:	4938      	ldr	r1, [pc, #224]	; (8000cf8 <ymodem_transmit+0x320>)
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 f8a9 	bl	8000d70 <uart_send>
			uart_send(2,"%lu",file_size);
 8000c1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c20:	4936      	ldr	r1, [pc, #216]	; (8000cfc <ymodem_transmit+0x324>)
 8000c22:	2002      	movs	r0, #2
 8000c24:	f000 f8a4 	bl	8000d70 <uart_send>
			uart_send(2,"\n");
 8000c28:	492c      	ldr	r1, [pc, #176]	; (8000cdc <ymodem_transmit+0x304>)
 8000c2a:	2002      	movs	r0, #2
 8000c2c:	f000 f8a0 	bl	8000d70 <uart_send>
			HAL_UART_DMAStop(&huart1);
 8000c30:	4826      	ldr	r0, [pc, #152]	; (8000ccc <ymodem_transmit+0x2f4>)
 8000c32:	f003 f98d 	bl	8003f50 <HAL_UART_DMAStop>
			UART_Start_Receive_DMA(&huart1,&command_tx[0],5);;
 8000c36:	2205      	movs	r2, #5
 8000c38:	4931      	ldr	r1, [pc, #196]	; (8000d00 <ymodem_transmit+0x328>)
 8000c3a:	4824      	ldr	r0, [pc, #144]	; (8000ccc <ymodem_transmit+0x2f4>)
 8000c3c:	f003 fb90 	bl	8004360 <UART_Start_Receive_DMA>
 8000c40:	e039      	b.n	8000cb6 <ymodem_transmit+0x2de>
		}
		else if(rx_ymodem[0]==STX){
 8000c42:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d135      	bne.n	8000cb6 <ymodem_transmit+0x2de>
			HAL_Delay(10);
 8000c4a:	200a      	movs	r0, #10
 8000c4c:	f001 fb8a 	bl	8002364 <HAL_Delay>
			calculate_crc16(rx_ymodem+1027, 2, &loop_do);
 8000c50:	4824      	ldr	r0, [pc, #144]	; (8000ce4 <ymodem_transmit+0x30c>)
 8000c52:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000c56:	461a      	mov	r2, r3
 8000c58:	2102      	movs	r1, #2
 8000c5a:	f7ff fe81 	bl	8000960 <calculate_crc16>
			/*buffer send_occur*/
			for(uint16_t i=3;i<=1026;i++){
 8000c5e:	2303      	movs	r3, #3
 8000c60:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000c64:	e00c      	b.n	8000c80 <ymodem_transmit+0x2a8>
				uart_send_1bit(2,&rx_ymodem[i]);
 8000c66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000c6a:	4a1a      	ldr	r2, [pc, #104]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	2002      	movs	r0, #2
 8000c72:	f7ff fe53 	bl	800091c <uart_send_1bit>
			for(uint16_t i=3;i<=1026;i++){
 8000c76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000c80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000c84:	f240 4202 	movw	r2, #1026	; 0x402
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d9ec      	bls.n	8000c66 <ymodem_transmit+0x28e>
			}
			memset(rx_ymodem,0,1029);
 8000c8c:	f240 4205 	movw	r2, #1029	; 0x405
 8000c90:	2100      	movs	r1, #0
 8000c92:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <ymodem_transmit+0x2fc>)
 8000c94:	f003 fd50 	bl	8004738 <memset>
			rx_index=0;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <ymodem_transmit+0x300>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	801a      	strh	r2, [r3, #0]
			_1bit_buffer=ACK;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000ca4:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000ca8:	4619      	mov	r1, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fe36 	bl	800091c <uart_send_1bit>
			send_c_flag=false;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(loop_do){
 8000cb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f47f aeb9 	bne.w	8000a32 <ymodem_transmit+0x5a>
		  }
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3750      	adds	r7, #80	; 0x50
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000570 	.word	0x20000570
 8000cd0:	20000565 	.word	0x20000565
 8000cd4:	20000160 	.word	0x20000160
 8000cd8:	20000566 	.word	0x20000566
 8000cdc:	08005088 	.word	0x08005088
 8000ce0:	20000568 	.word	0x20000568
 8000ce4:	20000563 	.word	0x20000563
 8000ce8:	0800508c 	.word	0x0800508c
 8000cec:	080050b8 	.word	0x080050b8
 8000cf0:	080050cc 	.word	0x080050cc
 8000cf4:	080050e0 	.word	0x080050e0
 8000cf8:	080050e4 	.word	0x080050e4
 8000cfc:	080050f4 	.word	0x080050f4
 8000d00:	200000ac 	.word	0x200000ac

08000d04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_UART_RxCpltCallback+0x50>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d119      	bne.n	8000d4a <HAL_UART_RxCpltCallback+0x46>
		if(uart1_send_flag){
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <HAL_UART_RxCpltCallback+0x54>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d010      	beq.n	8000d40 <HAL_UART_RxCpltCallback+0x3c>
			rx_ymodem[rx_index++]=rx_1bit;
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_UART_RxCpltCallback+0x58>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	1c5a      	adds	r2, r3, #1
 8000d24:	b291      	uxth	r1, r2
 8000d26:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_UART_RxCpltCallback+0x58>)
 8000d28:	8011      	strh	r1, [r2, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <HAL_UART_RxCpltCallback+0x5c>)
 8000d2e:	7819      	ldrb	r1, [r3, #0]
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_UART_RxCpltCallback+0x60>)
 8000d32:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_DMA(&huart1,&rx_1bit,1);
 8000d34:	2201      	movs	r2, #1
 8000d36:	490a      	ldr	r1, [pc, #40]	; (8000d60 <HAL_UART_RxCpltCallback+0x5c>)
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <HAL_UART_RxCpltCallback+0x64>)
 8000d3a:	f003 f8e4 	bl	8003f06 <HAL_UART_Receive_DMA>
		else{
			HAL_UART_Receive_DMA(&huart1,&command_tx[0],5);
		}
	}
	UNUSED(huart);
}
 8000d3e:	e004      	b.n	8000d4a <HAL_UART_RxCpltCallback+0x46>
			HAL_UART_Receive_DMA(&huart1,&command_tx[0],5);
 8000d40:	2205      	movs	r2, #5
 8000d42:	490a      	ldr	r1, [pc, #40]	; (8000d6c <HAL_UART_RxCpltCallback+0x68>)
 8000d44:	4808      	ldr	r0, [pc, #32]	; (8000d68 <HAL_UART_RxCpltCallback+0x64>)
 8000d46:	f003 f8de 	bl	8003f06 <HAL_UART_Receive_DMA>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40013800 	.word	0x40013800
 8000d58:	20000568 	.word	0x20000568
 8000d5c:	20000566 	.word	0x20000566
 8000d60:	20000565 	.word	0x20000565
 8000d64:	20000160 	.word	0x20000160
 8000d68:	20000570 	.word	0x20000570
 8000d6c:	200000ac 	.word	0x200000ac

08000d70 <uart_send>:

void uart_send(uint8_t uart_num, char *fmt,...){
 8000d70:	b40e      	push	{r1, r2, r3}
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b085      	sub	sp, #20
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 8000d7c:	f107 0320 	add.w	r3, r7, #32
 8000d80:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)send_buffer,send_buffer_length,fmt,arg);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	2140      	movs	r1, #64	; 0x40
 8000d88:	4810      	ldr	r0, [pc, #64]	; (8000dcc <uart_send+0x5c>)
 8000d8a:	f003 fcc7 	bl	800471c <vsniprintf>
	if(uart_num==1){
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d106      	bne.n	8000da2 <uart_send+0x32>
		HAL_UART_Transmit(&huart1,send_buffer,send_buffer_length,100);
 8000d94:	2364      	movs	r3, #100	; 0x64
 8000d96:	2240      	movs	r2, #64	; 0x40
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <uart_send+0x5c>)
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <uart_send+0x60>)
 8000d9c:	f003 f830 	bl	8003e00 <HAL_UART_Transmit>
 8000da0:	e008      	b.n	8000db4 <uart_send+0x44>
	}
	else if(uart_num==2){
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d105      	bne.n	8000db4 <uart_send+0x44>
		HAL_UART_Transmit(&huart2,send_buffer,send_buffer_length,100);
 8000da8:	2364      	movs	r3, #100	; 0x64
 8000daa:	2240      	movs	r2, #64	; 0x40
 8000dac:	4907      	ldr	r1, [pc, #28]	; (8000dcc <uart_send+0x5c>)
 8000dae:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <uart_send+0x64>)
 8000db0:	f003 f826 	bl	8003e00 <HAL_UART_Transmit>
	}
	memset(send_buffer,0,send_buffer_length);
 8000db4:	2240      	movs	r2, #64	; 0x40
 8000db6:	2100      	movs	r1, #0
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <uart_send+0x5c>)
 8000dba:	f003 fcbd 	bl	8004738 <memset>
	va_end(arg);
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000dc8:	b003      	add	sp, #12
 8000dca:	4770      	bx	lr
 8000dcc:	200000b4 	.word	0x200000b4
 8000dd0:	20000570 	.word	0x20000570
 8000dd4:	200005b8 	.word	0x200005b8

08000dd8 <is_command>:

keytype is_command(uint8_t *buf,uint8_t i){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
	keytype type_key = KEY_NONE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
	switch (buf[i]){
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b7f      	cmp	r3, #127	; 0x7f
 8000df2:	d061      	beq.n	8000eb8 <is_command+0xe0>
 8000df4:	2b7f      	cmp	r3, #127	; 0x7f
 8000df6:	dc68      	bgt.n	8000eca <is_command+0xf2>
 8000df8:	2b1b      	cmp	r3, #27
 8000dfa:	d006      	beq.n	8000e0a <is_command+0x32>
 8000dfc:	2b1b      	cmp	r3, #27
 8000dfe:	dc64      	bgt.n	8000eca <is_command+0xf2>
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d05c      	beq.n	8000ebe <is_command+0xe6>
 8000e04:	2b0d      	cmp	r3, #13
 8000e06:	d05d      	beq.n	8000ec4 <is_command+0xec>
			break;
		case 0x0d:
			type_key = ENTER;
			break;
		default:
			break;
 8000e08:	e05f      	b.n	8000eca <is_command+0xf2>
			HAL_Delay(1);
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	f001 faaa 	bl	8002364 <HAL_Delay>
			switch(buf[(i+2)%5]){
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	1c9a      	adds	r2, r3, #2
 8000e14:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <is_command+0x11c>)
 8000e16:	fb83 1302 	smull	r1, r3, r3, r2
 8000e1a:	1059      	asrs	r1, r3, #1
 8000e1c:	17d3      	asrs	r3, r2, #31
 8000e1e:	1ac9      	subs	r1, r1, r3
 8000e20:	460b      	mov	r3, r1
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	440b      	add	r3, r1
 8000e26:	1ad1      	subs	r1, r2, r3
 8000e28:	460a      	mov	r2, r1
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	3b31      	subs	r3, #49	; 0x31
 8000e32:	2b13      	cmp	r3, #19
 8000e34:	d83c      	bhi.n	8000eb0 <is_command+0xd8>
 8000e36:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <is_command+0x64>)
 8000e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3c:	08000eab 	.word	0x08000eab
 8000e40:	08000eb1 	.word	0x08000eb1
 8000e44:	08000eb1 	.word	0x08000eb1
 8000e48:	08000ea5 	.word	0x08000ea5
 8000e4c:	08000eb1 	.word	0x08000eb1
 8000e50:	08000eb1 	.word	0x08000eb1
 8000e54:	08000eb1 	.word	0x08000eb1
 8000e58:	08000eb1 	.word	0x08000eb1
 8000e5c:	08000eb1 	.word	0x08000eb1
 8000e60:	08000eb1 	.word	0x08000eb1
 8000e64:	08000eb1 	.word	0x08000eb1
 8000e68:	08000eb1 	.word	0x08000eb1
 8000e6c:	08000eb1 	.word	0x08000eb1
 8000e70:	08000eb1 	.word	0x08000eb1
 8000e74:	08000eb1 	.word	0x08000eb1
 8000e78:	08000eb1 	.word	0x08000eb1
 8000e7c:	08000e9f 	.word	0x08000e9f
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000e93 	.word	0x08000e93
 8000e88:	08000e8d 	.word	0x08000e8d
					type_key = LEFT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	73fb      	strb	r3, [r7, #15]
					break;
 8000e90:	e011      	b.n	8000eb6 <is_command+0xde>
					type_key = RIGHT;
 8000e92:	2304      	movs	r3, #4
 8000e94:	73fb      	strb	r3, [r7, #15]
					break;
 8000e96:	e00e      	b.n	8000eb6 <is_command+0xde>
					type_key = DOWN;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	73fb      	strb	r3, [r7, #15]
					break;
 8000e9c:	e00b      	b.n	8000eb6 <is_command+0xde>
					type_key = UP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
					break;
 8000ea2:	e008      	b.n	8000eb6 <is_command+0xde>
					type_key = END;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	73fb      	strb	r3, [r7, #15]
					break;
 8000ea8:	e005      	b.n	8000eb6 <is_command+0xde>
					type_key = HOME;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	73fb      	strb	r3, [r7, #15]
					break;
 8000eae:	e002      	b.n	8000eb6 <is_command+0xde>
					type_key = KEY_ERROR;
 8000eb0:	230b      	movs	r3, #11
 8000eb2:	73fb      	strb	r3, [r7, #15]
					break;
 8000eb4:	bf00      	nop
			break;
 8000eb6:	e009      	b.n	8000ecc <is_command+0xf4>
			type_key = DEL;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	73fb      	strb	r3, [r7, #15]
			break;
 8000ebc:	e006      	b.n	8000ecc <is_command+0xf4>
			type_key = BACKSPACE;
 8000ebe:	2308      	movs	r3, #8
 8000ec0:	73fb      	strb	r3, [r7, #15]
			break;
 8000ec2:	e003      	b.n	8000ecc <is_command+0xf4>
			type_key = ENTER;
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	73fb      	strb	r3, [r7, #15]
			break;
 8000ec8:	e000      	b.n	8000ecc <is_command+0xf4>
			break;
 8000eca:	bf00      	nop
	}
	if(buf[i]>=32 && buf[i]<=126){
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b1f      	cmp	r3, #31
 8000ed6:	d907      	bls.n	8000ee8 <is_command+0x110>
 8000ed8:	78fb      	ldrb	r3, [r7, #3]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b7e      	cmp	r3, #126	; 0x7e
 8000ee2:	d801      	bhi.n	8000ee8 <is_command+0x110>
		type_key=IS_WORD;
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	73fb      	strb	r3, [r7, #15]
	}
	return type_key;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	66666667 	.word	0x66666667

08000ef8 <is_same_word>:
/*
 * compare uint8_t buf and compare if they are completely same character return
 * true. else they are not same character return false
*/
bool is_same_word(uint8_t *buf,uint8_t *compare,uint8_t start_compare){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4613      	mov	r3, r2
 8000f04:	71fb      	strb	r3, [r7, #7]
    bool ret=false;
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]
    uint8_t end_compare=strlen((const char *)compare);
 8000f0a:	68b8      	ldr	r0, [r7, #8]
 8000f0c:	f7ff f920 	bl	8000150 <strlen>
 8000f10:	4603      	mov	r3, r0
 8000f12:	757b      	strb	r3, [r7, #21]
    for (uint8_t i=start_compare;i<start_compare+end_compare;i++){
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	75bb      	strb	r3, [r7, #22]
 8000f18:	e02e      	b.n	8000f78 <is_same_word+0x80>
        if(compare[i-start_compare]==0){
 8000f1a:	7dba      	ldrb	r2, [r7, #22]
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	461a      	mov	r2, r3
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	4413      	add	r3, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <is_same_word+0x3a>
            ret=false;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	75fb      	strb	r3, [r7, #23]
            break;
 8000f30:	e028      	b.n	8000f84 <is_same_word+0x8c>
        }
        if (buf[i]==compare[i-start_compare]){
 8000f32:	7dbb      	ldrb	r3, [r7, #22]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	7db9      	ldrb	r1, [r7, #22]
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	440b      	add	r3, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d102      	bne.n	8000f52 <is_same_word+0x5a>
            ret=true;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	75fb      	strb	r3, [r7, #23]
 8000f50:	e00f      	b.n	8000f72 <is_same_word+0x7a>
        }
        else if(buf[i]!=compare[i-start_compare]){
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	7db9      	ldrb	r1, [r7, #22]
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	1acb      	subs	r3, r1, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	440b      	add	r3, r1
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d002      	beq.n	8000f72 <is_same_word+0x7a>
            ret=false;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	75fb      	strb	r3, [r7, #23]
            break;
 8000f70:	e008      	b.n	8000f84 <is_same_word+0x8c>
    for (uint8_t i=start_compare;i<start_compare+end_compare;i++){
 8000f72:	7dbb      	ldrb	r3, [r7, #22]
 8000f74:	3301      	adds	r3, #1
 8000f76:	75bb      	strb	r3, [r7, #22]
 8000f78:	7dba      	ldrb	r2, [r7, #22]
 8000f7a:	79f9      	ldrb	r1, [r7, #7]
 8000f7c:	7d7b      	ldrb	r3, [r7, #21]
 8000f7e:	440b      	add	r3, r1
 8000f80:	429a      	cmp	r2, r3
 8000f82:	dbca      	blt.n	8000f1a <is_same_word+0x22>
        }
    }
    return ret;
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <command_input>:

void command_input(uint8_t *buf){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	bool existing_command = false;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	75fb      	strb	r3, [r7, #23]
	uint8_t word_len=0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	743b      	strb	r3, [r7, #16]
	if(is_same_word(buf,(uint8_t *)"help",0)){
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	49b3      	ldr	r1, [pc, #716]	; (8001270 <command_input+0x2e0>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffa7 	bl	8000ef8 <is_same_word>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d036      	beq.n	800101e <command_input+0x8e>
		uart_send(1,"\n---------------------------------------------------");
 8000fb0:	49b0      	ldr	r1, [pc, #704]	; (8001274 <command_input+0x2e4>)
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fedc 	bl	8000d70 <uart_send>
		uart_send(1,"----------------\n\n");
 8000fb8:	49af      	ldr	r1, [pc, #700]	; (8001278 <command_input+0x2e8>)
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff fed8 	bl	8000d70 <uart_send>
		uart_send(1,"\t\t\tcommand_list\n\n");
 8000fc0:	49ae      	ldr	r1, [pc, #696]	; (800127c <command_input+0x2ec>)
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f7ff fed4 	bl	8000d70 <uart_send>
		uart_send(1,"1. printf [string] : print string at terminal.\n");
 8000fc8:	49ad      	ldr	r1, [pc, #692]	; (8001280 <command_input+0x2f0>)
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f7ff fed0 	bl	8000d70 <uart_send>
		uart_send(1,"note) ledx : x can be 1, 2 value.\n");
 8000fd0:	49ac      	ldr	r1, [pc, #688]	; (8001284 <command_input+0x2f4>)
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fecc 	bl	8000d70 <uart_send>
		uart_send(1,"2. ledx [on/off] : on/off led\n");
 8000fd8:	49ab      	ldr	r1, [pc, #684]	; (8001288 <command_input+0x2f8>)
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f7ff fec8 	bl	8000d70 <uart_send>
		uart_send(1,"3. ledx toggle [number] : toggle led with user set number\n");
 8000fe0:	49aa      	ldr	r1, [pc, #680]	; (800128c <command_input+0x2fc>)
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff fec4 	bl	8000d70 <uart_send>
		uart_send(1,"4. adc read : read adc voltage val, where reference voltage,");
 8000fe8:	49a9      	ldr	r1, [pc, #676]	; (8001290 <command_input+0x300>)
 8000fea:	2001      	movs	r0, #1
 8000fec:	f7ff fec0 	bl	8000d70 <uart_send>
		uart_send(1,"is 3.3V.\n");
 8000ff0:	49a8      	ldr	r1, [pc, #672]	; (8001294 <command_input+0x304>)
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff febc 	bl	8000d70 <uart_send>
		uart_send(1,"5. clear : clear terminal.\n");
 8000ff8:	49a7      	ldr	r1, [pc, #668]	; (8001298 <command_input+0x308>)
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	f7ff feb8 	bl	8000d70 <uart_send>
		uart_send(1,"6. ymodem transmit : transmit data with ymodem.\n");
 8001000:	49a6      	ldr	r1, [pc, #664]	; (800129c <command_input+0x30c>)
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff feb4 	bl	8000d70 <uart_send>
		uart_send(1,"\n---------------------------------------------------");
 8001008:	499a      	ldr	r1, [pc, #616]	; (8001274 <command_input+0x2e4>)
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff feb0 	bl	8000d70 <uart_send>
		uart_send(1,"----------------\n\n");
 8001010:	4999      	ldr	r1, [pc, #612]	; (8001278 <command_input+0x2e8>)
 8001012:	2001      	movs	r0, #1
 8001014:	f7ff feac 	bl	8000d70 <uart_send>
		existing_command = true;
 8001018:	2301      	movs	r3, #1
 800101a:	75fb      	strb	r3, [r7, #23]
 800101c:	e1e2      	b.n	80013e4 <command_input+0x454>
	}
	else if(is_same_word(buf,(uint8_t *)"printf",0)){
 800101e:	2200      	movs	r2, #0
 8001020:	499f      	ldr	r1, [pc, #636]	; (80012a0 <command_input+0x310>)
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ff68 	bl	8000ef8 <is_same_word>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d00c      	beq.n	8001048 <command_input+0xb8>
		word_len=strlen("printf")+1;
 800102e:	2307      	movs	r3, #7
 8001030:	743b      	strb	r3, [r7, #16]
		uart_send(1,"\n%s",buf+word_len);
 8001032:	7c3b      	ldrb	r3, [r7, #16]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	461a      	mov	r2, r3
 800103a:	499a      	ldr	r1, [pc, #616]	; (80012a4 <command_input+0x314>)
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fe97 	bl	8000d70 <uart_send>
		existing_command = true;
 8001042:	2301      	movs	r3, #1
 8001044:	75fb      	strb	r3, [r7, #23]
 8001046:	e1cd      	b.n	80013e4 <command_input+0x454>
	}
	else if(is_same_word(buf,(uint8_t *)"clear",0)){
 8001048:	2200      	movs	r2, #0
 800104a:	4997      	ldr	r1, [pc, #604]	; (80012a8 <command_input+0x318>)
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff53 	bl	8000ef8 <is_same_word>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d006      	beq.n	8001066 <command_input+0xd6>
		uart_send(1,"\x1B[2J");
 8001058:	4994      	ldr	r1, [pc, #592]	; (80012ac <command_input+0x31c>)
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff fe88 	bl	8000d70 <uart_send>
		existing_command = true;
 8001060:	2301      	movs	r3, #1
 8001062:	75fb      	strb	r3, [r7, #23]
 8001064:	e1be      	b.n	80013e4 <command_input+0x454>
	}
	else if(is_same_word(buf,(uint8_t *)"ymodem transmit",0)){
 8001066:	2200      	movs	r2, #0
 8001068:	4991      	ldr	r1, [pc, #580]	; (80012b0 <command_input+0x320>)
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff44 	bl	8000ef8 <is_same_word>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d004      	beq.n	8001080 <command_input+0xf0>
		ymodem_transmit();
 8001076:	f7ff fcaf 	bl	80009d8 <ymodem_transmit>
		existing_command = true;
 800107a:	2301      	movs	r3, #1
 800107c:	75fb      	strb	r3, [r7, #23]
 800107e:	e1b1      	b.n	80013e4 <command_input+0x454>
	}
	else if(is_same_word(buf,(uint8_t *)"adc read",0)){
 8001080:	2200      	movs	r2, #0
 8001082:	498c      	ldr	r1, [pc, #560]	; (80012b4 <command_input+0x324>)
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff37 	bl	8000ef8 <is_same_word>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d01f      	beq.n	80010d0 <command_input+0x140>
		uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 8001090:	4889      	ldr	r0, [pc, #548]	; (80012b8 <command_input+0x328>)
 8001092:	f001 fb11 	bl	80026b8 <HAL_ADC_GetValue>
 8001096:	60b8      	str	r0, [r7, #8]
		adc_val *= 3.3;
 8001098:	68b8      	ldr	r0, [r7, #8]
 800109a:	f7ff facd 	bl	8000638 <__aeabi_ui2d>
 800109e:	a372      	add	r3, pc, #456	; (adr r3, 8001268 <command_input+0x2d8>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff f85c 	bl	8000160 <__aeabi_dmul>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fb3c 	bl	800072c <__aeabi_d2uiz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	60bb      	str	r3, [r7, #8]
		uart_send(1,"\nadc voltage:%dV",(uint16_t)adc_val/4096);
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	0b1b      	lsrs	r3, r3, #12
 80010be:	b29b      	uxth	r3, r3
 80010c0:	461a      	mov	r2, r3
 80010c2:	497e      	ldr	r1, [pc, #504]	; (80012bc <command_input+0x32c>)
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff fe53 	bl	8000d70 <uart_send>
		existing_command = true;
 80010ca:	2301      	movs	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e189      	b.n	80013e4 <command_input+0x454>
	}
	else if(is_same_word(buf,(uint8_t *)"led",0)){
 80010d0:	2200      	movs	r2, #0
 80010d2:	497b      	ldr	r1, [pc, #492]	; (80012c0 <command_input+0x330>)
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff0f 	bl	8000ef8 <is_same_word>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8181 	beq.w	80013e4 <command_input+0x454>
		word_len=strlen("led");
 80010e2:	2303      	movs	r3, #3
 80010e4:	743b      	strb	r3, [r7, #16]
		if(is_same_word(buf,(uint8_t *)"1",word_len)){
 80010e6:	7c3b      	ldrb	r3, [r7, #16]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4976      	ldr	r1, [pc, #472]	; (80012c4 <command_input+0x334>)
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ff03 	bl	8000ef8 <is_same_word>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8094 	beq.w	8001222 <command_input+0x292>
			word_len+=2;
 80010fa:	7c3b      	ldrb	r3, [r7, #16]
 80010fc:	3302      	adds	r3, #2
 80010fe:	743b      	strb	r3, [r7, #16]
			if(is_same_word(buf,(uint8_t *)"on",word_len)){
 8001100:	7c3b      	ldrb	r3, [r7, #16]
 8001102:	461a      	mov	r2, r3
 8001104:	4970      	ldr	r1, [pc, #448]	; (80012c8 <command_input+0x338>)
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fef6 	bl	8000ef8 <is_same_word>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00a      	beq.n	8001128 <command_input+0x198>
				led1_toggle=false;
 8001112:	4b6e      	ldr	r3, [pc, #440]	; (80012cc <command_input+0x33c>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2120      	movs	r1, #32
 800111c:	486c      	ldr	r0, [pc, #432]	; (80012d0 <command_input+0x340>)
 800111e:	f002 f927 	bl	8003370 <HAL_GPIO_WritePin>
				existing_command = true;
 8001122:	2301      	movs	r3, #1
 8001124:	75fb      	strb	r3, [r7, #23]
 8001126:	e15d      	b.n	80013e4 <command_input+0x454>
			}
			else if(is_same_word(buf,(uint8_t *)"off",word_len)){
 8001128:	7c3b      	ldrb	r3, [r7, #16]
 800112a:	461a      	mov	r2, r3
 800112c:	4969      	ldr	r1, [pc, #420]	; (80012d4 <command_input+0x344>)
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fee2 	bl	8000ef8 <is_same_word>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00a      	beq.n	8001150 <command_input+0x1c0>
				led1_toggle=false;
 800113a:	4b64      	ldr	r3, [pc, #400]	; (80012cc <command_input+0x33c>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2120      	movs	r1, #32
 8001144:	4862      	ldr	r0, [pc, #392]	; (80012d0 <command_input+0x340>)
 8001146:	f002 f913 	bl	8003370 <HAL_GPIO_WritePin>
				existing_command = true;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
 800114e:	e149      	b.n	80013e4 <command_input+0x454>
			}
			else if(is_same_word(buf,(uint8_t *)"toggle",word_len)){
 8001150:	7c3b      	ldrb	r3, [r7, #16]
 8001152:	461a      	mov	r2, r3
 8001154:	4960      	ldr	r1, [pc, #384]	; (80012d8 <command_input+0x348>)
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fece 	bl	8000ef8 <is_same_word>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8140 	beq.w	80013e4 <command_input+0x454>
				word_len=strlen("led1 toggle ");
 8001164:	230c      	movs	r3, #12
 8001166:	743b      	strb	r3, [r7, #16]
				uint8_t toggle_len=strlen((char *)buf+word_len);
 8001168:	7c3b      	ldrb	r3, [r7, #16]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7fe ffee 	bl	8000150 <strlen>
 8001174:	4603      	mov	r3, r0
 8001176:	73bb      	strb	r3, [r7, #14]
				bool is_number = false;
 8001178:	2300      	movs	r3, #0
 800117a:	75bb      	strb	r3, [r7, #22]
				for(uint8_t i=0;i<toggle_len;i++){
 800117c:	2300      	movs	r3, #0
 800117e:	757b      	strb	r3, [r7, #21]
 8001180:	e018      	b.n	80011b4 <command_input+0x224>
					if(buf[word_len+i]>=(int)'0' && buf[word_len+1]<=(int)'9'){
 8001182:	7c3a      	ldrb	r2, [r7, #16]
 8001184:	7d7b      	ldrb	r3, [r7, #21]
 8001186:	4413      	add	r3, r2
 8001188:	461a      	mov	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b2f      	cmp	r3, #47	; 0x2f
 8001192:	d90c      	bls.n	80011ae <command_input+0x21e>
 8001194:	7c3b      	ldrb	r3, [r7, #16]
 8001196:	3301      	adds	r3, #1
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b39      	cmp	r3, #57	; 0x39
 80011a0:	d805      	bhi.n	80011ae <command_input+0x21e>
						is_number=true;
 80011a2:	2301      	movs	r3, #1
 80011a4:	75bb      	strb	r3, [r7, #22]
				for(uint8_t i=0;i<toggle_len;i++){
 80011a6:	7d7b      	ldrb	r3, [r7, #21]
 80011a8:	3301      	adds	r3, #1
 80011aa:	757b      	strb	r3, [r7, #21]
 80011ac:	e002      	b.n	80011b4 <command_input+0x224>
					}
					else{
						is_number=false;
 80011ae:	2300      	movs	r3, #0
 80011b0:	75bb      	strb	r3, [r7, #22]
						break;
 80011b2:	e003      	b.n	80011bc <command_input+0x22c>
				for(uint8_t i=0;i<toggle_len;i++){
 80011b4:	7d7a      	ldrb	r2, [r7, #21]
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d3e2      	bcc.n	8001182 <command_input+0x1f2>
					}
				}
				if(!is_number){
 80011bc:	7dbb      	ldrb	r3, [r7, #22]
 80011be:	f083 0301 	eor.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <command_input+0x242>
					uart_send(1,(char *)"\nerror : toggle time value must be number!");
 80011c8:	4944      	ldr	r1, [pc, #272]	; (80012dc <command_input+0x34c>)
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff fdd0 	bl	8000d70 <uart_send>
					return;
 80011d0:	e112      	b.n	80013f8 <command_input+0x468>
				}
				led1_toggle_time = 0;
 80011d2:	4b43      	ldr	r3, [pc, #268]	; (80012e0 <command_input+0x350>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]
				led1_toggle=true;
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <command_input+0x33c>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<toggle_len;i++){
 80011de:	2300      	movs	r3, #0
 80011e0:	753b      	strb	r3, [r7, #20]
 80011e2:	e017      	b.n	8001214 <command_input+0x284>
					led1_toggle_time = (buf[word_len+i]-48)+led1_toggle_time*10;
 80011e4:	7c3a      	ldrb	r2, [r7, #16]
 80011e6:	7d3b      	ldrb	r3, [r7, #20]
 80011e8:	4413      	add	r3, r2
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <command_input+0x350>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	0089      	lsls	r1, r1, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	b29b      	uxth	r3, r3
 8001202:	4413      	add	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b30      	subs	r3, #48	; 0x30
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <command_input+0x350>)
 800120c:	801a      	strh	r2, [r3, #0]
				for(uint8_t i=0;i<toggle_len;i++){
 800120e:	7d3b      	ldrb	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	753b      	strb	r3, [r7, #20]
 8001214:	7d3a      	ldrb	r2, [r7, #20]
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3e3      	bcc.n	80011e4 <command_input+0x254>
				}
				existing_command = true;
 800121c:	2301      	movs	r3, #1
 800121e:	75fb      	strb	r3, [r7, #23]
 8001220:	e0e0      	b.n	80013e4 <command_input+0x454>
			}
		}
		else if(is_same_word(buf,(uint8_t *)"2",word_len)){
 8001222:	7c3b      	ldrb	r3, [r7, #16]
 8001224:	461a      	mov	r2, r3
 8001226:	492f      	ldr	r1, [pc, #188]	; (80012e4 <command_input+0x354>)
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff fe65 	bl	8000ef8 <is_same_word>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	f000 80d7 	beq.w	80013e4 <command_input+0x454>
			word_len+=2;
 8001236:	7c3b      	ldrb	r3, [r7, #16]
 8001238:	3302      	adds	r3, #2
 800123a:	743b      	strb	r3, [r7, #16]
			if(is_same_word(buf,(uint8_t *)"on",word_len)){
 800123c:	7c3b      	ldrb	r3, [r7, #16]
 800123e:	461a      	mov	r2, r3
 8001240:	4921      	ldr	r1, [pc, #132]	; (80012c8 <command_input+0x338>)
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fe58 	bl	8000ef8 <is_same_word>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d04e      	beq.n	80012ec <command_input+0x35c>
				led2_toggle=false;
 800124e:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <command_input+0x358>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8001254:	2201      	movs	r2, #1
 8001256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800125a:	481d      	ldr	r0, [pc, #116]	; (80012d0 <command_input+0x340>)
 800125c:	f002 f888 	bl	8003370 <HAL_GPIO_WritePin>
				existing_command = true;
 8001260:	2301      	movs	r3, #1
 8001262:	75fb      	strb	r3, [r7, #23]
 8001264:	e0be      	b.n	80013e4 <command_input+0x454>
 8001266:	bf00      	nop
 8001268:	66666666 	.word	0x66666666
 800126c:	400a6666 	.word	0x400a6666
 8001270:	080050f8 	.word	0x080050f8
 8001274:	08005100 	.word	0x08005100
 8001278:	08005138 	.word	0x08005138
 800127c:	0800514c 	.word	0x0800514c
 8001280:	08005160 	.word	0x08005160
 8001284:	08005190 	.word	0x08005190
 8001288:	080051b4 	.word	0x080051b4
 800128c:	080051d4 	.word	0x080051d4
 8001290:	08005210 	.word	0x08005210
 8001294:	08005250 	.word	0x08005250
 8001298:	0800525c 	.word	0x0800525c
 800129c:	08005278 	.word	0x08005278
 80012a0:	080052ac 	.word	0x080052ac
 80012a4:	080052b4 	.word	0x080052b4
 80012a8:	080052b8 	.word	0x080052b8
 80012ac:	080052c0 	.word	0x080052c0
 80012b0:	080052c8 	.word	0x080052c8
 80012b4:	080052d8 	.word	0x080052d8
 80012b8:	2000007c 	.word	0x2000007c
 80012bc:	080052e4 	.word	0x080052e4
 80012c0:	080052f8 	.word	0x080052f8
 80012c4:	080052fc 	.word	0x080052fc
 80012c8:	08005300 	.word	0x08005300
 80012cc:	2000015b 	.word	0x2000015b
 80012d0:	40010800 	.word	0x40010800
 80012d4:	08005304 	.word	0x08005304
 80012d8:	08005308 	.word	0x08005308
 80012dc:	08005310 	.word	0x08005310
 80012e0:	20000000 	.word	0x20000000
 80012e4:	0800533c 	.word	0x0800533c
 80012e8:	2000015c 	.word	0x2000015c
			}
			else if(is_same_word(buf,(uint8_t *)"off",word_len)){
 80012ec:	7c3b      	ldrb	r3, [r7, #16]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4943      	ldr	r1, [pc, #268]	; (8001400 <command_input+0x470>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fe00 	bl	8000ef8 <is_same_word>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00b      	beq.n	8001316 <command_input+0x386>
				led2_toggle=false;
 80012fe:	4b41      	ldr	r3, [pc, #260]	; (8001404 <command_input+0x474>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130a:	483f      	ldr	r0, [pc, #252]	; (8001408 <command_input+0x478>)
 800130c:	f002 f830 	bl	8003370 <HAL_GPIO_WritePin>
				existing_command = true;
 8001310:	2301      	movs	r3, #1
 8001312:	75fb      	strb	r3, [r7, #23]
 8001314:	e066      	b.n	80013e4 <command_input+0x454>
			}
			else if(is_same_word(buf,(uint8_t *)"toggle",word_len)){
 8001316:	7c3b      	ldrb	r3, [r7, #16]
 8001318:	461a      	mov	r2, r3
 800131a:	493c      	ldr	r1, [pc, #240]	; (800140c <command_input+0x47c>)
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff fdeb 	bl	8000ef8 <is_same_word>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d05d      	beq.n	80013e4 <command_input+0x454>
				word_len=strlen("led2 toggle ");
 8001328:	230c      	movs	r3, #12
 800132a:	743b      	strb	r3, [r7, #16]
				uint8_t toggle_len=strlen((char *)buf+word_len);
 800132c:	7c3b      	ldrb	r3, [r7, #16]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7fe ff0c 	bl	8000150 <strlen>
 8001338:	4603      	mov	r3, r0
 800133a:	73fb      	strb	r3, [r7, #15]
				bool is_number = false;
 800133c:	2300      	movs	r3, #0
 800133e:	74fb      	strb	r3, [r7, #19]
				for(uint8_t i=0;i<toggle_len;i++){
 8001340:	2300      	movs	r3, #0
 8001342:	74bb      	strb	r3, [r7, #18]
 8001344:	e018      	b.n	8001378 <command_input+0x3e8>
					if(buf[word_len+i]>=(int)'0' && buf[word_len+1]<=(int)'9'){
 8001346:	7c3a      	ldrb	r2, [r7, #16]
 8001348:	7cbb      	ldrb	r3, [r7, #18]
 800134a:	4413      	add	r3, r2
 800134c:	461a      	mov	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b2f      	cmp	r3, #47	; 0x2f
 8001356:	d90c      	bls.n	8001372 <command_input+0x3e2>
 8001358:	7c3b      	ldrb	r3, [r7, #16]
 800135a:	3301      	adds	r3, #1
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b39      	cmp	r3, #57	; 0x39
 8001364:	d805      	bhi.n	8001372 <command_input+0x3e2>
						is_number=true;
 8001366:	2301      	movs	r3, #1
 8001368:	74fb      	strb	r3, [r7, #19]
				for(uint8_t i=0;i<toggle_len;i++){
 800136a:	7cbb      	ldrb	r3, [r7, #18]
 800136c:	3301      	adds	r3, #1
 800136e:	74bb      	strb	r3, [r7, #18]
 8001370:	e002      	b.n	8001378 <command_input+0x3e8>
					}
					else{
						is_number=false;
 8001372:	2300      	movs	r3, #0
 8001374:	74fb      	strb	r3, [r7, #19]
						break;
 8001376:	e003      	b.n	8001380 <command_input+0x3f0>
				for(uint8_t i=0;i<toggle_len;i++){
 8001378:	7cba      	ldrb	r2, [r7, #18]
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3e2      	bcc.n	8001346 <command_input+0x3b6>
					}
				}
				if(!is_number){
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	f083 0301 	eor.w	r3, r3, #1
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <command_input+0x406>
					uart_send(1,(char *)"\nerror : toggle time value must be number!");
 800138c:	4920      	ldr	r1, [pc, #128]	; (8001410 <command_input+0x480>)
 800138e:	2001      	movs	r0, #1
 8001390:	f7ff fcee 	bl	8000d70 <uart_send>
					return;
 8001394:	e030      	b.n	80013f8 <command_input+0x468>
				}
				led2_toggle_time = 0;
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <command_input+0x484>)
 8001398:	2200      	movs	r2, #0
 800139a:	801a      	strh	r2, [r3, #0]
				led2_toggle=true;
 800139c:	4b19      	ldr	r3, [pc, #100]	; (8001404 <command_input+0x474>)
 800139e:	2201      	movs	r2, #1
 80013a0:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<toggle_len;i++){
 80013a2:	2300      	movs	r3, #0
 80013a4:	747b      	strb	r3, [r7, #17]
 80013a6:	e017      	b.n	80013d8 <command_input+0x448>
					led2_toggle_time = (buf[word_len+i]-48)+led2_toggle_time*10;
 80013a8:	7c3a      	ldrb	r2, [r7, #16]
 80013aa:	7c7b      	ldrb	r3, [r7, #17]
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <command_input+0x484>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	0089      	lsls	r1, r1, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	4413      	add	r3, r2
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	3b30      	subs	r3, #48	; 0x30
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <command_input+0x484>)
 80013d0:	801a      	strh	r2, [r3, #0]
				for(uint8_t i=0;i<toggle_len;i++){
 80013d2:	7c7b      	ldrb	r3, [r7, #17]
 80013d4:	3301      	adds	r3, #1
 80013d6:	747b      	strb	r3, [r7, #17]
 80013d8:	7c7a      	ldrb	r2, [r7, #17]
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3e3      	bcc.n	80013a8 <command_input+0x418>
				}
				existing_command = true;
 80013e0:	2301      	movs	r3, #1
 80013e2:	75fb      	strb	r3, [r7, #23]
			}
		}
	}
	if (!existing_command){
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <command_input+0x468>
		uart_send(1,"\ncommand is not existing. type \'help\' to get command list.");
 80013f0:	4909      	ldr	r1, [pc, #36]	; (8001418 <command_input+0x488>)
 80013f2:	2001      	movs	r0, #1
 80013f4:	f7ff fcbc 	bl	8000d70 <uart_send>
	}
}
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	08005304 	.word	0x08005304
 8001404:	2000015c 	.word	0x2000015c
 8001408:	40010800 	.word	0x40010800
 800140c:	08005308 	.word	0x08005308
 8001410:	08005310 	.word	0x08005310
 8001414:	20000002 	.word	0x20000002
 8001418:	08005340 	.word	0x08005340

0800141c <gpio_led_toggle>:

void gpio_led_toggle(uint32_t *led1_time,uint32_t *led2_time){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	if (led1_toggle){
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <gpio_led_toggle+0x70>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <gpio_led_toggle+0x38>
		if (HAL_GetTick()-*led1_time>led1_toggle_time){
 800142e:	f000 ff8f 	bl	8002350 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <gpio_led_toggle+0x74>)
 800143c:	8812      	ldrh	r2, [r2, #0]
 800143e:	4293      	cmp	r3, r2
 8001440:	d908      	bls.n	8001454 <gpio_led_toggle+0x38>
			*led1_time=HAL_GetTick();
 8001442:	f000 ff85 	bl	8002350 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 800144c:	2120      	movs	r1, #32
 800144e:	4811      	ldr	r0, [pc, #68]	; (8001494 <gpio_led_toggle+0x78>)
 8001450:	f001 ffa6 	bl	80033a0 <HAL_GPIO_TogglePin>
		}
	}
	if (led2_toggle){
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <gpio_led_toggle+0x7c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <gpio_led_toggle+0x68>
		if (HAL_GetTick()-*led2_time>led2_toggle_time){
 800145c:	f000 ff78 	bl	8002350 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <gpio_led_toggle+0x80>)
 800146a:	8812      	ldrh	r2, [r2, #0]
 800146c:	4293      	cmp	r3, r2
 800146e:	d909      	bls.n	8001484 <gpio_led_toggle+0x68>
			*led2_time=HAL_GetTick();
 8001470:	f000 ff6e 	bl	8002350 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 800147a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <gpio_led_toggle+0x78>)
 8001480:	f001 ff8e 	bl	80033a0 <HAL_GPIO_TogglePin>
		}
	}
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000015b 	.word	0x2000015b
 8001490:	20000000 	.word	0x20000000
 8001494:	40010800 	.word	0x40010800
 8001498:	2000015c 	.word	0x2000015c
 800149c:	20000002 	.word	0x20000002

080014a0 <cli_start>:

void cli_start(uint8_t i,keytype key_input){
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	460a      	mov	r2, r1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	4613      	mov	r3, r2
 80014ae:	71bb      	strb	r3, [r7, #6]
	switch (key_input){
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	2b09      	cmp	r3, #9
 80014b6:	f200 842d 	bhi.w	8001d14 <cli_start+0x874>
 80014ba:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <cli_start+0x20>)
 80014bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c0:	080015bf 	.word	0x080015bf
 80014c4:	08001673 	.word	0x08001673
 80014c8:	080014e9 	.word	0x080014e9
 80014cc:	0800153b 	.word	0x0800153b
 80014d0:	08001725 	.word	0x08001725
 80014d4:	080017e5 	.word	0x080017e5
 80014d8:	08001bb5 	.word	0x08001bb5
 80014dc:	08001a45 	.word	0x08001a45
 80014e0:	0800183b 	.word	0x0800183b
 80014e4:	080018cf 	.word	0x080018cf
		case LEFT:
			if(data[data_num].cursor_index>0){
 80014e8:	4bb5      	ldr	r3, [pc, #724]	; (80017c0 <cli_start+0x320>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4ab5      	ldr	r2, [pc, #724]	; (80017c4 <cli_start+0x324>)
 80014f0:	460b      	mov	r3, r1
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	440b      	add	r3, r1
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	3321      	adds	r3, #33	; 0x21
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 840a 	beq.w	8001d18 <cli_start+0x878>
				data[data_num].cursor_index--;
 8001504:	4bae      	ldr	r3, [pc, #696]	; (80017c0 <cli_start+0x320>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	461a      	mov	r2, r3
 800150a:	49ae      	ldr	r1, [pc, #696]	; (80017c4 <cli_start+0x324>)
 800150c:	4613      	mov	r3, r2
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	440b      	add	r3, r1
 8001516:	3321      	adds	r3, #33	; 0x21
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	3b01      	subs	r3, #1
 800151c:	b2d8      	uxtb	r0, r3
 800151e:	49a9      	ldr	r1, [pc, #676]	; (80017c4 <cli_start+0x324>)
 8001520:	4613      	mov	r3, r2
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	440b      	add	r3, r1
 800152a:	3321      	adds	r3, #33	; 0x21
 800152c:	4602      	mov	r2, r0
 800152e:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1D");
 8001530:	49a5      	ldr	r1, [pc, #660]	; (80017c8 <cli_start+0x328>)
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff fc1c 	bl	8000d70 <uart_send>
			}
			break;
 8001538:	e3ee      	b.n	8001d18 <cli_start+0x878>
		case RIGHT:
			if(data[data_num].cursor_index<32 && data[data_num].cursor_index<data[data_num].command_index){
 800153a:	4ba1      	ldr	r3, [pc, #644]	; (80017c0 <cli_start+0x320>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4619      	mov	r1, r3
 8001540:	4aa0      	ldr	r2, [pc, #640]	; (80017c4 <cli_start+0x324>)
 8001542:	460b      	mov	r3, r1
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	440b      	add	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	3321      	adds	r3, #33	; 0x21
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b1f      	cmp	r3, #31
 8001552:	f200 83e3 	bhi.w	8001d1c <cli_start+0x87c>
 8001556:	4b9a      	ldr	r3, [pc, #616]	; (80017c0 <cli_start+0x320>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4a99      	ldr	r2, [pc, #612]	; (80017c4 <cli_start+0x324>)
 800155e:	460b      	mov	r3, r1
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	440b      	add	r3, r1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	3321      	adds	r3, #33	; 0x21
 800156a:	781a      	ldrb	r2, [r3, #0]
 800156c:	4b94      	ldr	r3, [pc, #592]	; (80017c0 <cli_start+0x320>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	4994      	ldr	r1, [pc, #592]	; (80017c4 <cli_start+0x324>)
 8001574:	4603      	mov	r3, r0
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	4403      	add	r3, r0
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	440b      	add	r3, r1
 800157e:	3320      	adds	r3, #32
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	f080 83ca 	bcs.w	8001d1c <cli_start+0x87c>
				data[data_num].cursor_index++;
 8001588:	4b8d      	ldr	r3, [pc, #564]	; (80017c0 <cli_start+0x320>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	498d      	ldr	r1, [pc, #564]	; (80017c4 <cli_start+0x324>)
 8001590:	4613      	mov	r3, r2
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	4413      	add	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	440b      	add	r3, r1
 800159a:	3321      	adds	r3, #33	; 0x21
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	4988      	ldr	r1, [pc, #544]	; (80017c4 <cli_start+0x324>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	011b      	lsls	r3, r3, #4
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	440b      	add	r3, r1
 80015ae:	3321      	adds	r3, #33	; 0x21
 80015b0:	4602      	mov	r2, r0
 80015b2:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1C");
 80015b4:	4985      	ldr	r1, [pc, #532]	; (80017cc <cli_start+0x32c>)
 80015b6:	2001      	movs	r0, #1
 80015b8:	f7ff fbda 	bl	8000d70 <uart_send>
			}
			break;
 80015bc:	e3ae      	b.n	8001d1c <cli_start+0x87c>
		case UP:
			if(data[data_num].cursor_index>0){
 80015be:	4b80      	ldr	r3, [pc, #512]	; (80017c0 <cli_start+0x320>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	4a7f      	ldr	r2, [pc, #508]	; (80017c4 <cli_start+0x324>)
 80015c6:	460b      	mov	r3, r1
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	440b      	add	r3, r1
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	4413      	add	r3, r2
 80015d0:	3321      	adds	r3, #33	; 0x21
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d00f      	beq.n	80015f8 <cli_start+0x158>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 80015d8:	4b79      	ldr	r3, [pc, #484]	; (80017c0 <cli_start+0x320>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4a79      	ldr	r2, [pc, #484]	; (80017c4 <cli_start+0x324>)
 80015e0:	460b      	mov	r3, r1
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	440b      	add	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	4413      	add	r3, r2
 80015ea:	3321      	adds	r3, #33	; 0x21
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	461a      	mov	r2, r3
 80015f0:	4977      	ldr	r1, [pc, #476]	; (80017d0 <cli_start+0x330>)
 80015f2:	2001      	movs	r0, #1
 80015f4:	f7ff fbbc 	bl	8000d70 <uart_send>
			}
			uart_send(1,"\x1B[0J");
 80015f8:	4976      	ldr	r1, [pc, #472]	; (80017d4 <cli_start+0x334>)
 80015fa:	2001      	movs	r0, #1
 80015fc:	f7ff fbb8 	bl	8000d70 <uart_send>
			data_num++;
 8001600:	4b6f      	ldr	r3, [pc, #444]	; (80017c0 <cli_start+0x320>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	b2da      	uxtb	r2, r3
 8001608:	4b6d      	ldr	r3, [pc, #436]	; (80017c0 <cli_start+0x320>)
 800160a:	701a      	strb	r2, [r3, #0]
			data_num%=3;
 800160c:	4b6c      	ldr	r3, [pc, #432]	; (80017c0 <cli_start+0x320>)
 800160e:	781a      	ldrb	r2, [r3, #0]
 8001610:	4b71      	ldr	r3, [pc, #452]	; (80017d8 <cli_start+0x338>)
 8001612:	fba3 1302 	umull	r1, r3, r3, r2
 8001616:	0859      	lsrs	r1, r3, #1
 8001618:	460b      	mov	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	440b      	add	r3, r1
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <cli_start+0x320>)
 8001624:	701a      	strb	r2, [r3, #0]
			uart_send(1,"\x1B[4h%s\x1B[4l",data[data_num].command_buffer);
 8001626:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <cli_start+0x320>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4613      	mov	r3, r2
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4a63      	ldr	r2, [pc, #396]	; (80017c4 <cli_start+0x324>)
 8001636:	4413      	add	r3, r2
 8001638:	461a      	mov	r2, r3
 800163a:	4968      	ldr	r1, [pc, #416]	; (80017dc <cli_start+0x33c>)
 800163c:	2001      	movs	r0, #1
 800163e:	f7ff fb97 	bl	8000d70 <uart_send>
			data[data_num].cursor_index=data[data_num].command_index;
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <cli_start+0x320>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	4b5d      	ldr	r3, [pc, #372]	; (80017c0 <cli_start+0x320>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	4a5d      	ldr	r2, [pc, #372]	; (80017c4 <cli_start+0x324>)
 8001650:	4603      	mov	r3, r0
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	4403      	add	r3, r0
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	3320      	adds	r3, #32
 800165c:	7818      	ldrb	r0, [r3, #0]
 800165e:	4a59      	ldr	r2, [pc, #356]	; (80017c4 <cli_start+0x324>)
 8001660:	460b      	mov	r3, r1
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	440b      	add	r3, r1
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	3321      	adds	r3, #33	; 0x21
 800166c:	4602      	mov	r2, r0
 800166e:	701a      	strb	r2, [r3, #0]
			break;
 8001670:	e35f      	b.n	8001d32 <cli_start+0x892>
		case DOWN:
			if(data[data_num].cursor_index>0){
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <cli_start+0x320>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <cli_start+0x324>)
 800167a:	460b      	mov	r3, r1
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	440b      	add	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	3321      	adds	r3, #33	; 0x21
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d00f      	beq.n	80016ac <cli_start+0x20c>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 800168c:	4b4c      	ldr	r3, [pc, #304]	; (80017c0 <cli_start+0x320>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	4a4c      	ldr	r2, [pc, #304]	; (80017c4 <cli_start+0x324>)
 8001694:	460b      	mov	r3, r1
 8001696:	011b      	lsls	r3, r3, #4
 8001698:	440b      	add	r3, r1
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	3321      	adds	r3, #33	; 0x21
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	494a      	ldr	r1, [pc, #296]	; (80017d0 <cli_start+0x330>)
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff fb62 	bl	8000d70 <uart_send>
			}
			uart_send(1,"\x1B[0J");
 80016ac:	4949      	ldr	r1, [pc, #292]	; (80017d4 <cli_start+0x334>)
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff fb5e 	bl	8000d70 <uart_send>
			if(data_num>0){
 80016b4:	4b42      	ldr	r3, [pc, #264]	; (80017c0 <cli_start+0x320>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <cli_start+0x22a>
				data_num--;
 80016bc:	4b40      	ldr	r3, [pc, #256]	; (80017c0 <cli_start+0x320>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b3e      	ldr	r3, [pc, #248]	; (80017c0 <cli_start+0x320>)
 80016c6:	701a      	strb	r2, [r3, #0]
 80016c8:	e006      	b.n	80016d8 <cli_start+0x238>
			}
			else if(data_num==0){
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <cli_start+0x320>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d102      	bne.n	80016d8 <cli_start+0x238>
				data_num=2;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <cli_start+0x320>)
 80016d4:	2202      	movs	r2, #2
 80016d6:	701a      	strb	r2, [r3, #0]
			}
			uart_send(1,"\x1B[4h%s\x1B[4l",data[data_num].command_buffer);
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <cli_start+0x320>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	461a      	mov	r2, r3
 80016de:	4613      	mov	r3, r2
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	4413      	add	r3, r2
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4a37      	ldr	r2, [pc, #220]	; (80017c4 <cli_start+0x324>)
 80016e8:	4413      	add	r3, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	493b      	ldr	r1, [pc, #236]	; (80017dc <cli_start+0x33c>)
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff fb3e 	bl	8000d70 <uart_send>
			data[data_num].cursor_index=data[data_num].command_index;
 80016f4:	4b32      	ldr	r3, [pc, #200]	; (80017c0 <cli_start+0x320>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <cli_start+0x320>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	4a30      	ldr	r2, [pc, #192]	; (80017c4 <cli_start+0x324>)
 8001702:	4603      	mov	r3, r0
 8001704:	011b      	lsls	r3, r3, #4
 8001706:	4403      	add	r3, r0
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	3320      	adds	r3, #32
 800170e:	7818      	ldrb	r0, [r3, #0]
 8001710:	4a2c      	ldr	r2, [pc, #176]	; (80017c4 <cli_start+0x324>)
 8001712:	460b      	mov	r3, r1
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	440b      	add	r3, r1
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3321      	adds	r3, #33	; 0x21
 800171e:	4602      	mov	r2, r0
 8001720:	701a      	strb	r2, [r3, #0]
			break;
 8001722:	e306      	b.n	8001d32 <cli_start+0x892>
		case END:
			if(data[data_num].command_index>data[data_num].cursor_index){
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <cli_start+0x320>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <cli_start+0x324>)
 800172c:	460b      	mov	r3, r1
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	440b      	add	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	3320      	adds	r3, #32
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <cli_start+0x320>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	4920      	ldr	r1, [pc, #128]	; (80017c4 <cli_start+0x324>)
 8001742:	4603      	mov	r3, r0
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4403      	add	r3, r0
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	440b      	add	r3, r1
 800174c:	3321      	adds	r3, #33	; 0x21
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	f240 82e5 	bls.w	8001d20 <cli_start+0x880>
				uart_send(1,"\x1B[%dC",data[data_num].command_index-data[data_num].cursor_index);
 8001756:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <cli_start+0x320>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	4619      	mov	r1, r3
 800175c:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <cli_start+0x324>)
 800175e:	460b      	mov	r3, r1
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	440b      	add	r3, r1
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	3320      	adds	r3, #32
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <cli_start+0x320>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4a13      	ldr	r2, [pc, #76]	; (80017c4 <cli_start+0x324>)
 8001776:	460b      	mov	r3, r1
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	440b      	add	r3, r1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	3321      	adds	r3, #33	; 0x21
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	1ac3      	subs	r3, r0, r3
 8001786:	461a      	mov	r2, r3
 8001788:	4915      	ldr	r1, [pc, #84]	; (80017e0 <cli_start+0x340>)
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff faf0 	bl	8000d70 <uart_send>
				data[data_num].cursor_index=data[data_num].command_index;
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <cli_start+0x320>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <cli_start+0x320>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4619      	mov	r1, r3
 800179c:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <cli_start+0x324>)
 800179e:	4603      	mov	r3, r0
 80017a0:	011b      	lsls	r3, r3, #4
 80017a2:	4403      	add	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	4413      	add	r3, r2
 80017a8:	3320      	adds	r3, #32
 80017aa:	7818      	ldrb	r0, [r3, #0]
 80017ac:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <cli_start+0x324>)
 80017ae:	460b      	mov	r3, r1
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	440b      	add	r3, r1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	4413      	add	r3, r2
 80017b8:	3321      	adds	r3, #33	; 0x21
 80017ba:	4602      	mov	r2, r0
 80017bc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80017be:	e2af      	b.n	8001d20 <cli_start+0x880>
 80017c0:	2000015a 	.word	0x2000015a
 80017c4:	200000f4 	.word	0x200000f4
 80017c8:	0800537c 	.word	0x0800537c
 80017cc:	08005384 	.word	0x08005384
 80017d0:	0800538c 	.word	0x0800538c
 80017d4:	08005394 	.word	0x08005394
 80017d8:	aaaaaaab 	.word	0xaaaaaaab
 80017dc:	0800539c 	.word	0x0800539c
 80017e0:	080053a8 	.word	0x080053a8
		case HOME:
			if(data[data_num].cursor_index>0){
 80017e4:	4b90      	ldr	r3, [pc, #576]	; (8001a28 <cli_start+0x588>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	4619      	mov	r1, r3
 80017ea:	4a90      	ldr	r2, [pc, #576]	; (8001a2c <cli_start+0x58c>)
 80017ec:	460b      	mov	r3, r1
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	440b      	add	r3, r1
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	3321      	adds	r3, #33	; 0x21
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8292 	beq.w	8001d24 <cli_start+0x884>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 8001800:	4b89      	ldr	r3, [pc, #548]	; (8001a28 <cli_start+0x588>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	4a89      	ldr	r2, [pc, #548]	; (8001a2c <cli_start+0x58c>)
 8001808:	460b      	mov	r3, r1
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	440b      	add	r3, r1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	4413      	add	r3, r2
 8001812:	3321      	adds	r3, #33	; 0x21
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	4985      	ldr	r1, [pc, #532]	; (8001a30 <cli_start+0x590>)
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff faa8 	bl	8000d70 <uart_send>
				data[data_num].cursor_index=0;
 8001820:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <cli_start+0x588>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	4a81      	ldr	r2, [pc, #516]	; (8001a2c <cli_start+0x58c>)
 8001828:	460b      	mov	r3, r1
 800182a:	011b      	lsls	r3, r3, #4
 800182c:	440b      	add	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	3321      	adds	r3, #33	; 0x21
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001838:	e274      	b.n	8001d24 <cli_start+0x884>
		case ENTER:
			/*operating command when enter is pressed*/
			command_input(data[data_num].command_buffer);
 800183a:	4b7b      	ldr	r3, [pc, #492]	; (8001a28 <cli_start+0x588>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	4613      	mov	r3, r2
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	4413      	add	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4a78      	ldr	r2, [pc, #480]	; (8001a2c <cli_start+0x58c>)
 800184a:	4413      	add	r3, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fb9f 	bl	8000f90 <command_input>
			/*end operating*/
			uart_send(1,"\nCLI-# ");
 8001852:	4978      	ldr	r1, [pc, #480]	; (8001a34 <cli_start+0x594>)
 8001854:	2001      	movs	r0, #1
 8001856:	f7ff fa8b 	bl	8000d70 <uart_send>
			data_num++;
 800185a:	4b73      	ldr	r3, [pc, #460]	; (8001a28 <cli_start+0x588>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b71      	ldr	r3, [pc, #452]	; (8001a28 <cli_start+0x588>)
 8001864:	701a      	strb	r2, [r3, #0]
			data_num%=3;
 8001866:	4b70      	ldr	r3, [pc, #448]	; (8001a28 <cli_start+0x588>)
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <cli_start+0x598>)
 800186c:	fba3 1302 	umull	r1, r3, r3, r2
 8001870:	0859      	lsrs	r1, r3, #1
 8001872:	460b      	mov	r3, r1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	440b      	add	r3, r1
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b6a      	ldr	r3, [pc, #424]	; (8001a28 <cli_start+0x588>)
 800187e:	701a      	strb	r2, [r3, #0]
			memset(data[data_num].command_buffer,0,32);
 8001880:	4b69      	ldr	r3, [pc, #420]	; (8001a28 <cli_start+0x588>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4a67      	ldr	r2, [pc, #412]	; (8001a2c <cli_start+0x58c>)
 8001890:	4413      	add	r3, r2
 8001892:	2220      	movs	r2, #32
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f002 ff4e 	bl	8004738 <memset>
			data[data_num].command_index=0;
 800189c:	4b62      	ldr	r3, [pc, #392]	; (8001a28 <cli_start+0x588>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4a62      	ldr	r2, [pc, #392]	; (8001a2c <cli_start+0x58c>)
 80018a4:	460b      	mov	r3, r1
 80018a6:	011b      	lsls	r3, r3, #4
 80018a8:	440b      	add	r3, r1
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	3320      	adds	r3, #32
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
			data[data_num].cursor_index=0;
 80018b4:	4b5c      	ldr	r3, [pc, #368]	; (8001a28 <cli_start+0x588>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <cli_start+0x58c>)
 80018bc:	460b      	mov	r3, r1
 80018be:	011b      	lsls	r3, r3, #4
 80018c0:	440b      	add	r3, r1
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	3321      	adds	r3, #33	; 0x21
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
			break;
 80018cc:	e231      	b.n	8001d32 <cli_start+0x892>
		case IS_WORD:
			if(data[data_num].command_index<32){
 80018ce:	4b56      	ldr	r3, [pc, #344]	; (8001a28 <cli_start+0x588>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <cli_start+0x58c>)
 80018d6:	460b      	mov	r3, r1
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	440b      	add	r3, r1
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	3320      	adds	r3, #32
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b1f      	cmp	r3, #31
 80018e6:	f200 821f 	bhi.w	8001d28 <cli_start+0x888>
				data[data_num].command_index++;
 80018ea:	4b4f      	ldr	r3, [pc, #316]	; (8001a28 <cli_start+0x588>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	494e      	ldr	r1, [pc, #312]	; (8001a2c <cli_start+0x58c>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	011b      	lsls	r3, r3, #4
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	440b      	add	r3, r1
 80018fc:	3320      	adds	r3, #32
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2d8      	uxtb	r0, r3
 8001904:	4949      	ldr	r1, [pc, #292]	; (8001a2c <cli_start+0x58c>)
 8001906:	4613      	mov	r3, r2
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	440b      	add	r3, r1
 8001910:	3320      	adds	r3, #32
 8001912:	4602      	mov	r2, r0
 8001914:	701a      	strb	r2, [r3, #0]
				if(data[data_num].command_index-1!=data[data_num].cursor_index){
 8001916:	4b44      	ldr	r3, [pc, #272]	; (8001a28 <cli_start+0x588>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	4a43      	ldr	r2, [pc, #268]	; (8001a2c <cli_start+0x58c>)
 800191e:	460b      	mov	r3, r1
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	440b      	add	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	3320      	adds	r3, #32
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	1e5a      	subs	r2, r3, #1
 800192e:	4b3e      	ldr	r3, [pc, #248]	; (8001a28 <cli_start+0x588>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	493d      	ldr	r1, [pc, #244]	; (8001a2c <cli_start+0x58c>)
 8001936:	4603      	mov	r3, r0
 8001938:	011b      	lsls	r3, r3, #4
 800193a:	4403      	add	r3, r0
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	440b      	add	r3, r1
 8001940:	3321      	adds	r3, #33	; 0x21
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d03f      	beq.n	80019c8 <cli_start+0x528>
					for(int8_t j=data[data_num].command_index-1;j>=data[data_num].cursor_index;j--){
 8001948:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <cli_start+0x588>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	4a37      	ldr	r2, [pc, #220]	; (8001a2c <cli_start+0x58c>)
 8001950:	460b      	mov	r3, r1
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	440b      	add	r3, r1
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	3320      	adds	r3, #32
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	3b01      	subs	r3, #1
 8001960:	b2db      	uxtb	r3, r3
 8001962:	73fb      	strb	r3, [r7, #15]
 8001964:	e021      	b.n	80019aa <cli_start+0x50a>
						data[data_num].command_buffer[j+1]=data[data_num].command_buffer[j];
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <cli_start+0x588>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	461d      	mov	r5, r3
 800196c:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <cli_start+0x588>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461c      	mov	r4, r3
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	482b      	ldr	r0, [pc, #172]	; (8001a2c <cli_start+0x58c>)
 800197e:	462b      	mov	r3, r5
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	442b      	add	r3, r5
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4403      	add	r3, r0
 8001988:	440b      	add	r3, r1
 800198a:	7818      	ldrb	r0, [r3, #0]
 800198c:	4927      	ldr	r1, [pc, #156]	; (8001a2c <cli_start+0x58c>)
 800198e:	4623      	mov	r3, r4
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4423      	add	r3, r4
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	440b      	add	r3, r1
 8001998:	4413      	add	r3, r2
 800199a:	4602      	mov	r2, r0
 800199c:	701a      	strb	r2, [r3, #0]
					for(int8_t j=data[data_num].command_index-1;j>=data[data_num].cursor_index;j--){
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <cli_start+0x588>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	491d      	ldr	r1, [pc, #116]	; (8001a2c <cli_start+0x58c>)
 80019b6:	4603      	mov	r3, r0
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	4403      	add	r3, r0
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	440b      	add	r3, r1
 80019c0:	3321      	adds	r3, #33	; 0x21
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dace      	bge.n	8001966 <cli_start+0x4c6>
					}
				}
				data[data_num].command_buffer[data[data_num].cursor_index++]=command_tx[i];
 80019c8:	79f8      	ldrb	r0, [r7, #7]
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <cli_start+0x588>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	461d      	mov	r5, r3
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <cli_start+0x588>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4915      	ldr	r1, [pc, #84]	; (8001a2c <cli_start+0x58c>)
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	440b      	add	r3, r1
 80019e2:	3321      	adds	r3, #33	; 0x21
 80019e4:	7819      	ldrb	r1, [r3, #0]
 80019e6:	1c4b      	adds	r3, r1, #1
 80019e8:	b2de      	uxtb	r6, r3
 80019ea:	4c10      	ldr	r4, [pc, #64]	; (8001a2c <cli_start+0x58c>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4423      	add	r3, r4
 80019f6:	3321      	adds	r3, #33	; 0x21
 80019f8:	4632      	mov	r2, r6
 80019fa:	701a      	strb	r2, [r3, #0]
 80019fc:	460c      	mov	r4, r1
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <cli_start+0x59c>)
 8001a00:	5c19      	ldrb	r1, [r3, r0]
 8001a02:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <cli_start+0x58c>)
 8001a04:	462b      	mov	r3, r5
 8001a06:	011b      	lsls	r3, r3, #4
 8001a08:	442b      	add	r3, r5
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4423      	add	r3, r4
 8001a10:	460a      	mov	r2, r1
 8001a12:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[4h%c\x1B[4l",command_tx[i]);
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <cli_start+0x59c>)
 8001a18:	5cd3      	ldrb	r3, [r2, r3]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4908      	ldr	r1, [pc, #32]	; (8001a40 <cli_start+0x5a0>)
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f7ff f9a6 	bl	8000d70 <uart_send>
			}
			break;
 8001a24:	e180      	b.n	8001d28 <cli_start+0x888>
 8001a26:	bf00      	nop
 8001a28:	2000015a 	.word	0x2000015a
 8001a2c:	200000f4 	.word	0x200000f4
 8001a30:	0800538c 	.word	0x0800538c
 8001a34:	080053b0 	.word	0x080053b0
 8001a38:	aaaaaaab 	.word	0xaaaaaaab
 8001a3c:	200000ac 	.word	0x200000ac
 8001a40:	080053b8 	.word	0x080053b8
		case BACKSPACE:
			if(data[data_num].command_index>0 && data[data_num].cursor_index>0){
 8001a44:	4bbd      	ldr	r3, [pc, #756]	; (8001d3c <cli_start+0x89c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4abd      	ldr	r2, [pc, #756]	; (8001d40 <cli_start+0x8a0>)
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	440b      	add	r3, r1
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	3320      	adds	r3, #32
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 8166 	beq.w	8001d2c <cli_start+0x88c>
 8001a60:	4bb6      	ldr	r3, [pc, #728]	; (8001d3c <cli_start+0x89c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	4ab6      	ldr	r2, [pc, #728]	; (8001d40 <cli_start+0x8a0>)
 8001a68:	460b      	mov	r3, r1
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	440b      	add	r3, r1
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	3321      	adds	r3, #33	; 0x21
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f000 8158 	beq.w	8001d2c <cli_start+0x88c>
				data[data_num].command_index--;
 8001a7c:	4baf      	ldr	r3, [pc, #700]	; (8001d3c <cli_start+0x89c>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	49af      	ldr	r1, [pc, #700]	; (8001d40 <cli_start+0x8a0>)
 8001a84:	4613      	mov	r3, r2
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3320      	adds	r3, #32
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	b2d8      	uxtb	r0, r3
 8001a96:	49aa      	ldr	r1, [pc, #680]	; (8001d40 <cli_start+0x8a0>)
 8001a98:	4613      	mov	r3, r2
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4413      	add	r3, r2
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3320      	adds	r3, #32
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	701a      	strb	r2, [r3, #0]
				data[data_num].command_buffer[--data[data_num].cursor_index]=0;
 8001aa8:	4ba4      	ldr	r3, [pc, #656]	; (8001d3c <cli_start+0x89c>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	4ba3      	ldr	r3, [pc, #652]	; (8001d3c <cli_start+0x89c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	49a2      	ldr	r1, [pc, #648]	; (8001d40 <cli_start+0x8a0>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	440b      	add	r3, r1
 8001ac0:	3321      	adds	r3, #33	; 0x21
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b2dc      	uxtb	r4, r3
 8001ac8:	499d      	ldr	r1, [pc, #628]	; (8001d40 <cli_start+0x8a0>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3321      	adds	r3, #33	; 0x21
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	7019      	strb	r1, [r3, #0]
 8001ada:	4999      	ldr	r1, [pc, #612]	; (8001d40 <cli_start+0x8a0>)
 8001adc:	4613      	mov	r3, r2
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4413      	add	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	440b      	add	r3, r1
 8001ae6:	3321      	adds	r3, #33	; 0x21
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	4619      	mov	r1, r3
 8001aec:	4a94      	ldr	r2, [pc, #592]	; (8001d40 <cli_start+0x8a0>)
 8001aee:	4603      	mov	r3, r0
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	4403      	add	r3, r0
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	440b      	add	r3, r1
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8001afe:	4b8f      	ldr	r3, [pc, #572]	; (8001d3c <cli_start+0x89c>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	4a8e      	ldr	r2, [pc, #568]	; (8001d40 <cli_start+0x8a0>)
 8001b06:	460b      	mov	r3, r1
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	440b      	add	r3, r1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	3321      	adds	r3, #33	; 0x21
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	73bb      	strb	r3, [r7, #14]
 8001b16:	e021      	b.n	8001b5c <cli_start+0x6bc>
					data[data_num].command_buffer[j]=data[data_num].command_buffer[j+1];
 8001b18:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <cli_start+0x89c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461d      	mov	r5, r3
 8001b1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b22:	1c59      	adds	r1, r3, #1
 8001b24:	4b85      	ldr	r3, [pc, #532]	; (8001d3c <cli_start+0x89c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461c      	mov	r4, r3
 8001b2a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b2e:	4884      	ldr	r0, [pc, #528]	; (8001d40 <cli_start+0x8a0>)
 8001b30:	462b      	mov	r3, r5
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	442b      	add	r3, r5
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	4403      	add	r3, r0
 8001b3a:	440b      	add	r3, r1
 8001b3c:	7818      	ldrb	r0, [r3, #0]
 8001b3e:	4980      	ldr	r1, [pc, #512]	; (8001d40 <cli_start+0x8a0>)
 8001b40:	4623      	mov	r3, r4
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4423      	add	r3, r4
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	440b      	add	r3, r1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8001b50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	73bb      	strb	r3, [r7, #14]
 8001b5c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001b60:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <cli_start+0x89c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	4976      	ldr	r1, [pc, #472]	; (8001d40 <cli_start+0x8a0>)
 8001b68:	4603      	mov	r3, r0
 8001b6a:	011b      	lsls	r3, r3, #4
 8001b6c:	4403      	add	r3, r0
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	440b      	add	r3, r1
 8001b72:	3320      	adds	r3, #32
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dbce      	blt.n	8001b18 <cli_start+0x678>
				}
				data[data_num].command_buffer[data[data_num].command_index]=0;
 8001b7a:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <cli_start+0x89c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4b6e      	ldr	r3, [pc, #440]	; (8001d3c <cli_start+0x89c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	4a6e      	ldr	r2, [pc, #440]	; (8001d40 <cli_start+0x8a0>)
 8001b88:	4603      	mov	r3, r0
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	4403      	add	r3, r0
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	3320      	adds	r3, #32
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	4a69      	ldr	r2, [pc, #420]	; (8001d40 <cli_start+0x8a0>)
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	440b      	add	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4403      	add	r3, r0
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1D\x1B[1P");
 8001baa:	4966      	ldr	r1, [pc, #408]	; (8001d44 <cli_start+0x8a4>)
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff f8df 	bl	8000d70 <uart_send>
			}
			break;
 8001bb2:	e0bb      	b.n	8001d2c <cli_start+0x88c>
		case DEL:
			if(data[data_num].command_index>0 && data[data_num].command_index!=data[data_num].cursor_index){
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <cli_start+0x89c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4a61      	ldr	r2, [pc, #388]	; (8001d40 <cli_start+0x8a0>)
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	011b      	lsls	r3, r3, #4
 8001bc0:	440b      	add	r3, r1
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3320      	adds	r3, #32
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80b0 	beq.w	8001d30 <cli_start+0x890>
 8001bd0:	4b5a      	ldr	r3, [pc, #360]	; (8001d3c <cli_start+0x89c>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4a5a      	ldr	r2, [pc, #360]	; (8001d40 <cli_start+0x8a0>)
 8001bd8:	460b      	mov	r3, r1
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	440b      	add	r3, r1
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	3320      	adds	r3, #32
 8001be4:	781a      	ldrb	r2, [r3, #0]
 8001be6:	4b55      	ldr	r3, [pc, #340]	; (8001d3c <cli_start+0x89c>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	4954      	ldr	r1, [pc, #336]	; (8001d40 <cli_start+0x8a0>)
 8001bee:	4603      	mov	r3, r0
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4403      	add	r3, r0
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	440b      	add	r3, r1
 8001bf8:	3321      	adds	r3, #33	; 0x21
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f000 8097 	beq.w	8001d30 <cli_start+0x890>
				data[data_num].command_index--;
 8001c02:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <cli_start+0x89c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	494d      	ldr	r1, [pc, #308]	; (8001d40 <cli_start+0x8a0>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	440b      	add	r3, r1
 8001c14:	3320      	adds	r3, #32
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b2d8      	uxtb	r0, r3
 8001c1c:	4948      	ldr	r1, [pc, #288]	; (8001d40 <cli_start+0x8a0>)
 8001c1e:	4613      	mov	r3, r2
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	440b      	add	r3, r1
 8001c28:	3320      	adds	r3, #32
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	701a      	strb	r2, [r3, #0]
				data[data_num].command_buffer[data[data_num].cursor_index]=0;
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <cli_start+0x89c>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4619      	mov	r1, r3
 8001c34:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <cli_start+0x89c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	4a41      	ldr	r2, [pc, #260]	; (8001d40 <cli_start+0x8a0>)
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4403      	add	r3, r0
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	3321      	adds	r3, #33	; 0x21
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4a3c      	ldr	r2, [pc, #240]	; (8001d40 <cli_start+0x8a0>)
 8001c4e:	460b      	mov	r3, r1
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	440b      	add	r3, r1
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	4403      	add	r3, r0
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <cli_start+0x89c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4a36      	ldr	r2, [pc, #216]	; (8001d40 <cli_start+0x8a0>)
 8001c66:	460b      	mov	r3, r1
 8001c68:	011b      	lsls	r3, r3, #4
 8001c6a:	440b      	add	r3, r1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	4413      	add	r3, r2
 8001c70:	3321      	adds	r3, #33	; 0x21
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	737b      	strb	r3, [r7, #13]
 8001c76:	e021      	b.n	8001cbc <cli_start+0x81c>
					data[data_num].command_buffer[j]=data[data_num].command_buffer[j+1];
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <cli_start+0x89c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c82:	1c59      	adds	r1, r3, #1
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <cli_start+0x89c>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	461c      	mov	r4, r3
 8001c8a:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001c8e:	482c      	ldr	r0, [pc, #176]	; (8001d40 <cli_start+0x8a0>)
 8001c90:	462b      	mov	r3, r5
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	442b      	add	r3, r5
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4403      	add	r3, r0
 8001c9a:	440b      	add	r3, r1
 8001c9c:	7818      	ldrb	r0, [r3, #0]
 8001c9e:	4928      	ldr	r1, [pc, #160]	; (8001d40 <cli_start+0x8a0>)
 8001ca0:	4623      	mov	r3, r4
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4423      	add	r3, r4
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	440b      	add	r3, r1
 8001caa:	4413      	add	r3, r2
 8001cac:	4602      	mov	r2, r0
 8001cae:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8001cb0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	737b      	strb	r3, [r7, #13]
 8001cbc:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <cli_start+0x89c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	491e      	ldr	r1, [pc, #120]	; (8001d40 <cli_start+0x8a0>)
 8001cc8:	4603      	mov	r3, r0
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4403      	add	r3, r0
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3320      	adds	r3, #32
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbce      	blt.n	8001c78 <cli_start+0x7d8>
				}
				data[data_num].command_buffer[data[data_num].command_index]=0;
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <cli_start+0x89c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <cli_start+0x89c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <cli_start+0x8a0>)
 8001ce8:	4603      	mov	r3, r0
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4403      	add	r3, r0
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3320      	adds	r3, #32
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <cli_start+0x8a0>)
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	440b      	add	r3, r1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	4403      	add	r3, r0
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1P");
 8001d0a:	490f      	ldr	r1, [pc, #60]	; (8001d48 <cli_start+0x8a8>)
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff f82f 	bl	8000d70 <uart_send>
			}
			break;
 8001d12:	e00d      	b.n	8001d30 <cli_start+0x890>
		default:
			break;
 8001d14:	bf00      	nop
 8001d16:	e00c      	b.n	8001d32 <cli_start+0x892>
			break;
 8001d18:	bf00      	nop
 8001d1a:	e00a      	b.n	8001d32 <cli_start+0x892>
			break;
 8001d1c:	bf00      	nop
 8001d1e:	e008      	b.n	8001d32 <cli_start+0x892>
			break;
 8001d20:	bf00      	nop
 8001d22:	e006      	b.n	8001d32 <cli_start+0x892>
			break;
 8001d24:	bf00      	nop
 8001d26:	e004      	b.n	8001d32 <cli_start+0x892>
			break;
 8001d28:	bf00      	nop
 8001d2a:	e002      	b.n	8001d32 <cli_start+0x892>
			break;
 8001d2c:	bf00      	nop
 8001d2e:	e000      	b.n	8001d32 <cli_start+0x892>
			break;
 8001d30:	bf00      	nop
	}
	uart_send(2,"\n\n\n");
	uart_send(2,"num %d command buffer val:%s\n",data_num,data[data_num].command_buffer);
	uart_send(2,"command index:%d cursor index:%d\n",data[data_num].command_index,data[data_num].cursor_index);
	*/
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000015a 	.word	0x2000015a
 8001d40:	200000f4 	.word	0x200000f4
 8001d44:	080053c4 	.word	0x080053c4
 8001d48:	080053d0 	.word	0x080053d0

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d52:	f000 faa5 	bl	80022a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d56:	f000 f87b 	bl	8001e50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d5a:	f7fe fd9f 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 8001d5e:	f7fe fd7f 	bl	8000860 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d62:	f000 f975 	bl	8002050 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001d66:	f000 f99d 	bl	80020a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001d6a:	f7fe fcff 	bl	800076c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1,&command_tx[0],5);
 8001d6e:	2205      	movs	r2, #5
 8001d70:	4930      	ldr	r1, [pc, #192]	; (8001e34 <main+0xe8>)
 8001d72:	4831      	ldr	r0, [pc, #196]	; (8001e38 <main+0xec>)
 8001d74:	f002 faf4 	bl	8004360 <UART_Start_Receive_DMA>
  HAL_ADC_Start(&hadc1);
 8001d78:	4830      	ldr	r0, [pc, #192]	; (8001e3c <main+0xf0>)
 8001d7a:	f000 fbef 	bl	800255c <HAL_ADC_Start>
  uint32_t pre_time1=HAL_GetTick();
 8001d7e:	f000 fae7 	bl	8002350 <HAL_GetTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	60bb      	str	r3, [r7, #8]
  uint32_t pre_time2=HAL_GetTick();
 8001d86:	f000 fae3 	bl	8002350 <HAL_GetTick>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	607b      	str	r3, [r7, #4]
  for (int8_t i=0;i<3;i++){
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e012      	b.n	8001dba <main+0x6e>
	  memset(data[i].command_buffer,0,32);
 8001d94:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <main+0xf4>)
 8001da2:	4413      	add	r3, r2
 8001da4:	2220      	movs	r2, #32
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 fcc5 	bl	8004738 <memset>
  for (int8_t i=0;i<3;i++){
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	3301      	adds	r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	73fb      	strb	r3, [r7, #15]
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	dde8      	ble.n	8001d94 <main+0x48>
  }
  memset(send_buffer,0,32);
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	481f      	ldr	r0, [pc, #124]	; (8001e44 <main+0xf8>)
 8001dc8:	f002 fcb6 	bl	8004738 <memset>
  uart_send(1,"CLI-# ");
 8001dcc:	491e      	ldr	r1, [pc, #120]	; (8001e48 <main+0xfc>)
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7fe ffce 	bl	8000d70 <uart_send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t i=0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73bb      	strb	r3, [r7, #14]
	keytype key=KEY_NONE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	737b      	strb	r3, [r7, #13]
	for (;;){
		i=i%5;
 8001ddc:	7bba      	ldrb	r2, [r7, #14]
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <main+0x100>)
 8001de0:	fba3 1302 	umull	r1, r3, r3, r2
 8001de4:	0899      	lsrs	r1, r3, #2
 8001de6:	460b      	mov	r3, r1
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	73bb      	strb	r3, [r7, #14]
		gpio_led_toggle(&pre_time1,&pre_time2);
 8001df0:	1d3a      	adds	r2, r7, #4
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fb0f 	bl	800141c <gpio_led_toggle>
		key=is_command(&command_tx[0],i);
 8001dfe:	7bbb      	ldrb	r3, [r7, #14]
 8001e00:	4619      	mov	r1, r3
 8001e02:	480c      	ldr	r0, [pc, #48]	; (8001e34 <main+0xe8>)
 8001e04:	f7fe ffe8 	bl	8000dd8 <is_command>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	737b      	strb	r3, [r7, #13]
		if (key!=KEY_NONE){
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <main+0xce>
			break;
		}
		i++;
 8001e12:	7bbb      	ldrb	r3, [r7, #14]
 8001e14:	3301      	adds	r3, #1
 8001e16:	73bb      	strb	r3, [r7, #14]
		i=i%5;
 8001e18:	e7e0      	b.n	8001ddc <main+0x90>
			break;
 8001e1a:	bf00      	nop
	  }
	cli_start(i,key);
 8001e1c:	7b7a      	ldrb	r2, [r7, #13]
 8001e1e:	7bbb      	ldrb	r3, [r7, #14]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fb3c 	bl	80014a0 <cli_start>
	memset(command_tx,0,5);
 8001e28:	2205      	movs	r2, #5
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4801      	ldr	r0, [pc, #4]	; (8001e34 <main+0xe8>)
 8001e2e:	f002 fc83 	bl	8004738 <memset>
  {
 8001e32:	e7cf      	b.n	8001dd4 <main+0x88>
 8001e34:	200000ac 	.word	0x200000ac
 8001e38:	20000570 	.word	0x20000570
 8001e3c:	2000007c 	.word	0x2000007c
 8001e40:	200000f4 	.word	0x200000f4
 8001e44:	200000b4 	.word	0x200000b4
 8001e48:	080053d8 	.word	0x080053d8
 8001e4c:	cccccccd 	.word	0xcccccccd

08001e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	; 0x50
 8001e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e5a:	2228      	movs	r2, #40	; 0x28
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f002 fc6a 	bl	8004738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e80:	2301      	movs	r3, #1
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e92:	2302      	movs	r3, #2
 8001e94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001e9c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f001 fa94 	bl	80033d4 <HAL_RCC_OscConfig>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001eb2:	f000 f828 	bl	8001f06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb6:	230f      	movs	r3, #15
 8001eb8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fd00 	bl	80038d8 <HAL_RCC_ClockConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ede:	f000 f812 	bl	8001f06 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fe80 	bl	8003bf4 <HAL_RCCEx_PeriphCLKConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001efa:	f000 f804 	bl	8001f06 <Error_Handler>
  }
}
 8001efe:	bf00      	nop
 8001f00:	3750      	adds	r7, #80	; 0x50
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0a:	b672      	cpsid	i
}
 8001f0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <Error_Handler+0x8>

08001f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6193      	str	r3, [r2, #24]
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <HAL_MspInit+0x5c>)
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_MspInit+0x60>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <HAL_MspInit+0x60>)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fba:	f000 f9b7 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Channel5_IRQHandler+0x10>)
 8001fca:	f000 ff19 	bl	8002e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000600 	.word	0x20000600

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f002 fb9e 	bl	8004748 <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20005000 	.word	0x20005000
 8002038:	00000400 	.word	0x00000400
 800203c:	2000056c 	.word	0x2000056c
 8002040:	20000790 	.word	0x20000790

08002044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002056:	4a12      	ldr	r2, [pc, #72]	; (80020a0 <MX_USART1_UART_Init+0x50>)
 8002058:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <MX_USART1_UART_Init+0x4c>)
 800205c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002060:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_USART1_UART_Init+0x4c>)
 800206a:	2200      	movs	r2, #0
 800206c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800206e:	4b0b      	ldr	r3, [pc, #44]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002076:	220c      	movs	r2, #12
 8002078:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207a:	4b08      	ldr	r3, [pc, #32]	; (800209c <MX_USART1_UART_Init+0x4c>)
 800207c:	2200      	movs	r2, #0
 800207e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002082:	2200      	movs	r2, #0
 8002084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002086:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_USART1_UART_Init+0x4c>)
 8002088:	f001 fe6a 	bl	8003d60 <HAL_UART_Init>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002092:	f7ff ff38 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000570 	.word	0x20000570
 80020a0:	40013800 	.word	0x40013800

080020a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <MX_USART2_UART_Init+0x50>)
 80020ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020ca:	220c      	movs	r2, #12
 80020cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_USART2_UART_Init+0x4c>)
 80020dc:	f001 fe40 	bl	8003d60 <HAL_UART_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020e6:	f7ff ff0e 	bl	8001f06 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200005b8 	.word	0x200005b8
 80020f4:	40004400 	.word	0x40004400

080020f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0318 	add.w	r3, r7, #24
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a4a      	ldr	r2, [pc, #296]	; (800223c <HAL_UART_MspInit+0x144>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d158      	bne.n	80021ca <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002118:	4b49      	ldr	r3, [pc, #292]	; (8002240 <HAL_UART_MspInit+0x148>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a48      	ldr	r2, [pc, #288]	; (8002240 <HAL_UART_MspInit+0x148>)
 800211e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b46      	ldr	r3, [pc, #280]	; (8002240 <HAL_UART_MspInit+0x148>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_UART_MspInit+0x148>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_UART_MspInit+0x148>)
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b40      	ldr	r3, [pc, #256]	; (8002240 <HAL_UART_MspInit+0x148>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002148:	f44f 7300 	mov.w	r3, #512	; 0x200
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214e:	2302      	movs	r3, #2
 8002150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0318 	add.w	r3, r7, #24
 800215a:	4619      	mov	r1, r3
 800215c:	4839      	ldr	r0, [pc, #228]	; (8002244 <HAL_UART_MspInit+0x14c>)
 800215e:	f000 ff83 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	4619      	mov	r1, r3
 8002176:	4833      	ldr	r0, [pc, #204]	; (8002244 <HAL_UART_MspInit+0x14c>)
 8002178:	f000 ff76 	bl	8003068 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800217c:	4b32      	ldr	r3, [pc, #200]	; (8002248 <HAL_UART_MspInit+0x150>)
 800217e:	4a33      	ldr	r2, [pc, #204]	; (800224c <HAL_UART_MspInit+0x154>)
 8002180:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002182:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_UART_MspInit+0x150>)
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002188:	4b2f      	ldr	r3, [pc, #188]	; (8002248 <HAL_UART_MspInit+0x150>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800218e:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <HAL_UART_MspInit+0x150>)
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <HAL_UART_MspInit+0x150>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800219a:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_UART_MspInit+0x150>)
 800219c:	2200      	movs	r2, #0
 800219e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80021a0:	4b29      	ldr	r3, [pc, #164]	; (8002248 <HAL_UART_MspInit+0x150>)
 80021a2:	2220      	movs	r2, #32
 80021a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021a6:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_UART_MspInit+0x150>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021ac:	4826      	ldr	r0, [pc, #152]	; (8002248 <HAL_UART_MspInit+0x150>)
 80021ae:	f000 fd31 	bl	8002c14 <HAL_DMA_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80021b8:	f7ff fea5 	bl	8001f06 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a22      	ldr	r2, [pc, #136]	; (8002248 <HAL_UART_MspInit+0x150>)
 80021c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80021c2:	4a21      	ldr	r2, [pc, #132]	; (8002248 <HAL_UART_MspInit+0x150>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021c8:	e034      	b.n	8002234 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a20      	ldr	r2, [pc, #128]	; (8002250 <HAL_UART_MspInit+0x158>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d12f      	bne.n	8002234 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_UART_MspInit+0x148>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <HAL_UART_MspInit+0x148>)
 80021da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021de:	61d3      	str	r3, [r2, #28]
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <HAL_UART_MspInit+0x148>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <HAL_UART_MspInit+0x148>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_UART_MspInit+0x148>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <HAL_UART_MspInit+0x148>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002204:	2304      	movs	r3, #4
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800220c:	2303      	movs	r3, #3
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0318 	add.w	r3, r7, #24
 8002214:	4619      	mov	r1, r3
 8002216:	480b      	ldr	r0, [pc, #44]	; (8002244 <HAL_UART_MspInit+0x14c>)
 8002218:	f000 ff26 	bl	8003068 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800221c:	2308      	movs	r3, #8
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	4619      	mov	r1, r3
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <HAL_UART_MspInit+0x14c>)
 8002230:	f000 ff1a 	bl	8003068 <HAL_GPIO_Init>
}
 8002234:	bf00      	nop
 8002236:	3728      	adds	r7, #40	; 0x28
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40013800 	.word	0x40013800
 8002240:	40021000 	.word	0x40021000
 8002244:	40010800 	.word	0x40010800
 8002248:	20000600 	.word	0x20000600
 800224c:	40020058 	.word	0x40020058
 8002250:	40004400 	.word	0x40004400

08002254 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002254:	f7ff fef6 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480b      	ldr	r0, [pc, #44]	; (8002288 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800225a:	490c      	ldr	r1, [pc, #48]	; (800228c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800225c:	4a0c      	ldr	r2, [pc, #48]	; (8002290 <LoopFillZerobss+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a09      	ldr	r2, [pc, #36]	; (8002294 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002270:	4c09      	ldr	r4, [pc, #36]	; (8002298 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800227e:	f002 fa69 	bl	8004754 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002282:	f7ff fd63 	bl	8001d4c <main>
  bx lr
 8002286:	4770      	bx	lr
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002290:	08005648 	.word	0x08005648
  ldr r2, =_sbss
 8002294:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002298:	20000790 	.word	0x20000790

0800229c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC1_2_IRQHandler>
	...

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_Init+0x28>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_Init+0x28>)
 80022aa:	f043 0310 	orr.w	r3, r3, #16
 80022ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 fc6d 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	200f      	movs	r0, #15
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff fe28 	bl	8001f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fc85 	bl	8002bfa <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f000 fc4d 	bl	8002ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000004 	.word	0x20000004
 8002324:	2000000c 	.word	0x2000000c
 8002328:	20000008 	.word	0x20000008

0800232c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_IncTick+0x1c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x20>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <HAL_IncTick+0x20>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr
 8002348:	2000000c 	.word	0x2000000c
 800234c:	20000644 	.word	0x20000644

08002350 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return uwTick;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_GetTick+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000644 	.word	0x20000644

08002364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800236c:	f7ff fff0 	bl	8002350 <HAL_GetTick>
 8002370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237c:	d005      	beq.n	800238a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <HAL_Delay+0x44>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4413      	add	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238a:	bf00      	nop
 800238c:	f7ff ffe0 	bl	8002350 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	429a      	cmp	r2, r3
 800239a:	d8f7      	bhi.n	800238c <HAL_Delay+0x28>
  {
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	2000000c 	.word	0x2000000c

080023ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0be      	b.n	800254c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe f9fc 	bl	80007e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fabf 	bl	8002974 <ADC_ConversionStop_Disable>
 80023f6:	4603      	mov	r3, r0
 80023f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 8099 	bne.w	800253a <HAL_ADC_Init+0x18e>
 8002408:	7dfb      	ldrb	r3, [r7, #23]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 8095 	bne.w	800253a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002418:	f023 0302 	bic.w	r3, r3, #2
 800241c:	f043 0202 	orr.w	r2, r3, #2
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800242c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7b1b      	ldrb	r3, [r3, #12]
 8002432:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002434:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	4313      	orrs	r3, r2
 800243a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002444:	d003      	beq.n	800244e <HAL_ADC_Init+0xa2>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d102      	bne.n	8002454 <HAL_ADC_Init+0xa8>
 800244e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002452:	e000      	b.n	8002456 <HAL_ADC_Init+0xaa>
 8002454:	2300      	movs	r3, #0
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7d1b      	ldrb	r3, [r3, #20]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d119      	bne.n	8002498 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7b1b      	ldrb	r3, [r3, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	3b01      	subs	r3, #1
 8002472:	035a      	lsls	r2, r3, #13
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e00b      	b.n	8002498 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002484:	f043 0220 	orr.w	r2, r3, #32
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <HAL_ADC_Init+0x1a8>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6812      	ldr	r2, [r2, #0]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c8:	d003      	beq.n	80024d2 <HAL_ADC_Init+0x126>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d104      	bne.n	80024dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	051b      	lsls	r3, r3, #20
 80024da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_ADC_Init+0x1ac>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d10b      	bne.n	8002518 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	f043 0201 	orr.w	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002516:	e018      	b.n	800254a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	f023 0312 	bic.w	r3, r3, #18
 8002520:	f043 0210 	orr.w	r2, r3, #16
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002538:	e007      	b.n	800254a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	f043 0210 	orr.w	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800254a:	7dfb      	ldrb	r3, [r7, #23]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	ffe1f7fd 	.word	0xffe1f7fd
 8002558:	ff1f0efe 	.word	0xff1f0efe

0800255c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADC_Start+0x1a>
 8002572:	2302      	movs	r3, #2
 8002574:	e098      	b.n	80026a8 <HAL_ADC_Start+0x14c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f99e 	bl	80028c0 <ADC_Enable>
 8002584:	4603      	mov	r3, r0
 8002586:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	f040 8087 	bne.w	800269e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002598:	f023 0301 	bic.w	r3, r3, #1
 800259c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a41      	ldr	r2, [pc, #260]	; (80026b0 <HAL_ADC_Start+0x154>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d105      	bne.n	80025ba <HAL_ADC_Start+0x5e>
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_ADC_Start+0x158>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d026      	beq.n	8002622 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025e4:	e01d      	b.n	8002622 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a2f      	ldr	r2, [pc, #188]	; (80026b4 <HAL_ADC_Start+0x158>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d004      	beq.n	8002606 <HAL_ADC_Start+0xaa>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <HAL_ADC_Start+0x154>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10d      	bne.n	8002622 <HAL_ADC_Start+0xc6>
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_ADC_Start+0x158>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800261a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d006      	beq.n	800263c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	f023 0206 	bic.w	r2, r3, #6
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c
 800263a:	e002      	b.n	8002642 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f06f 0202 	mvn.w	r2, #2
 8002652:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800265e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002662:	d113      	bne.n	800268c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002668:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <HAL_ADC_Start+0x154>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d105      	bne.n	800267a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800266e:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <HAL_ADC_Start+0x158>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002688:	609a      	str	r2, [r3, #8]
 800268a:	e00c      	b.n	80026a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	e003      	b.n	80026a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40012800 	.word	0x40012800
 80026b4:	40012400 	.word	0x40012400

080026b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x20>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e0dc      	b.n	80028aa <HAL_ADC_ConfigChannel+0x1da>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d81c      	bhi.n	800273a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b05      	subs	r3, #5
 8002712:	221f      	movs	r2, #31
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	4019      	ands	r1, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	3b05      	subs	r3, #5
 800272c:	fa00 f203 	lsl.w	r2, r0, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	430a      	orrs	r2, r1
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
 8002738:	e03c      	b.n	80027b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d81c      	bhi.n	800277c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	3b23      	subs	r3, #35	; 0x23
 8002754:	221f      	movs	r2, #31
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	4019      	ands	r1, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	3b23      	subs	r3, #35	; 0x23
 800276e:	fa00 f203 	lsl.w	r2, r0, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
 800277a:	e01b      	b.n	80027b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b41      	subs	r3, #65	; 0x41
 800278e:	221f      	movs	r2, #31
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	4019      	ands	r1, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	3b41      	subs	r3, #65	; 0x41
 80027a8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b09      	cmp	r3, #9
 80027ba:	d91c      	bls.n	80027f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68d9      	ldr	r1, [r3, #12]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	3b1e      	subs	r3, #30
 80027ce:	2207      	movs	r2, #7
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4019      	ands	r1, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6898      	ldr	r0, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	3b1e      	subs	r3, #30
 80027e8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	e019      	b.n	800282a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6919      	ldr	r1, [r3, #16]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	2207      	movs	r2, #7
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	4019      	ands	r1, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6898      	ldr	r0, [r3, #8]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	fa00 f203 	lsl.w	r2, r0, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b10      	cmp	r3, #16
 8002830:	d003      	beq.n	800283a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002836:	2b11      	cmp	r3, #17
 8002838:	d132      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1d      	ldr	r2, [pc, #116]	; (80028b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d125      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d126      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002860:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b10      	cmp	r3, #16
 8002868:	d11a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <HAL_ADC_ConfigChannel+0x1ec>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	0c9a      	lsrs	r2, r3, #18
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002880:	e002      	b.n	8002888 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3b01      	subs	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1f9      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x1b2>
 800288e:	e007      	b.n	80028a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40012400 	.word	0x40012400
 80028b8:	20000004 	.word	0x20000004
 80028bc:	431bde83 	.word	0x431bde83

080028c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d040      	beq.n	8002960 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028ee:	4b1f      	ldr	r3, [pc, #124]	; (800296c <ADC_Enable+0xac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <ADC_Enable+0xb0>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	0c9b      	lsrs	r3, r3, #18
 80028fa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028fc:	e002      	b.n	8002904 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3b01      	subs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800290a:	f7ff fd21 	bl	8002350 <HAL_GetTick>
 800290e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002910:	e01f      	b.n	8002952 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002912:	f7ff fd1d 	bl	8002350 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d918      	bls.n	8002952 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d011      	beq.n	8002952 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f043 0210 	orr.w	r2, r3, #16
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e007      	b.n	8002962 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d1d8      	bne.n	8002912 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20000004 	.word	0x20000004
 8002970:	431bde83 	.word	0x431bde83

08002974 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b01      	cmp	r3, #1
 800298c:	d12e      	bne.n	80029ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800299e:	f7ff fcd7 	bl	8002350 <HAL_GetTick>
 80029a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029a4:	e01b      	b.n	80029de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029a6:	f7ff fcd3 	bl	8002350 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d914      	bls.n	80029de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d10d      	bne.n	80029de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	f043 0210 	orr.w	r2, r3, #16
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e007      	b.n	80029ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d0dc      	beq.n	80029a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a2a:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	60d3      	str	r3, [r2, #12]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4906      	ldr	r1, [pc, #24]	; (8002a90 <__NVIC_EnableIRQ+0x34>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	e000e100 	.word	0xe000e100

08002a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	6039      	str	r1, [r7, #0]
 8002a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	db0a      	blt.n	8002abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	490c      	ldr	r1, [pc, #48]	; (8002ae0 <__NVIC_SetPriority+0x4c>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	0112      	lsls	r2, r2, #4
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002abc:	e00a      	b.n	8002ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4908      	ldr	r1, [pc, #32]	; (8002ae4 <__NVIC_SetPriority+0x50>)
 8002ac4:	79fb      	ldrb	r3, [r7, #7]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	3b04      	subs	r3, #4
 8002acc:	0112      	lsls	r2, r2, #4
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	761a      	strb	r2, [r3, #24]
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	e000e100 	.word	0xe000e100
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f1c3 0307 	rsb	r3, r3, #7
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	bf28      	it	cs
 8002b06:	2304      	movcs	r3, #4
 8002b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	2b06      	cmp	r3, #6
 8002b10:	d902      	bls.n	8002b18 <NVIC_EncodePriority+0x30>
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	3b03      	subs	r3, #3
 8002b16:	e000      	b.n	8002b1a <NVIC_EncodePriority+0x32>
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43da      	mvns	r2, r3
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b30:	f04f 31ff 	mov.w	r1, #4294967295
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	43d9      	mvns	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	4313      	orrs	r3, r2
         );
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3724      	adds	r7, #36	; 0x24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <SysTick_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f7ff ff90 	bl	8002a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <SysTick_Config+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <SysTick_Config+0x40>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff2d 	bl	80029f8 <__NVIC_SetPriorityGrouping>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb8:	f7ff ff42 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	6978      	ldr	r0, [r7, #20]
 8002bc4:	f7ff ff90 	bl	8002ae8 <NVIC_EncodePriority>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bce:	4611      	mov	r1, r2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff5f 	bl	8002a94 <__NVIC_SetPriority>
}
 8002bd6:	bf00      	nop
 8002bd8:	3718      	adds	r7, #24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff35 	bl	8002a5c <__NVIC_EnableIRQ>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ffa2 	bl	8002b4c <SysTick_Config>
 8002c08:	4603      	mov	r3, r0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e043      	b.n	8002cb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_DMA_Init+0xa8>)
 8002c32:	4413      	add	r3, r2
 8002c34:	4a22      	ldr	r2, [pc, #136]	; (8002cc0 <HAL_DMA_Init+0xac>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	009a      	lsls	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <HAL_DMA_Init+0xb0>)
 8002c46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	bffdfff8 	.word	0xbffdfff8
 8002cc0:	cccccccd 	.word	0xcccccccd
 8002cc4:	40020000 	.word	0x40020000

08002cc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_DMA_Start_IT+0x20>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e04b      	b.n	8002d80 <HAL_DMA_Start_IT+0xb8>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d13a      	bne.n	8002d72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0201 	bic.w	r2, r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f973 	bl	800300c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d008      	beq.n	8002d40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 020e 	orr.w	r2, r2, #14
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e00f      	b.n	8002d60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0204 	bic.w	r2, r2, #4
 8002d4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 020a 	orr.w	r2, r2, #10
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e005      	b.n	8002d7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d008      	beq.n	8002db2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2204      	movs	r2, #4
 8002da4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e020      	b.n	8002df4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 020e 	bic.w	r2, r2, #14
 8002dc0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr
	...

08002e00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d04f      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0xc8>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 0304 	and.w	r3, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d04a      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d107      	bne.n	8002e50 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0204 	bic.w	r2, r2, #4
 8002e4e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a66      	ldr	r2, [pc, #408]	; (8002ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d029      	beq.n	8002eae <HAL_DMA_IRQHandler+0xae>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a65      	ldr	r2, [pc, #404]	; (8002ff4 <HAL_DMA_IRQHandler+0x1f4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d022      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xaa>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a63      	ldr	r2, [pc, #396]	; (8002ff8 <HAL_DMA_IRQHandler+0x1f8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01a      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xa4>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a62      	ldr	r2, [pc, #392]	; (8002ffc <HAL_DMA_IRQHandler+0x1fc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d012      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x9e>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a60      	ldr	r2, [pc, #384]	; (8003000 <HAL_DMA_IRQHandler+0x200>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00a      	beq.n	8002e98 <HAL_DMA_IRQHandler+0x98>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a5f      	ldr	r2, [pc, #380]	; (8003004 <HAL_DMA_IRQHandler+0x204>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d102      	bne.n	8002e92 <HAL_DMA_IRQHandler+0x92>
 8002e8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e90:	e00e      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xb0>
 8002e92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e96:	e00b      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xb0>
 8002e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e9c:	e008      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xb0>
 8002e9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ea2:	e005      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xb0>
 8002ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea8:	e002      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xb0>
 8002eaa:	2340      	movs	r3, #64	; 0x40
 8002eac:	e000      	b.n	8002eb0 <HAL_DMA_IRQHandler+0xb0>
 8002eae:	2304      	movs	r3, #4
 8002eb0:	4a55      	ldr	r2, [pc, #340]	; (8003008 <HAL_DMA_IRQHandler+0x208>)
 8002eb2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8094 	beq.w	8002fe6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ec6:	e08e      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2202      	movs	r2, #2
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d056      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x186>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d051      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10b      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020a 	bic.w	r2, r2, #10
 8002efe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d029      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x166>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a37      	ldr	r2, [pc, #220]	; (8002ff4 <HAL_DMA_IRQHandler+0x1f4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d022      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x162>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a35      	ldr	r2, [pc, #212]	; (8002ff8 <HAL_DMA_IRQHandler+0x1f8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01a      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x15c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a34      	ldr	r2, [pc, #208]	; (8002ffc <HAL_DMA_IRQHandler+0x1fc>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d012      	beq.n	8002f56 <HAL_DMA_IRQHandler+0x156>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a32      	ldr	r2, [pc, #200]	; (8003000 <HAL_DMA_IRQHandler+0x200>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00a      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x150>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a31      	ldr	r2, [pc, #196]	; (8003004 <HAL_DMA_IRQHandler+0x204>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d102      	bne.n	8002f4a <HAL_DMA_IRQHandler+0x14a>
 8002f44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f48:	e00e      	b.n	8002f68 <HAL_DMA_IRQHandler+0x168>
 8002f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f4e:	e00b      	b.n	8002f68 <HAL_DMA_IRQHandler+0x168>
 8002f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f54:	e008      	b.n	8002f68 <HAL_DMA_IRQHandler+0x168>
 8002f56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f5a:	e005      	b.n	8002f68 <HAL_DMA_IRQHandler+0x168>
 8002f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f60:	e002      	b.n	8002f68 <HAL_DMA_IRQHandler+0x168>
 8002f62:	2320      	movs	r3, #32
 8002f64:	e000      	b.n	8002f68 <HAL_DMA_IRQHandler+0x168>
 8002f66:	2302      	movs	r3, #2
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <HAL_DMA_IRQHandler+0x208>)
 8002f6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d034      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f84:	e02f      	b.n	8002fe6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d028      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x1e8>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d023      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 020e 	bic.w	r2, r2, #14
 8002fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	2101      	movs	r1, #1
 8002fba:	fa01 f202 	lsl.w	r2, r1, r2
 8002fbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d004      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4798      	blx	r3
    }
  }
  return;
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
}
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40020008 	.word	0x40020008
 8002ff4:	4002001c 	.word	0x4002001c
 8002ff8:	40020030 	.word	0x40020030
 8002ffc:	40020044 	.word	0x40020044
 8003000:	40020058 	.word	0x40020058
 8003004:	4002006c 	.word	0x4002006c
 8003008:	40020000 	.word	0x40020000

0800300c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b10      	cmp	r3, #16
 8003038:	d108      	bne.n	800304c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800304a:	e007      	b.n	800305c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]
}
 800305c:	bf00      	nop
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr
	...

08003068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003068:	b480      	push	{r7}
 800306a:	b08b      	sub	sp, #44	; 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307a:	e169      	b.n	8003350 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800307c:	2201      	movs	r2, #1
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	4013      	ands	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	429a      	cmp	r2, r3
 8003096:	f040 8158 	bne.w	800334a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a9a      	ldr	r2, [pc, #616]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d05e      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030a4:	4a98      	ldr	r2, [pc, #608]	; (8003308 <HAL_GPIO_Init+0x2a0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d875      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030aa:	4a98      	ldr	r2, [pc, #608]	; (800330c <HAL_GPIO_Init+0x2a4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d058      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030b0:	4a96      	ldr	r2, [pc, #600]	; (800330c <HAL_GPIO_Init+0x2a4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d86f      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030b6:	4a96      	ldr	r2, [pc, #600]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d052      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030bc:	4a94      	ldr	r2, [pc, #592]	; (8003310 <HAL_GPIO_Init+0x2a8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d869      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030c2:	4a94      	ldr	r2, [pc, #592]	; (8003314 <HAL_GPIO_Init+0x2ac>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d04c      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030c8:	4a92      	ldr	r2, [pc, #584]	; (8003314 <HAL_GPIO_Init+0x2ac>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d863      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030ce:	4a92      	ldr	r2, [pc, #584]	; (8003318 <HAL_GPIO_Init+0x2b0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d046      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
 80030d4:	4a90      	ldr	r2, [pc, #576]	; (8003318 <HAL_GPIO_Init+0x2b0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d85d      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030da:	2b12      	cmp	r3, #18
 80030dc:	d82a      	bhi.n	8003134 <HAL_GPIO_Init+0xcc>
 80030de:	2b12      	cmp	r3, #18
 80030e0:	d859      	bhi.n	8003196 <HAL_GPIO_Init+0x12e>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_GPIO_Init+0x80>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	08003163 	.word	0x08003163
 80030ec:	0800313d 	.word	0x0800313d
 80030f0:	0800314f 	.word	0x0800314f
 80030f4:	08003191 	.word	0x08003191
 80030f8:	08003197 	.word	0x08003197
 80030fc:	08003197 	.word	0x08003197
 8003100:	08003197 	.word	0x08003197
 8003104:	08003197 	.word	0x08003197
 8003108:	08003197 	.word	0x08003197
 800310c:	08003197 	.word	0x08003197
 8003110:	08003197 	.word	0x08003197
 8003114:	08003197 	.word	0x08003197
 8003118:	08003197 	.word	0x08003197
 800311c:	08003197 	.word	0x08003197
 8003120:	08003197 	.word	0x08003197
 8003124:	08003197 	.word	0x08003197
 8003128:	08003197 	.word	0x08003197
 800312c:	08003145 	.word	0x08003145
 8003130:	08003159 	.word	0x08003159
 8003134:	4a79      	ldr	r2, [pc, #484]	; (800331c <HAL_GPIO_Init+0x2b4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800313a:	e02c      	b.n	8003196 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	623b      	str	r3, [r7, #32]
          break;
 8003142:	e029      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	3304      	adds	r3, #4
 800314a:	623b      	str	r3, [r7, #32]
          break;
 800314c:	e024      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	3308      	adds	r3, #8
 8003154:	623b      	str	r3, [r7, #32]
          break;
 8003156:	e01f      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	330c      	adds	r3, #12
 800315e:	623b      	str	r3, [r7, #32]
          break;
 8003160:	e01a      	b.n	8003198 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800316a:	2304      	movs	r3, #4
 800316c:	623b      	str	r3, [r7, #32]
          break;
 800316e:	e013      	b.n	8003198 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d105      	bne.n	8003184 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003178:	2308      	movs	r3, #8
 800317a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	611a      	str	r2, [r3, #16]
          break;
 8003182:	e009      	b.n	8003198 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003184:	2308      	movs	r3, #8
 8003186:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	69fa      	ldr	r2, [r7, #28]
 800318c:	615a      	str	r2, [r3, #20]
          break;
 800318e:	e003      	b.n	8003198 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
          break;
 8003194:	e000      	b.n	8003198 <HAL_GPIO_Init+0x130>
          break;
 8003196:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	2bff      	cmp	r3, #255	; 0xff
 800319c:	d801      	bhi.n	80031a2 <HAL_GPIO_Init+0x13a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	e001      	b.n	80031a6 <HAL_GPIO_Init+0x13e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2bff      	cmp	r3, #255	; 0xff
 80031ac:	d802      	bhi.n	80031b4 <HAL_GPIO_Init+0x14c>
 80031ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	e002      	b.n	80031ba <HAL_GPIO_Init+0x152>
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	3b08      	subs	r3, #8
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	210f      	movs	r1, #15
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	401a      	ands	r2, r3
 80031cc:	6a39      	ldr	r1, [r7, #32]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	431a      	orrs	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 80b1 	beq.w	800334a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031e8:	4b4d      	ldr	r3, [pc, #308]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6193      	str	r3, [r2, #24]
 80031f4:	4b4a      	ldr	r3, [pc, #296]	; (8003320 <HAL_GPIO_Init+0x2b8>)
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003200:	4a48      	ldr	r2, [pc, #288]	; (8003324 <HAL_GPIO_Init+0x2bc>)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	089b      	lsrs	r3, r3, #2
 8003206:	3302      	adds	r3, #2
 8003208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	220f      	movs	r2, #15
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4013      	ands	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a40      	ldr	r2, [pc, #256]	; (8003328 <HAL_GPIO_Init+0x2c0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d013      	beq.n	8003254 <HAL_GPIO_Init+0x1ec>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a3f      	ldr	r2, [pc, #252]	; (800332c <HAL_GPIO_Init+0x2c4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d00d      	beq.n	8003250 <HAL_GPIO_Init+0x1e8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a3e      	ldr	r2, [pc, #248]	; (8003330 <HAL_GPIO_Init+0x2c8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d007      	beq.n	800324c <HAL_GPIO_Init+0x1e4>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a3d      	ldr	r2, [pc, #244]	; (8003334 <HAL_GPIO_Init+0x2cc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d101      	bne.n	8003248 <HAL_GPIO_Init+0x1e0>
 8003244:	2303      	movs	r3, #3
 8003246:	e006      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003248:	2304      	movs	r3, #4
 800324a:	e004      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 800324c:	2302      	movs	r3, #2
 800324e:	e002      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_GPIO_Init+0x1ee>
 8003254:	2300      	movs	r3, #0
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	f002 0203 	and.w	r2, r2, #3
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	4093      	lsls	r3, r2
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003266:	492f      	ldr	r1, [pc, #188]	; (8003324 <HAL_GPIO_Init+0x2bc>)
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	3302      	adds	r3, #2
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d006      	beq.n	800328e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003280:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	492c      	ldr	r1, [pc, #176]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]
 800328c:	e006      	b.n	800329c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	43db      	mvns	r3, r3
 8003296:	4928      	ldr	r1, [pc, #160]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 8003298:	4013      	ands	r3, r2
 800329a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032a8:	4b23      	ldr	r3, [pc, #140]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	4922      	ldr	r1, [pc, #136]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60cb      	str	r3, [r1, #12]
 80032b4:	e006      	b.n	80032c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80032b6:	4b20      	ldr	r3, [pc, #128]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032b8:	68da      	ldr	r2, [r3, #12]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	43db      	mvns	r3, r3
 80032be:	491e      	ldr	r1, [pc, #120]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	4918      	ldr	r1, [pc, #96]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4313      	orrs	r3, r2
 80032da:	604b      	str	r3, [r1, #4]
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	4914      	ldr	r1, [pc, #80]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d021      	beq.n	800333c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032f8:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	490e      	ldr	r1, [pc, #56]	; (8003338 <HAL_GPIO_Init+0x2d0>)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
 8003304:	e021      	b.n	800334a <HAL_GPIO_Init+0x2e2>
 8003306:	bf00      	nop
 8003308:	10320000 	.word	0x10320000
 800330c:	10310000 	.word	0x10310000
 8003310:	10220000 	.word	0x10220000
 8003314:	10210000 	.word	0x10210000
 8003318:	10120000 	.word	0x10120000
 800331c:	10110000 	.word	0x10110000
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000
 8003328:	40010800 	.word	0x40010800
 800332c:	40010c00 	.word	0x40010c00
 8003330:	40011000 	.word	0x40011000
 8003334:	40011400 	.word	0x40011400
 8003338:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_GPIO_Init+0x304>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	43db      	mvns	r3, r3
 8003344:	4909      	ldr	r1, [pc, #36]	; (800336c <HAL_GPIO_Init+0x304>)
 8003346:	4013      	ands	r3, r2
 8003348:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	3301      	adds	r3, #1
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	f47f ae8e 	bne.w	800307c <HAL_GPIO_Init+0x14>
  }
}
 8003360:	bf00      	nop
 8003362:	bf00      	nop
 8003364:	372c      	adds	r7, #44	; 0x2c
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40010400 	.word	0x40010400

08003370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
 800337c:	4613      	mov	r3, r2
 800337e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003380:	787b      	ldrb	r3, [r7, #1]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003386:	887a      	ldrh	r2, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800338c:	e003      	b.n	8003396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800338e:	887b      	ldrh	r3, [r7, #2]
 8003390:	041a      	lsls	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033b2:	887a      	ldrh	r2, [r7, #2]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4013      	ands	r3, r2
 80033b8:	041a      	lsls	r2, r3, #16
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43d9      	mvns	r1, r3
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	400b      	ands	r3, r1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	611a      	str	r2, [r3, #16]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e272      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 8087 	beq.w	8003502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f4:	4b92      	ldr	r3, [pc, #584]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 030c 	and.w	r3, r3, #12
 80033fc:	2b04      	cmp	r3, #4
 80033fe:	d00c      	beq.n	800341a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003400:	4b8f      	ldr	r3, [pc, #572]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b08      	cmp	r3, #8
 800340a:	d112      	bne.n	8003432 <HAL_RCC_OscConfig+0x5e>
 800340c:	4b8c      	ldr	r3, [pc, #560]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d10b      	bne.n	8003432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341a:	4b89      	ldr	r3, [pc, #548]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d06c      	beq.n	8003500 <HAL_RCC_OscConfig+0x12c>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d168      	bne.n	8003500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e24c      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343a:	d106      	bne.n	800344a <HAL_RCC_OscConfig+0x76>
 800343c:	4b80      	ldr	r3, [pc, #512]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a7f      	ldr	r2, [pc, #508]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	e02e      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0x98>
 8003452:	4b7b      	ldr	r3, [pc, #492]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7a      	ldr	r2, [pc, #488]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b78      	ldr	r3, [pc, #480]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a77      	ldr	r2, [pc, #476]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0xbc>
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a71      	ldr	r2, [pc, #452]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6e      	ldr	r2, [pc, #440]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xd4>
 8003490:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a6a      	ldr	r2, [pc, #424]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a67      	ldr	r2, [pc, #412]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe ff4e 	bl	8002350 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe ff4a 	bl	8002350 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e200      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b5d      	ldr	r3, [pc, #372]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xe4>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe ff3a 	bl	8002350 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fe ff36 	bl	8002350 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1ec      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0x10c>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d063      	beq.n	80035d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800350e:	4b4c      	ldr	r3, [pc, #304]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800351a:	4b49      	ldr	r3, [pc, #292]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11c      	bne.n	8003560 <HAL_RCC_OscConfig+0x18c>
 8003526:	4b46      	ldr	r3, [pc, #280]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	4b43      	ldr	r3, [pc, #268]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_RCC_OscConfig+0x176>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e1c0      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b3d      	ldr	r3, [pc, #244]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4939      	ldr	r1, [pc, #228]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	e03a      	b.n	80035d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003568:	4b36      	ldr	r3, [pc, #216]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe feef 	bl	8002350 <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003576:	f7fe feeb 	bl	8002350 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e1a1      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4927      	ldr	r1, [pc, #156]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b26      	ldr	r3, [pc, #152]	; (8003644 <HAL_RCC_OscConfig+0x270>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fece 	bl	8002350 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe feca 	bl	8002350 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e180      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d03a      	beq.n	8003658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b17      	ldr	r3, [pc, #92]	; (8003648 <HAL_RCC_OscConfig+0x274>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f0:	f7fe feae 	bl	8002350 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fe feaa 	bl	8002350 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e160      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <HAL_RCC_OscConfig+0x26c>)
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003616:	2001      	movs	r0, #1
 8003618:	f000 face 	bl	8003bb8 <RCC_Delay>
 800361c:	e01c      	b.n	8003658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361e:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_RCC_OscConfig+0x274>)
 8003620:	2200      	movs	r2, #0
 8003622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003624:	f7fe fe94 	bl	8002350 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362a:	e00f      	b.n	800364c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362c:	f7fe fe90 	bl	8002350 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d908      	bls.n	800364c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e146      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	42420000 	.word	0x42420000
 8003648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	4b92      	ldr	r3, [pc, #584]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800364e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e9      	bne.n	800362c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a6 	beq.w	80037b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b8b      	ldr	r3, [pc, #556]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10d      	bne.n	8003692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b88      	ldr	r3, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	4a87      	ldr	r2, [pc, #540]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003680:	61d3      	str	r3, [r2, #28]
 8003682:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003692:	4b82      	ldr	r3, [pc, #520]	; (800389c <HAL_RCC_OscConfig+0x4c8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369e:	4b7f      	ldr	r3, [pc, #508]	; (800389c <HAL_RCC_OscConfig+0x4c8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7e      	ldr	r2, [pc, #504]	; (800389c <HAL_RCC_OscConfig+0x4c8>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fe fe51 	bl	8002350 <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fe fe4d 	bl	8002350 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e103      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	4b75      	ldr	r3, [pc, #468]	; (800389c <HAL_RCC_OscConfig+0x4c8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x312>
 80036d8:	4b6f      	ldr	r3, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	4a6e      	ldr	r2, [pc, #440]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6213      	str	r3, [r2, #32]
 80036e4:	e02d      	b.n	8003742 <HAL_RCC_OscConfig+0x36e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0x334>
 80036ee:	4b6a      	ldr	r3, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a69      	ldr	r2, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6213      	str	r3, [r2, #32]
 80036fa:	4b67      	ldr	r3, [pc, #412]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a66      	ldr	r2, [pc, #408]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	e01c      	b.n	8003742 <HAL_RCC_OscConfig+0x36e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x356>
 8003710:	4b61      	ldr	r3, [pc, #388]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	4a60      	ldr	r2, [pc, #384]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6213      	str	r3, [r2, #32]
 800371c:	4b5e      	ldr	r3, [pc, #376]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	4a5d      	ldr	r2, [pc, #372]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6213      	str	r3, [r2, #32]
 8003728:	e00b      	b.n	8003742 <HAL_RCC_OscConfig+0x36e>
 800372a:	4b5b      	ldr	r3, [pc, #364]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	4a5a      	ldr	r2, [pc, #360]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6213      	str	r3, [r2, #32]
 8003736:	4b58      	ldr	r3, [pc, #352]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	4a57      	ldr	r2, [pc, #348]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374a:	f7fe fe01 	bl	8002350 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe fdfd 	bl	8002350 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0b1      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	4b4b      	ldr	r3, [pc, #300]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <HAL_RCC_OscConfig+0x37e>
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fe fdeb 	bl	8002350 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe fde7 	bl	8002350 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e09b      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	4b40      	ldr	r3, [pc, #256]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ee      	bne.n	800377e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b3c      	ldr	r3, [pc, #240]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	4a3b      	ldr	r2, [pc, #236]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8087 	beq.w	80038ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037bc:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d061      	beq.n	800388c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d146      	bne.n	800385e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe fdbb 	bl	8002350 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe fdb7 	bl	8002350 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e06d      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f0:	4b29      	ldr	r3, [pc, #164]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003804:	d108      	bne.n	8003818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003806:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4921      	ldr	r1, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003818:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a19      	ldr	r1, [r3, #32]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003828:	430b      	orrs	r3, r1
 800382a:	491b      	ldr	r1, [pc, #108]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe fd8b 	bl	8002350 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383e:	f7fe fd87 	bl	8002350 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e03d      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x46a>
 800385c:	e035      	b.n	80038ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fe fd74 	bl	8002350 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe fd70 	bl	8002350 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e026      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_OscConfig+0x4c4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x498>
 800388a:	e01e      	b.n	80038ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d107      	bne.n	80038a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e019      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
 8003898:	40021000 	.word	0x40021000
 800389c:	40007000 	.word	0x40007000
 80038a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a4:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <HAL_RCC_OscConfig+0x500>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40021000 	.word	0x40021000

080038d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0d0      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b6a      	ldr	r3, [pc, #424]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d910      	bls.n	800391c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 0207 	bic.w	r2, r3, #7
 8003902:	4965      	ldr	r1, [pc, #404]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003934:	4b59      	ldr	r3, [pc, #356]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a58      	ldr	r2, [pc, #352]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800393e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a52      	ldr	r2, [pc, #328]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003958:	4b50      	ldr	r3, [pc, #320]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	494d      	ldr	r1, [pc, #308]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d040      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b47      	ldr	r3, [pc, #284]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d115      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e07f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b41      	ldr	r3, [pc, #260]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e073      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06b      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b39      	ldr	r3, [pc, #228]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4936      	ldr	r1, [pc, #216]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fe fcc2 	bl	8002350 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe fcbe 	bl	8002350 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e053      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d210      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 0207 	bic.w	r2, r3, #7
 8003a0e:	4922      	ldr	r1, [pc, #136]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e032      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a34:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4916      	ldr	r1, [pc, #88]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	490e      	ldr	r1, [pc, #56]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a66:	f000 f821 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	490a      	ldr	r1, [pc, #40]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	5ccb      	ldrb	r3, [r1, r3]
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	4a09      	ldr	r2, [pc, #36]	; (8003aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8003a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fc20 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40022000 	.word	0x40022000
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	080055e0 	.word	0x080055e0
 8003aa4:	20000004 	.word	0x20000004
 8003aa8:	20000008 	.word	0x20000008

08003aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 030c 	and.w	r3, r3, #12
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d002      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x30>
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x36>
 8003ada:	e027      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ade:	613b      	str	r3, [r7, #16]
      break;
 8003ae0:	e027      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	0c9b      	lsrs	r3, r3, #18
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003aec:	5cd3      	ldrb	r3, [r2, r3]
 8003aee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d010      	beq.n	8003b1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	0c5b      	lsrs	r3, r3, #17
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	4a11      	ldr	r2, [pc, #68]	; (8003b4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b06:	5cd3      	ldrb	r3, [r2, r3]
 8003b08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b0e:	fb03 f202 	mul.w	r2, r3, r2
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	e004      	b.n	8003b26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a0c      	ldr	r2, [pc, #48]	; (8003b50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	613b      	str	r3, [r7, #16]
      break;
 8003b2a:	e002      	b.n	8003b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b2e:	613b      	str	r3, [r7, #16]
      break;
 8003b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b32:	693b      	ldr	r3, [r7, #16]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40021000 	.word	0x40021000
 8003b44:	007a1200 	.word	0x007a1200
 8003b48:	080055f8 	.word	0x080055f8
 8003b4c:	08005608 	.word	0x08005608
 8003b50:	003d0900 	.word	0x003d0900

08003b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b58:	4b02      	ldr	r3, [pc, #8]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	20000004 	.word	0x20000004

08003b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b6c:	f7ff fff2 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	080055f0 	.word	0x080055f0

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b94:	f7ff ffde 	bl	8003b54 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	0adb      	lsrs	r3, r3, #11
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	080055f0 	.word	0x080055f0

08003bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	; (8003bec <RCC_Delay+0x34>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <RCC_Delay+0x38>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0a5b      	lsrs	r3, r3, #9
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bd4:	bf00      	nop
  }
  while (Delay --);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	60fa      	str	r2, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f9      	bne.n	8003bd4 <RCC_Delay+0x1c>
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	20000004 	.word	0x20000004
 8003bf0:	10624dd3 	.word	0x10624dd3

08003bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d07d      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c10:	2300      	movs	r3, #0
 8003c12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c14:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b4c      	ldr	r3, [pc, #304]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	4a4b      	ldr	r2, [pc, #300]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c2a:	61d3      	str	r3, [r2, #28]
 8003c2c:	4b49      	ldr	r3, [pc, #292]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	4b46      	ldr	r3, [pc, #280]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d118      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a42      	ldr	r2, [pc, #264]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c54:	f7fe fb7c 	bl	8002350 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fe fb78 	bl	8002350 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e06d      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b3a      	ldr	r3, [pc, #232]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7a:	4b36      	ldr	r3, [pc, #216]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d02e      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d027      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c98:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca2:	4b2e      	ldr	r3, [pc, #184]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca8:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cae:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d014      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fb47 	bl	8002350 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fe fb43 	bl	8002350 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e036      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ee      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4917      	ldr	r1, [pc, #92]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4a13      	ldr	r2, [pc, #76]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d18:	4b0e      	ldr	r3, [pc, #56]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	490b      	ldr	r1, [pc, #44]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d36:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4904      	ldr	r1, [pc, #16]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	42420440 	.word	0x42420440

08003d60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e042      	b.n	8003df8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fe f9b6 	bl	80020f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2224      	movs	r2, #36	; 0x24
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003da2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fbff 	bl	80045a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b08a      	sub	sp, #40	; 0x28
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d16d      	bne.n	8003efc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_UART_Transmit+0x2c>
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e066      	b.n	8003efe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	; 0x21
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fe fa87 	bl	8002350 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	88fa      	ldrh	r2, [r7, #6]
 8003e4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e58:	d108      	bne.n	8003e6c <HAL_UART_Transmit+0x6c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	61bb      	str	r3, [r7, #24]
 8003e6a:	e003      	b.n	8003e74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e74:	e02a      	b.n	8003ecc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f9ff 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e036      	b.n	8003efe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10b      	bne.n	8003eae <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	e007      	b.n	8003ebe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	781a      	ldrb	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1cf      	bne.n	8003e76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2140      	movs	r1, #64	; 0x40
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f9cf 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e006      	b.n	8003efe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	e000      	b.n	8003efe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003efc:	2302      	movs	r3, #2
  }
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b084      	sub	sp, #16
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	4613      	mov	r3, r2
 8003f12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d112      	bne.n	8003f46 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_UART_Receive_DMA+0x26>
 8003f26:	88fb      	ldrh	r3, [r7, #6]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e00b      	b.n	8003f48 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 fa0f 	bl	8004360 <UART_Start_Receive_DMA>
 8003f42:	4603      	mov	r3, r0
 8003f44:	e000      	b.n	8003f48 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b090      	sub	sp, #64	; 0x40
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	bf14      	ite	ne
 8003f6a:	2301      	movne	r3, #1
 8003f6c:	2300      	moveq	r3, #0
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b21      	cmp	r3, #33	; 0x21
 8003f7c:	d128      	bne.n	8003fd0 <HAL_UART_DMAStop+0x80>
 8003f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d025      	beq.n	8003fd0 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	623b      	str	r3, [r7, #32]
   return(result);
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3314      	adds	r3, #20
 8003fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa4:	633a      	str	r2, [r7, #48]	; 0x30
 8003fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe fedf 	bl	8002d88 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa62 	bl	8004494 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bf14      	ite	ne
 8003fde:	2301      	movne	r3, #1
 8003fe0:	2300      	moveq	r3, #0
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b22      	cmp	r3, #34	; 0x22
 8003ff0:	d128      	bne.n	8004044 <HAL_UART_DMAStop+0xf4>
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d025      	beq.n	8004044 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	60fb      	str	r3, [r7, #12]
   return(result);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004018:	61fa      	str	r2, [r7, #28]
 800401a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	69b9      	ldr	r1, [r7, #24]
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	617b      	str	r3, [r7, #20]
   return(result);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e5      	bne.n	8003ff8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe fea5 	bl	8002d88 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa4f 	bl	80044e2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3740      	adds	r7, #64	; 0x40
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b09c      	sub	sp, #112	; 0x70
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d172      	bne.n	800418a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80040a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a6:	2200      	movs	r2, #0
 80040a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040ca:	65ba      	str	r2, [r7, #88]	; 0x58
 80040cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	667b      	str	r3, [r7, #100]	; 0x64
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004100:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004104:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800410c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	3314      	adds	r3, #20
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	e853 3f00 	ldrex	r3, [r3]
 8004120:	623b      	str	r3, [r7, #32]
   return(result);
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004128:	663b      	str	r3, [r7, #96]	; 0x60
 800412a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3314      	adds	r3, #20
 8004130:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004132:	633a      	str	r2, [r7, #48]	; 0x30
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e5      	bne.n	8004112 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004152:	2b01      	cmp	r3, #1
 8004154:	d119      	bne.n	800418a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	60fb      	str	r3, [r7, #12]
   return(result);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f023 0310 	bic.w	r3, r3, #16
 800416c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800416e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004176:	61fa      	str	r2, [r7, #28]
 8004178:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	69b9      	ldr	r1, [r7, #24]
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	617b      	str	r3, [r7, #20]
   return(result);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800418a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418c:	2200      	movs	r2, #0
 800418e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800419a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800419c:	4619      	mov	r1, r3
 800419e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041a0:	f7ff ff67 	bl	8004072 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041a4:	e002      	b.n	80041ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80041a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80041a8:	f7fc fdac 	bl	8000d04 <HAL_UART_RxCpltCallback>
}
 80041ac:	bf00      	nop
 80041ae:	3770      	adds	r7, #112	; 0x70
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d108      	bne.n	80041e2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041d4:	085b      	lsrs	r3, r3, #1
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff ff49 	bl	8004072 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041e0:	e002      	b.n	80041e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff33 	bl	800404e <HAL_UART_RxHalfCpltCallback>
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b21      	cmp	r3, #33	; 0x21
 8004222:	d108      	bne.n	8004236 <UART_DMAError+0x46>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004230:	68b8      	ldr	r0, [r7, #8]
 8004232:	f000 f92f 	bl	8004494 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004240:	2b00      	cmp	r3, #0
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b22      	cmp	r3, #34	; 0x22
 8004256:	d108      	bne.n	800426a <UART_DMAError+0x7a>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2200      	movs	r2, #0
 8004262:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004264:	68b8      	ldr	r0, [r7, #8]
 8004266:	f000 f93c 	bl	80044e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f043 0210 	orr.w	r2, r3, #16
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004276:	68b8      	ldr	r0, [r7, #8]
 8004278:	f7ff fef2 	bl	8004060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b090      	sub	sp, #64	; 0x40
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	e050      	b.n	8004338 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d04c      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d007      	beq.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a4:	f7fe f854 	bl	8002350 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d241      	bcs.n	8004338 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042d4:	637a      	str	r2, [r7, #52]	; 0x34
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	613b      	str	r3, [r7, #16]
   return(result);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004308:	623a      	str	r2, [r7, #32]
 800430a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	69f9      	ldr	r1, [r7, #28]
 800430e:	6a3a      	ldr	r2, [r7, #32]
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	61bb      	str	r3, [r7, #24]
   return(result);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e5      	bne.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e00f      	b.n	8004358 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	429a      	cmp	r2, r3
 8004354:	d09f      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3740      	adds	r7, #64	; 0x40
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b098      	sub	sp, #96	; 0x60
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2222      	movs	r2, #34	; 0x22
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	4a3e      	ldr	r2, [pc, #248]	; (8004488 <UART_Start_Receive_DMA+0x128>)
 800438e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	4a3d      	ldr	r2, [pc, #244]	; (800448c <UART_Start_Receive_DMA+0x12c>)
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	4a3c      	ldr	r2, [pc, #240]	; (8004490 <UART_Start_Receive_DMA+0x130>)
 800439e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a4:	2200      	movs	r2, #0
 80043a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80043a8:	f107 0308 	add.w	r3, r7, #8
 80043ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4619      	mov	r1, r3
 80043ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	88fb      	ldrh	r3, [r7, #6]
 80043c0:	f7fe fc82 	bl	8002cc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80043c4:	2300      	movs	r3, #0
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d019      	beq.n	8004416 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	330c      	adds	r3, #12
 80043e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004402:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004404:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004408:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e5      	bne.n	80043e2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	657b      	str	r3, [r7, #84]	; 0x54
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004436:	63ba      	str	r2, [r7, #56]	; 0x38
 8004438:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800443c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e5      	bne.n	8004416 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3314      	adds	r3, #20
 8004450:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	617b      	str	r3, [r7, #20]
   return(result);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004460:	653b      	str	r3, [r7, #80]	; 0x50
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800446a:	627a      	str	r2, [r7, #36]	; 0x24
 800446c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6a39      	ldr	r1, [r7, #32]
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	61fb      	str	r3, [r7, #28]
   return(result);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3760      	adds	r7, #96	; 0x60
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	08004089 	.word	0x08004089
 800448c:	080041b5 	.word	0x080041b5
 8004490:	080041f1 	.word	0x080041f1

08004494 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	; 0x24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	69fa      	ldr	r2, [r7, #28]
 80044bc:	61ba      	str	r2, [r7, #24]
 80044be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6979      	ldr	r1, [r7, #20]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80044d8:	bf00      	nop
 80044da:	3724      	adds	r7, #36	; 0x24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bc80      	pop	{r7}
 80044e0:	4770      	bx	lr

080044e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b095      	sub	sp, #84	; 0x54
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004500:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800450a:	643a      	str	r2, [r7, #64]	; 0x40
 800450c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e5      	bne.n	80044ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3314      	adds	r3, #20
 8004524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6a3b      	ldr	r3, [r7, #32]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	61fb      	str	r3, [r7, #28]
   return(result);
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	64bb      	str	r3, [r7, #72]	; 0x48
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3314      	adds	r3, #20
 800453c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800453e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	2b01      	cmp	r3, #1
 8004558:	d119      	bne.n	800458e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330c      	adds	r3, #12
 8004560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	60bb      	str	r3, [r7, #8]
   return(result);
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f023 0310 	bic.w	r3, r3, #16
 8004570:	647b      	str	r3, [r7, #68]	; 0x44
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	330c      	adds	r3, #12
 8004578:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800457a:	61ba      	str	r2, [r7, #24]
 800457c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6979      	ldr	r1, [r7, #20]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	613b      	str	r3, [r7, #16]
   return(result);
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800459c:	bf00      	nop
 800459e:	3754      	adds	r7, #84	; 0x54
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
	...

080045a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045e2:	f023 030c 	bic.w	r3, r3, #12
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	430b      	orrs	r3, r1
 80045ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <UART_SetConfig+0x114>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004610:	f7ff fabe 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	e002      	b.n	800461e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004618:	f7ff faa6 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 800461c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009a      	lsls	r2, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	4a22      	ldr	r2, [pc, #136]	; (80046c0 <UART_SetConfig+0x118>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	0119      	lsls	r1, r3, #4
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009a      	lsls	r2, r3, #2
 8004648:	441a      	add	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	fbb2 f2f3 	udiv	r2, r2, r3
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <UART_SetConfig+0x118>)
 8004656:	fba3 0302 	umull	r0, r3, r3, r2
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	2064      	movs	r0, #100	; 0x64
 800465e:	fb00 f303 	mul.w	r3, r0, r3
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	3332      	adds	r3, #50	; 0x32
 8004668:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <UART_SetConfig+0x118>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004674:	4419      	add	r1, r3
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009a      	lsls	r2, r3, #2
 8004680:	441a      	add	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	fbb2 f2f3 	udiv	r2, r2, r3
 800468c:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <UART_SetConfig+0x118>)
 800468e:	fba3 0302 	umull	r0, r3, r3, r2
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2064      	movs	r0, #100	; 0x64
 8004696:	fb00 f303 	mul.w	r3, r0, r3
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	3332      	adds	r3, #50	; 0x32
 80046a0:	4a07      	ldr	r2, [pc, #28]	; (80046c0 <UART_SetConfig+0x118>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	095b      	lsrs	r3, r3, #5
 80046a8:	f003 020f 	and.w	r2, r3, #15
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	440a      	add	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40013800 	.word	0x40013800
 80046c0:	51eb851f 	.word	0x51eb851f

080046c4 <_vsniprintf_r>:
 80046c4:	b530      	push	{r4, r5, lr}
 80046c6:	4614      	mov	r4, r2
 80046c8:	2c00      	cmp	r4, #0
 80046ca:	4605      	mov	r5, r0
 80046cc:	461a      	mov	r2, r3
 80046ce:	b09b      	sub	sp, #108	; 0x6c
 80046d0:	da05      	bge.n	80046de <_vsniprintf_r+0x1a>
 80046d2:	238b      	movs	r3, #139	; 0x8b
 80046d4:	6003      	str	r3, [r0, #0]
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	b01b      	add	sp, #108	; 0x6c
 80046dc:	bd30      	pop	{r4, r5, pc}
 80046de:	f44f 7302 	mov.w	r3, #520	; 0x208
 80046e2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80046e6:	bf0c      	ite	eq
 80046e8:	4623      	moveq	r3, r4
 80046ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	9305      	str	r3, [sp, #20]
 80046f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046f6:	9100      	str	r1, [sp, #0]
 80046f8:	9104      	str	r1, [sp, #16]
 80046fa:	f8ad 300e 	strh.w	r3, [sp, #14]
 80046fe:	4669      	mov	r1, sp
 8004700:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004702:	f000 f99b 	bl	8004a3c <_svfiprintf_r>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	bfbc      	itt	lt
 800470a:	238b      	movlt	r3, #139	; 0x8b
 800470c:	602b      	strlt	r3, [r5, #0]
 800470e:	2c00      	cmp	r4, #0
 8004710:	d0e3      	beq.n	80046da <_vsniprintf_r+0x16>
 8004712:	2200      	movs	r2, #0
 8004714:	9b00      	ldr	r3, [sp, #0]
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e7df      	b.n	80046da <_vsniprintf_r+0x16>
	...

0800471c <vsniprintf>:
 800471c:	b507      	push	{r0, r1, r2, lr}
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	460a      	mov	r2, r1
 8004724:	4601      	mov	r1, r0
 8004726:	4803      	ldr	r0, [pc, #12]	; (8004734 <vsniprintf+0x18>)
 8004728:	6800      	ldr	r0, [r0, #0]
 800472a:	f7ff ffcb 	bl	80046c4 <_vsniprintf_r>
 800472e:	b003      	add	sp, #12
 8004730:	f85d fb04 	ldr.w	pc, [sp], #4
 8004734:	2000005c 	.word	0x2000005c

08004738 <memset>:
 8004738:	4603      	mov	r3, r0
 800473a:	4402      	add	r2, r0
 800473c:	4293      	cmp	r3, r2
 800473e:	d100      	bne.n	8004742 <memset+0xa>
 8004740:	4770      	bx	lr
 8004742:	f803 1b01 	strb.w	r1, [r3], #1
 8004746:	e7f9      	b.n	800473c <memset+0x4>

08004748 <__errno>:
 8004748:	4b01      	ldr	r3, [pc, #4]	; (8004750 <__errno+0x8>)
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	2000005c 	.word	0x2000005c

08004754 <__libc_init_array>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	2600      	movs	r6, #0
 8004758:	4d0c      	ldr	r5, [pc, #48]	; (800478c <__libc_init_array+0x38>)
 800475a:	4c0d      	ldr	r4, [pc, #52]	; (8004790 <__libc_init_array+0x3c>)
 800475c:	1b64      	subs	r4, r4, r5
 800475e:	10a4      	asrs	r4, r4, #2
 8004760:	42a6      	cmp	r6, r4
 8004762:	d109      	bne.n	8004778 <__libc_init_array+0x24>
 8004764:	f000 fc7a 	bl	800505c <_init>
 8004768:	2600      	movs	r6, #0
 800476a:	4d0a      	ldr	r5, [pc, #40]	; (8004794 <__libc_init_array+0x40>)
 800476c:	4c0a      	ldr	r4, [pc, #40]	; (8004798 <__libc_init_array+0x44>)
 800476e:	1b64      	subs	r4, r4, r5
 8004770:	10a4      	asrs	r4, r4, #2
 8004772:	42a6      	cmp	r6, r4
 8004774:	d105      	bne.n	8004782 <__libc_init_array+0x2e>
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	f855 3b04 	ldr.w	r3, [r5], #4
 800477c:	4798      	blx	r3
 800477e:	3601      	adds	r6, #1
 8004780:	e7ee      	b.n	8004760 <__libc_init_array+0xc>
 8004782:	f855 3b04 	ldr.w	r3, [r5], #4
 8004786:	4798      	blx	r3
 8004788:	3601      	adds	r6, #1
 800478a:	e7f2      	b.n	8004772 <__libc_init_array+0x1e>
 800478c:	08005640 	.word	0x08005640
 8004790:	08005640 	.word	0x08005640
 8004794:	08005640 	.word	0x08005640
 8004798:	08005644 	.word	0x08005644

0800479c <__retarget_lock_acquire_recursive>:
 800479c:	4770      	bx	lr

0800479e <__retarget_lock_release_recursive>:
 800479e:	4770      	bx	lr

080047a0 <_free_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4605      	mov	r5, r0
 80047a4:	2900      	cmp	r1, #0
 80047a6:	d040      	beq.n	800482a <_free_r+0x8a>
 80047a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ac:	1f0c      	subs	r4, r1, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bfb8      	it	lt
 80047b2:	18e4      	addlt	r4, r4, r3
 80047b4:	f000 f8dc 	bl	8004970 <__malloc_lock>
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <_free_r+0x8c>)
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	b933      	cbnz	r3, 80047cc <_free_r+0x2c>
 80047be:	6063      	str	r3, [r4, #4]
 80047c0:	6014      	str	r4, [r2, #0]
 80047c2:	4628      	mov	r0, r5
 80047c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047c8:	f000 b8d8 	b.w	800497c <__malloc_unlock>
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	d908      	bls.n	80047e2 <_free_r+0x42>
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	1821      	adds	r1, r4, r0
 80047d4:	428b      	cmp	r3, r1
 80047d6:	bf01      	itttt	eq
 80047d8:	6819      	ldreq	r1, [r3, #0]
 80047da:	685b      	ldreq	r3, [r3, #4]
 80047dc:	1809      	addeq	r1, r1, r0
 80047de:	6021      	streq	r1, [r4, #0]
 80047e0:	e7ed      	b.n	80047be <_free_r+0x1e>
 80047e2:	461a      	mov	r2, r3
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	b10b      	cbz	r3, 80047ec <_free_r+0x4c>
 80047e8:	42a3      	cmp	r3, r4
 80047ea:	d9fa      	bls.n	80047e2 <_free_r+0x42>
 80047ec:	6811      	ldr	r1, [r2, #0]
 80047ee:	1850      	adds	r0, r2, r1
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d10b      	bne.n	800480c <_free_r+0x6c>
 80047f4:	6820      	ldr	r0, [r4, #0]
 80047f6:	4401      	add	r1, r0
 80047f8:	1850      	adds	r0, r2, r1
 80047fa:	4283      	cmp	r3, r0
 80047fc:	6011      	str	r1, [r2, #0]
 80047fe:	d1e0      	bne.n	80047c2 <_free_r+0x22>
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	4408      	add	r0, r1
 8004806:	6010      	str	r0, [r2, #0]
 8004808:	6053      	str	r3, [r2, #4]
 800480a:	e7da      	b.n	80047c2 <_free_r+0x22>
 800480c:	d902      	bls.n	8004814 <_free_r+0x74>
 800480e:	230c      	movs	r3, #12
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	e7d6      	b.n	80047c2 <_free_r+0x22>
 8004814:	6820      	ldr	r0, [r4, #0]
 8004816:	1821      	adds	r1, r4, r0
 8004818:	428b      	cmp	r3, r1
 800481a:	bf01      	itttt	eq
 800481c:	6819      	ldreq	r1, [r3, #0]
 800481e:	685b      	ldreq	r3, [r3, #4]
 8004820:	1809      	addeq	r1, r1, r0
 8004822:	6021      	streq	r1, [r4, #0]
 8004824:	6063      	str	r3, [r4, #4]
 8004826:	6054      	str	r4, [r2, #4]
 8004828:	e7cb      	b.n	80047c2 <_free_r+0x22>
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	20000788 	.word	0x20000788

08004830 <sbrk_aligned>:
 8004830:	b570      	push	{r4, r5, r6, lr}
 8004832:	4e0e      	ldr	r6, [pc, #56]	; (800486c <sbrk_aligned+0x3c>)
 8004834:	460c      	mov	r4, r1
 8004836:	6831      	ldr	r1, [r6, #0]
 8004838:	4605      	mov	r5, r0
 800483a:	b911      	cbnz	r1, 8004842 <sbrk_aligned+0x12>
 800483c:	f000 fbaa 	bl	8004f94 <_sbrk_r>
 8004840:	6030      	str	r0, [r6, #0]
 8004842:	4621      	mov	r1, r4
 8004844:	4628      	mov	r0, r5
 8004846:	f000 fba5 	bl	8004f94 <_sbrk_r>
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	d00a      	beq.n	8004864 <sbrk_aligned+0x34>
 800484e:	1cc4      	adds	r4, r0, #3
 8004850:	f024 0403 	bic.w	r4, r4, #3
 8004854:	42a0      	cmp	r0, r4
 8004856:	d007      	beq.n	8004868 <sbrk_aligned+0x38>
 8004858:	1a21      	subs	r1, r4, r0
 800485a:	4628      	mov	r0, r5
 800485c:	f000 fb9a 	bl	8004f94 <_sbrk_r>
 8004860:	3001      	adds	r0, #1
 8004862:	d101      	bne.n	8004868 <sbrk_aligned+0x38>
 8004864:	f04f 34ff 	mov.w	r4, #4294967295
 8004868:	4620      	mov	r0, r4
 800486a:	bd70      	pop	{r4, r5, r6, pc}
 800486c:	2000078c 	.word	0x2000078c

08004870 <_malloc_r>:
 8004870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004874:	1ccd      	adds	r5, r1, #3
 8004876:	f025 0503 	bic.w	r5, r5, #3
 800487a:	3508      	adds	r5, #8
 800487c:	2d0c      	cmp	r5, #12
 800487e:	bf38      	it	cc
 8004880:	250c      	movcc	r5, #12
 8004882:	2d00      	cmp	r5, #0
 8004884:	4607      	mov	r7, r0
 8004886:	db01      	blt.n	800488c <_malloc_r+0x1c>
 8004888:	42a9      	cmp	r1, r5
 800488a:	d905      	bls.n	8004898 <_malloc_r+0x28>
 800488c:	230c      	movs	r3, #12
 800488e:	2600      	movs	r6, #0
 8004890:	603b      	str	r3, [r7, #0]
 8004892:	4630      	mov	r0, r6
 8004894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004898:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800496c <_malloc_r+0xfc>
 800489c:	f000 f868 	bl	8004970 <__malloc_lock>
 80048a0:	f8d8 3000 	ldr.w	r3, [r8]
 80048a4:	461c      	mov	r4, r3
 80048a6:	bb5c      	cbnz	r4, 8004900 <_malloc_r+0x90>
 80048a8:	4629      	mov	r1, r5
 80048aa:	4638      	mov	r0, r7
 80048ac:	f7ff ffc0 	bl	8004830 <sbrk_aligned>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	4604      	mov	r4, r0
 80048b4:	d155      	bne.n	8004962 <_malloc_r+0xf2>
 80048b6:	f8d8 4000 	ldr.w	r4, [r8]
 80048ba:	4626      	mov	r6, r4
 80048bc:	2e00      	cmp	r6, #0
 80048be:	d145      	bne.n	800494c <_malloc_r+0xdc>
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	d048      	beq.n	8004956 <_malloc_r+0xe6>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	4631      	mov	r1, r6
 80048c8:	4638      	mov	r0, r7
 80048ca:	eb04 0903 	add.w	r9, r4, r3
 80048ce:	f000 fb61 	bl	8004f94 <_sbrk_r>
 80048d2:	4581      	cmp	r9, r0
 80048d4:	d13f      	bne.n	8004956 <_malloc_r+0xe6>
 80048d6:	6821      	ldr	r1, [r4, #0]
 80048d8:	4638      	mov	r0, r7
 80048da:	1a6d      	subs	r5, r5, r1
 80048dc:	4629      	mov	r1, r5
 80048de:	f7ff ffa7 	bl	8004830 <sbrk_aligned>
 80048e2:	3001      	adds	r0, #1
 80048e4:	d037      	beq.n	8004956 <_malloc_r+0xe6>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	442b      	add	r3, r5
 80048ea:	6023      	str	r3, [r4, #0]
 80048ec:	f8d8 3000 	ldr.w	r3, [r8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d038      	beq.n	8004966 <_malloc_r+0xf6>
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	42a2      	cmp	r2, r4
 80048f8:	d12b      	bne.n	8004952 <_malloc_r+0xe2>
 80048fa:	2200      	movs	r2, #0
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	e00f      	b.n	8004920 <_malloc_r+0xb0>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	1b52      	subs	r2, r2, r5
 8004904:	d41f      	bmi.n	8004946 <_malloc_r+0xd6>
 8004906:	2a0b      	cmp	r2, #11
 8004908:	d917      	bls.n	800493a <_malloc_r+0xca>
 800490a:	1961      	adds	r1, r4, r5
 800490c:	42a3      	cmp	r3, r4
 800490e:	6025      	str	r5, [r4, #0]
 8004910:	bf18      	it	ne
 8004912:	6059      	strne	r1, [r3, #4]
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	bf08      	it	eq
 8004918:	f8c8 1000 	streq.w	r1, [r8]
 800491c:	5162      	str	r2, [r4, r5]
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	4638      	mov	r0, r7
 8004922:	f104 060b 	add.w	r6, r4, #11
 8004926:	f000 f829 	bl	800497c <__malloc_unlock>
 800492a:	f026 0607 	bic.w	r6, r6, #7
 800492e:	1d23      	adds	r3, r4, #4
 8004930:	1af2      	subs	r2, r6, r3
 8004932:	d0ae      	beq.n	8004892 <_malloc_r+0x22>
 8004934:	1b9b      	subs	r3, r3, r6
 8004936:	50a3      	str	r3, [r4, r2]
 8004938:	e7ab      	b.n	8004892 <_malloc_r+0x22>
 800493a:	42a3      	cmp	r3, r4
 800493c:	6862      	ldr	r2, [r4, #4]
 800493e:	d1dd      	bne.n	80048fc <_malloc_r+0x8c>
 8004940:	f8c8 2000 	str.w	r2, [r8]
 8004944:	e7ec      	b.n	8004920 <_malloc_r+0xb0>
 8004946:	4623      	mov	r3, r4
 8004948:	6864      	ldr	r4, [r4, #4]
 800494a:	e7ac      	b.n	80048a6 <_malloc_r+0x36>
 800494c:	4634      	mov	r4, r6
 800494e:	6876      	ldr	r6, [r6, #4]
 8004950:	e7b4      	b.n	80048bc <_malloc_r+0x4c>
 8004952:	4613      	mov	r3, r2
 8004954:	e7cc      	b.n	80048f0 <_malloc_r+0x80>
 8004956:	230c      	movs	r3, #12
 8004958:	4638      	mov	r0, r7
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	f000 f80e 	bl	800497c <__malloc_unlock>
 8004960:	e797      	b.n	8004892 <_malloc_r+0x22>
 8004962:	6025      	str	r5, [r4, #0]
 8004964:	e7dc      	b.n	8004920 <_malloc_r+0xb0>
 8004966:	605b      	str	r3, [r3, #4]
 8004968:	deff      	udf	#255	; 0xff
 800496a:	bf00      	nop
 800496c:	20000788 	.word	0x20000788

08004970 <__malloc_lock>:
 8004970:	4801      	ldr	r0, [pc, #4]	; (8004978 <__malloc_lock+0x8>)
 8004972:	f7ff bf13 	b.w	800479c <__retarget_lock_acquire_recursive>
 8004976:	bf00      	nop
 8004978:	20000784 	.word	0x20000784

0800497c <__malloc_unlock>:
 800497c:	4801      	ldr	r0, [pc, #4]	; (8004984 <__malloc_unlock+0x8>)
 800497e:	f7ff bf0e 	b.w	800479e <__retarget_lock_release_recursive>
 8004982:	bf00      	nop
 8004984:	20000784 	.word	0x20000784

08004988 <__ssputs_r>:
 8004988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800498c:	461f      	mov	r7, r3
 800498e:	688e      	ldr	r6, [r1, #8]
 8004990:	4682      	mov	sl, r0
 8004992:	42be      	cmp	r6, r7
 8004994:	460c      	mov	r4, r1
 8004996:	4690      	mov	r8, r2
 8004998:	680b      	ldr	r3, [r1, #0]
 800499a:	d82c      	bhi.n	80049f6 <__ssputs_r+0x6e>
 800499c:	898a      	ldrh	r2, [r1, #12]
 800499e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049a2:	d026      	beq.n	80049f2 <__ssputs_r+0x6a>
 80049a4:	6965      	ldr	r5, [r4, #20]
 80049a6:	6909      	ldr	r1, [r1, #16]
 80049a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049ac:	eba3 0901 	sub.w	r9, r3, r1
 80049b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049b4:	1c7b      	adds	r3, r7, #1
 80049b6:	444b      	add	r3, r9
 80049b8:	106d      	asrs	r5, r5, #1
 80049ba:	429d      	cmp	r5, r3
 80049bc:	bf38      	it	cc
 80049be:	461d      	movcc	r5, r3
 80049c0:	0553      	lsls	r3, r2, #21
 80049c2:	d527      	bpl.n	8004a14 <__ssputs_r+0x8c>
 80049c4:	4629      	mov	r1, r5
 80049c6:	f7ff ff53 	bl	8004870 <_malloc_r>
 80049ca:	4606      	mov	r6, r0
 80049cc:	b360      	cbz	r0, 8004a28 <__ssputs_r+0xa0>
 80049ce:	464a      	mov	r2, r9
 80049d0:	6921      	ldr	r1, [r4, #16]
 80049d2:	f000 fafd 	bl	8004fd0 <memcpy>
 80049d6:	89a3      	ldrh	r3, [r4, #12]
 80049d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e0:	81a3      	strh	r3, [r4, #12]
 80049e2:	6126      	str	r6, [r4, #16]
 80049e4:	444e      	add	r6, r9
 80049e6:	6026      	str	r6, [r4, #0]
 80049e8:	463e      	mov	r6, r7
 80049ea:	6165      	str	r5, [r4, #20]
 80049ec:	eba5 0509 	sub.w	r5, r5, r9
 80049f0:	60a5      	str	r5, [r4, #8]
 80049f2:	42be      	cmp	r6, r7
 80049f4:	d900      	bls.n	80049f8 <__ssputs_r+0x70>
 80049f6:	463e      	mov	r6, r7
 80049f8:	4632      	mov	r2, r6
 80049fa:	4641      	mov	r1, r8
 80049fc:	6820      	ldr	r0, [r4, #0]
 80049fe:	f000 faaf 	bl	8004f60 <memmove>
 8004a02:	2000      	movs	r0, #0
 8004a04:	68a3      	ldr	r3, [r4, #8]
 8004a06:	1b9b      	subs	r3, r3, r6
 8004a08:	60a3      	str	r3, [r4, #8]
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	4433      	add	r3, r6
 8004a0e:	6023      	str	r3, [r4, #0]
 8004a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a14:	462a      	mov	r2, r5
 8004a16:	f000 fae9 	bl	8004fec <_realloc_r>
 8004a1a:	4606      	mov	r6, r0
 8004a1c:	2800      	cmp	r0, #0
 8004a1e:	d1e0      	bne.n	80049e2 <__ssputs_r+0x5a>
 8004a20:	4650      	mov	r0, sl
 8004a22:	6921      	ldr	r1, [r4, #16]
 8004a24:	f7ff febc 	bl	80047a0 <_free_r>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	f8ca 3000 	str.w	r3, [sl]
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f04f 30ff 	mov.w	r0, #4294967295
 8004a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a38:	81a3      	strh	r3, [r4, #12]
 8004a3a:	e7e9      	b.n	8004a10 <__ssputs_r+0x88>

08004a3c <_svfiprintf_r>:
 8004a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a40:	4698      	mov	r8, r3
 8004a42:	898b      	ldrh	r3, [r1, #12]
 8004a44:	4607      	mov	r7, r0
 8004a46:	061b      	lsls	r3, r3, #24
 8004a48:	460d      	mov	r5, r1
 8004a4a:	4614      	mov	r4, r2
 8004a4c:	b09d      	sub	sp, #116	; 0x74
 8004a4e:	d50e      	bpl.n	8004a6e <_svfiprintf_r+0x32>
 8004a50:	690b      	ldr	r3, [r1, #16]
 8004a52:	b963      	cbnz	r3, 8004a6e <_svfiprintf_r+0x32>
 8004a54:	2140      	movs	r1, #64	; 0x40
 8004a56:	f7ff ff0b 	bl	8004870 <_malloc_r>
 8004a5a:	6028      	str	r0, [r5, #0]
 8004a5c:	6128      	str	r0, [r5, #16]
 8004a5e:	b920      	cbnz	r0, 8004a6a <_svfiprintf_r+0x2e>
 8004a60:	230c      	movs	r3, #12
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	f04f 30ff 	mov.w	r0, #4294967295
 8004a68:	e0d0      	b.n	8004c0c <_svfiprintf_r+0x1d0>
 8004a6a:	2340      	movs	r3, #64	; 0x40
 8004a6c:	616b      	str	r3, [r5, #20]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	9309      	str	r3, [sp, #36]	; 0x24
 8004a72:	2320      	movs	r3, #32
 8004a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a78:	2330      	movs	r3, #48	; 0x30
 8004a7a:	f04f 0901 	mov.w	r9, #1
 8004a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a82:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004c24 <_svfiprintf_r+0x1e8>
 8004a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a8a:	4623      	mov	r3, r4
 8004a8c:	469a      	mov	sl, r3
 8004a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a92:	b10a      	cbz	r2, 8004a98 <_svfiprintf_r+0x5c>
 8004a94:	2a25      	cmp	r2, #37	; 0x25
 8004a96:	d1f9      	bne.n	8004a8c <_svfiprintf_r+0x50>
 8004a98:	ebba 0b04 	subs.w	fp, sl, r4
 8004a9c:	d00b      	beq.n	8004ab6 <_svfiprintf_r+0x7a>
 8004a9e:	465b      	mov	r3, fp
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	f7ff ff6f 	bl	8004988 <__ssputs_r>
 8004aaa:	3001      	adds	r0, #1
 8004aac:	f000 80a9 	beq.w	8004c02 <_svfiprintf_r+0x1c6>
 8004ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ab2:	445a      	add	r2, fp
 8004ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80a1 	beq.w	8004c02 <_svfiprintf_r+0x1c6>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aca:	f10a 0a01 	add.w	sl, sl, #1
 8004ace:	9304      	str	r3, [sp, #16]
 8004ad0:	9307      	str	r3, [sp, #28]
 8004ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ad8:	4654      	mov	r4, sl
 8004ada:	2205      	movs	r2, #5
 8004adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae0:	4850      	ldr	r0, [pc, #320]	; (8004c24 <_svfiprintf_r+0x1e8>)
 8004ae2:	f000 fa67 	bl	8004fb4 <memchr>
 8004ae6:	9a04      	ldr	r2, [sp, #16]
 8004ae8:	b9d8      	cbnz	r0, 8004b22 <_svfiprintf_r+0xe6>
 8004aea:	06d0      	lsls	r0, r2, #27
 8004aec:	bf44      	itt	mi
 8004aee:	2320      	movmi	r3, #32
 8004af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004af4:	0711      	lsls	r1, r2, #28
 8004af6:	bf44      	itt	mi
 8004af8:	232b      	movmi	r3, #43	; 0x2b
 8004afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004afe:	f89a 3000 	ldrb.w	r3, [sl]
 8004b02:	2b2a      	cmp	r3, #42	; 0x2a
 8004b04:	d015      	beq.n	8004b32 <_svfiprintf_r+0xf6>
 8004b06:	4654      	mov	r4, sl
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f04f 0c0a 	mov.w	ip, #10
 8004b0e:	9a07      	ldr	r2, [sp, #28]
 8004b10:	4621      	mov	r1, r4
 8004b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b16:	3b30      	subs	r3, #48	; 0x30
 8004b18:	2b09      	cmp	r3, #9
 8004b1a:	d94d      	bls.n	8004bb8 <_svfiprintf_r+0x17c>
 8004b1c:	b1b0      	cbz	r0, 8004b4c <_svfiprintf_r+0x110>
 8004b1e:	9207      	str	r2, [sp, #28]
 8004b20:	e014      	b.n	8004b4c <_svfiprintf_r+0x110>
 8004b22:	eba0 0308 	sub.w	r3, r0, r8
 8004b26:	fa09 f303 	lsl.w	r3, r9, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	46a2      	mov	sl, r4
 8004b2e:	9304      	str	r3, [sp, #16]
 8004b30:	e7d2      	b.n	8004ad8 <_svfiprintf_r+0x9c>
 8004b32:	9b03      	ldr	r3, [sp, #12]
 8004b34:	1d19      	adds	r1, r3, #4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	9103      	str	r1, [sp, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	bfbb      	ittet	lt
 8004b3e:	425b      	neglt	r3, r3
 8004b40:	f042 0202 	orrlt.w	r2, r2, #2
 8004b44:	9307      	strge	r3, [sp, #28]
 8004b46:	9307      	strlt	r3, [sp, #28]
 8004b48:	bfb8      	it	lt
 8004b4a:	9204      	strlt	r2, [sp, #16]
 8004b4c:	7823      	ldrb	r3, [r4, #0]
 8004b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b50:	d10c      	bne.n	8004b6c <_svfiprintf_r+0x130>
 8004b52:	7863      	ldrb	r3, [r4, #1]
 8004b54:	2b2a      	cmp	r3, #42	; 0x2a
 8004b56:	d134      	bne.n	8004bc2 <_svfiprintf_r+0x186>
 8004b58:	9b03      	ldr	r3, [sp, #12]
 8004b5a:	3402      	adds	r4, #2
 8004b5c:	1d1a      	adds	r2, r3, #4
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	9203      	str	r2, [sp, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfb8      	it	lt
 8004b66:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b6a:	9305      	str	r3, [sp, #20]
 8004b6c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004c28 <_svfiprintf_r+0x1ec>
 8004b70:	2203      	movs	r2, #3
 8004b72:	4650      	mov	r0, sl
 8004b74:	7821      	ldrb	r1, [r4, #0]
 8004b76:	f000 fa1d 	bl	8004fb4 <memchr>
 8004b7a:	b138      	cbz	r0, 8004b8c <_svfiprintf_r+0x150>
 8004b7c:	2240      	movs	r2, #64	; 0x40
 8004b7e:	9b04      	ldr	r3, [sp, #16]
 8004b80:	eba0 000a 	sub.w	r0, r0, sl
 8004b84:	4082      	lsls	r2, r0
 8004b86:	4313      	orrs	r3, r2
 8004b88:	3401      	adds	r4, #1
 8004b8a:	9304      	str	r3, [sp, #16]
 8004b8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b90:	2206      	movs	r2, #6
 8004b92:	4826      	ldr	r0, [pc, #152]	; (8004c2c <_svfiprintf_r+0x1f0>)
 8004b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b98:	f000 fa0c 	bl	8004fb4 <memchr>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d038      	beq.n	8004c12 <_svfiprintf_r+0x1d6>
 8004ba0:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <_svfiprintf_r+0x1f4>)
 8004ba2:	bb1b      	cbnz	r3, 8004bec <_svfiprintf_r+0x1b0>
 8004ba4:	9b03      	ldr	r3, [sp, #12]
 8004ba6:	3307      	adds	r3, #7
 8004ba8:	f023 0307 	bic.w	r3, r3, #7
 8004bac:	3308      	adds	r3, #8
 8004bae:	9303      	str	r3, [sp, #12]
 8004bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb2:	4433      	add	r3, r6
 8004bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb6:	e768      	b.n	8004a8a <_svfiprintf_r+0x4e>
 8004bb8:	460c      	mov	r4, r1
 8004bba:	2001      	movs	r0, #1
 8004bbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bc0:	e7a6      	b.n	8004b10 <_svfiprintf_r+0xd4>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f04f 0c0a 	mov.w	ip, #10
 8004bc8:	4619      	mov	r1, r3
 8004bca:	3401      	adds	r4, #1
 8004bcc:	9305      	str	r3, [sp, #20]
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bd4:	3a30      	subs	r2, #48	; 0x30
 8004bd6:	2a09      	cmp	r2, #9
 8004bd8:	d903      	bls.n	8004be2 <_svfiprintf_r+0x1a6>
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0c6      	beq.n	8004b6c <_svfiprintf_r+0x130>
 8004bde:	9105      	str	r1, [sp, #20]
 8004be0:	e7c4      	b.n	8004b6c <_svfiprintf_r+0x130>
 8004be2:	4604      	mov	r4, r0
 8004be4:	2301      	movs	r3, #1
 8004be6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bea:	e7f0      	b.n	8004bce <_svfiprintf_r+0x192>
 8004bec:	ab03      	add	r3, sp, #12
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	462a      	mov	r2, r5
 8004bf2:	4638      	mov	r0, r7
 8004bf4:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <_svfiprintf_r+0x1f8>)
 8004bf6:	a904      	add	r1, sp, #16
 8004bf8:	f3af 8000 	nop.w
 8004bfc:	1c42      	adds	r2, r0, #1
 8004bfe:	4606      	mov	r6, r0
 8004c00:	d1d6      	bne.n	8004bb0 <_svfiprintf_r+0x174>
 8004c02:	89ab      	ldrh	r3, [r5, #12]
 8004c04:	065b      	lsls	r3, r3, #25
 8004c06:	f53f af2d 	bmi.w	8004a64 <_svfiprintf_r+0x28>
 8004c0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c0c:	b01d      	add	sp, #116	; 0x74
 8004c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c12:	ab03      	add	r3, sp, #12
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	462a      	mov	r2, r5
 8004c18:	4638      	mov	r0, r7
 8004c1a:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <_svfiprintf_r+0x1f8>)
 8004c1c:	a904      	add	r1, sp, #16
 8004c1e:	f000 f87d 	bl	8004d1c <_printf_i>
 8004c22:	e7eb      	b.n	8004bfc <_svfiprintf_r+0x1c0>
 8004c24:	0800560a 	.word	0x0800560a
 8004c28:	08005610 	.word	0x08005610
 8004c2c:	08005614 	.word	0x08005614
 8004c30:	00000000 	.word	0x00000000
 8004c34:	08004989 	.word	0x08004989

08004c38 <_printf_common>:
 8004c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	4699      	mov	r9, r3
 8004c40:	688a      	ldr	r2, [r1, #8]
 8004c42:	690b      	ldr	r3, [r1, #16]
 8004c44:	4607      	mov	r7, r0
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bfb8      	it	lt
 8004c4a:	4613      	movlt	r3, r2
 8004c4c:	6033      	str	r3, [r6, #0]
 8004c4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c52:	460c      	mov	r4, r1
 8004c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c58:	b10a      	cbz	r2, 8004c5e <_printf_common+0x26>
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	6033      	str	r3, [r6, #0]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	0699      	lsls	r1, r3, #26
 8004c62:	bf42      	ittt	mi
 8004c64:	6833      	ldrmi	r3, [r6, #0]
 8004c66:	3302      	addmi	r3, #2
 8004c68:	6033      	strmi	r3, [r6, #0]
 8004c6a:	6825      	ldr	r5, [r4, #0]
 8004c6c:	f015 0506 	ands.w	r5, r5, #6
 8004c70:	d106      	bne.n	8004c80 <_printf_common+0x48>
 8004c72:	f104 0a19 	add.w	sl, r4, #25
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	6832      	ldr	r2, [r6, #0]
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dc2b      	bgt.n	8004cd8 <_printf_common+0xa0>
 8004c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c84:	1e13      	subs	r3, r2, #0
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	bf18      	it	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	0692      	lsls	r2, r2, #26
 8004c8e:	d430      	bmi.n	8004cf2 <_printf_common+0xba>
 8004c90:	4649      	mov	r1, r9
 8004c92:	4638      	mov	r0, r7
 8004c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c98:	47c0      	blx	r8
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d023      	beq.n	8004ce6 <_printf_common+0xae>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	6922      	ldr	r2, [r4, #16]
 8004ca2:	f003 0306 	and.w	r3, r3, #6
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	bf14      	ite	ne
 8004caa:	2500      	movne	r5, #0
 8004cac:	6833      	ldreq	r3, [r6, #0]
 8004cae:	f04f 0600 	mov.w	r6, #0
 8004cb2:	bf08      	it	eq
 8004cb4:	68e5      	ldreq	r5, [r4, #12]
 8004cb6:	f104 041a 	add.w	r4, r4, #26
 8004cba:	bf08      	it	eq
 8004cbc:	1aed      	subeq	r5, r5, r3
 8004cbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cc2:	bf08      	it	eq
 8004cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	bfc4      	itt	gt
 8004ccc:	1a9b      	subgt	r3, r3, r2
 8004cce:	18ed      	addgt	r5, r5, r3
 8004cd0:	42b5      	cmp	r5, r6
 8004cd2:	d11a      	bne.n	8004d0a <_printf_common+0xd2>
 8004cd4:	2000      	movs	r0, #0
 8004cd6:	e008      	b.n	8004cea <_printf_common+0xb2>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4652      	mov	r2, sl
 8004cdc:	4649      	mov	r1, r9
 8004cde:	4638      	mov	r0, r7
 8004ce0:	47c0      	blx	r8
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	d103      	bne.n	8004cee <_printf_common+0xb6>
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cee:	3501      	adds	r5, #1
 8004cf0:	e7c1      	b.n	8004c76 <_printf_common+0x3e>
 8004cf2:	2030      	movs	r0, #48	; 0x30
 8004cf4:	18e1      	adds	r1, r4, r3
 8004cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d00:	4422      	add	r2, r4
 8004d02:	3302      	adds	r3, #2
 8004d04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d08:	e7c2      	b.n	8004c90 <_printf_common+0x58>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4622      	mov	r2, r4
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4638      	mov	r0, r7
 8004d12:	47c0      	blx	r8
 8004d14:	3001      	adds	r0, #1
 8004d16:	d0e6      	beq.n	8004ce6 <_printf_common+0xae>
 8004d18:	3601      	adds	r6, #1
 8004d1a:	e7d9      	b.n	8004cd0 <_printf_common+0x98>

08004d1c <_printf_i>:
 8004d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	7e0f      	ldrb	r7, [r1, #24]
 8004d22:	4691      	mov	r9, r2
 8004d24:	2f78      	cmp	r7, #120	; 0x78
 8004d26:	4680      	mov	r8, r0
 8004d28:	460c      	mov	r4, r1
 8004d2a:	469a      	mov	sl, r3
 8004d2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d32:	d807      	bhi.n	8004d44 <_printf_i+0x28>
 8004d34:	2f62      	cmp	r7, #98	; 0x62
 8004d36:	d80a      	bhi.n	8004d4e <_printf_i+0x32>
 8004d38:	2f00      	cmp	r7, #0
 8004d3a:	f000 80d5 	beq.w	8004ee8 <_printf_i+0x1cc>
 8004d3e:	2f58      	cmp	r7, #88	; 0x58
 8004d40:	f000 80c1 	beq.w	8004ec6 <_printf_i+0x1aa>
 8004d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d4c:	e03a      	b.n	8004dc4 <_printf_i+0xa8>
 8004d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d52:	2b15      	cmp	r3, #21
 8004d54:	d8f6      	bhi.n	8004d44 <_printf_i+0x28>
 8004d56:	a101      	add	r1, pc, #4	; (adr r1, 8004d5c <_printf_i+0x40>)
 8004d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d5c:	08004db5 	.word	0x08004db5
 8004d60:	08004dc9 	.word	0x08004dc9
 8004d64:	08004d45 	.word	0x08004d45
 8004d68:	08004d45 	.word	0x08004d45
 8004d6c:	08004d45 	.word	0x08004d45
 8004d70:	08004d45 	.word	0x08004d45
 8004d74:	08004dc9 	.word	0x08004dc9
 8004d78:	08004d45 	.word	0x08004d45
 8004d7c:	08004d45 	.word	0x08004d45
 8004d80:	08004d45 	.word	0x08004d45
 8004d84:	08004d45 	.word	0x08004d45
 8004d88:	08004ecf 	.word	0x08004ecf
 8004d8c:	08004df5 	.word	0x08004df5
 8004d90:	08004e89 	.word	0x08004e89
 8004d94:	08004d45 	.word	0x08004d45
 8004d98:	08004d45 	.word	0x08004d45
 8004d9c:	08004ef1 	.word	0x08004ef1
 8004da0:	08004d45 	.word	0x08004d45
 8004da4:	08004df5 	.word	0x08004df5
 8004da8:	08004d45 	.word	0x08004d45
 8004dac:	08004d45 	.word	0x08004d45
 8004db0:	08004e91 	.word	0x08004e91
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	1d1a      	adds	r2, r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	602a      	str	r2, [r5, #0]
 8004dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0a0      	b.n	8004f0a <_printf_i+0x1ee>
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	682b      	ldr	r3, [r5, #0]
 8004dcc:	0607      	lsls	r7, r0, #24
 8004dce:	f103 0104 	add.w	r1, r3, #4
 8004dd2:	6029      	str	r1, [r5, #0]
 8004dd4:	d501      	bpl.n	8004dda <_printf_i+0xbe>
 8004dd6:	681e      	ldr	r6, [r3, #0]
 8004dd8:	e003      	b.n	8004de2 <_printf_i+0xc6>
 8004dda:	0646      	lsls	r6, r0, #25
 8004ddc:	d5fb      	bpl.n	8004dd6 <_printf_i+0xba>
 8004dde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004de2:	2e00      	cmp	r6, #0
 8004de4:	da03      	bge.n	8004dee <_printf_i+0xd2>
 8004de6:	232d      	movs	r3, #45	; 0x2d
 8004de8:	4276      	negs	r6, r6
 8004dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dee:	230a      	movs	r3, #10
 8004df0:	4859      	ldr	r0, [pc, #356]	; (8004f58 <_printf_i+0x23c>)
 8004df2:	e012      	b.n	8004e1a <_printf_i+0xfe>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	6820      	ldr	r0, [r4, #0]
 8004df8:	1d19      	adds	r1, r3, #4
 8004dfa:	6029      	str	r1, [r5, #0]
 8004dfc:	0605      	lsls	r5, r0, #24
 8004dfe:	d501      	bpl.n	8004e04 <_printf_i+0xe8>
 8004e00:	681e      	ldr	r6, [r3, #0]
 8004e02:	e002      	b.n	8004e0a <_printf_i+0xee>
 8004e04:	0641      	lsls	r1, r0, #25
 8004e06:	d5fb      	bpl.n	8004e00 <_printf_i+0xe4>
 8004e08:	881e      	ldrh	r6, [r3, #0]
 8004e0a:	2f6f      	cmp	r7, #111	; 0x6f
 8004e0c:	bf0c      	ite	eq
 8004e0e:	2308      	moveq	r3, #8
 8004e10:	230a      	movne	r3, #10
 8004e12:	4851      	ldr	r0, [pc, #324]	; (8004f58 <_printf_i+0x23c>)
 8004e14:	2100      	movs	r1, #0
 8004e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e1a:	6865      	ldr	r5, [r4, #4]
 8004e1c:	2d00      	cmp	r5, #0
 8004e1e:	bfa8      	it	ge
 8004e20:	6821      	ldrge	r1, [r4, #0]
 8004e22:	60a5      	str	r5, [r4, #8]
 8004e24:	bfa4      	itt	ge
 8004e26:	f021 0104 	bicge.w	r1, r1, #4
 8004e2a:	6021      	strge	r1, [r4, #0]
 8004e2c:	b90e      	cbnz	r6, 8004e32 <_printf_i+0x116>
 8004e2e:	2d00      	cmp	r5, #0
 8004e30:	d04b      	beq.n	8004eca <_printf_i+0x1ae>
 8004e32:	4615      	mov	r5, r2
 8004e34:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e38:	fb03 6711 	mls	r7, r3, r1, r6
 8004e3c:	5dc7      	ldrb	r7, [r0, r7]
 8004e3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e42:	4637      	mov	r7, r6
 8004e44:	42bb      	cmp	r3, r7
 8004e46:	460e      	mov	r6, r1
 8004e48:	d9f4      	bls.n	8004e34 <_printf_i+0x118>
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d10b      	bne.n	8004e66 <_printf_i+0x14a>
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	07de      	lsls	r6, r3, #31
 8004e52:	d508      	bpl.n	8004e66 <_printf_i+0x14a>
 8004e54:	6923      	ldr	r3, [r4, #16]
 8004e56:	6861      	ldr	r1, [r4, #4]
 8004e58:	4299      	cmp	r1, r3
 8004e5a:	bfde      	ittt	le
 8004e5c:	2330      	movle	r3, #48	; 0x30
 8004e5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e66:	1b52      	subs	r2, r2, r5
 8004e68:	6122      	str	r2, [r4, #16]
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4640      	mov	r0, r8
 8004e70:	f8cd a000 	str.w	sl, [sp]
 8004e74:	aa03      	add	r2, sp, #12
 8004e76:	f7ff fedf 	bl	8004c38 <_printf_common>
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d14a      	bne.n	8004f14 <_printf_i+0x1f8>
 8004e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e82:	b004      	add	sp, #16
 8004e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	f043 0320 	orr.w	r3, r3, #32
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	2778      	movs	r7, #120	; 0x78
 8004e92:	4832      	ldr	r0, [pc, #200]	; (8004f5c <_printf_i+0x240>)
 8004e94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	6829      	ldr	r1, [r5, #0]
 8004e9c:	061f      	lsls	r7, r3, #24
 8004e9e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ea2:	d402      	bmi.n	8004eaa <_printf_i+0x18e>
 8004ea4:	065f      	lsls	r7, r3, #25
 8004ea6:	bf48      	it	mi
 8004ea8:	b2b6      	uxthmi	r6, r6
 8004eaa:	07df      	lsls	r7, r3, #31
 8004eac:	bf48      	it	mi
 8004eae:	f043 0320 	orrmi.w	r3, r3, #32
 8004eb2:	6029      	str	r1, [r5, #0]
 8004eb4:	bf48      	it	mi
 8004eb6:	6023      	strmi	r3, [r4, #0]
 8004eb8:	b91e      	cbnz	r6, 8004ec2 <_printf_i+0x1a6>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	f023 0320 	bic.w	r3, r3, #32
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	e7a6      	b.n	8004e14 <_printf_i+0xf8>
 8004ec6:	4824      	ldr	r0, [pc, #144]	; (8004f58 <_printf_i+0x23c>)
 8004ec8:	e7e4      	b.n	8004e94 <_printf_i+0x178>
 8004eca:	4615      	mov	r5, r2
 8004ecc:	e7bd      	b.n	8004e4a <_printf_i+0x12e>
 8004ece:	682b      	ldr	r3, [r5, #0]
 8004ed0:	6826      	ldr	r6, [r4, #0]
 8004ed2:	1d18      	adds	r0, r3, #4
 8004ed4:	6961      	ldr	r1, [r4, #20]
 8004ed6:	6028      	str	r0, [r5, #0]
 8004ed8:	0635      	lsls	r5, r6, #24
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	d501      	bpl.n	8004ee2 <_printf_i+0x1c6>
 8004ede:	6019      	str	r1, [r3, #0]
 8004ee0:	e002      	b.n	8004ee8 <_printf_i+0x1cc>
 8004ee2:	0670      	lsls	r0, r6, #25
 8004ee4:	d5fb      	bpl.n	8004ede <_printf_i+0x1c2>
 8004ee6:	8019      	strh	r1, [r3, #0]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	4615      	mov	r5, r2
 8004eec:	6123      	str	r3, [r4, #16]
 8004eee:	e7bc      	b.n	8004e6a <_printf_i+0x14e>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	1d1a      	adds	r2, r3, #4
 8004ef6:	602a      	str	r2, [r5, #0]
 8004ef8:	681d      	ldr	r5, [r3, #0]
 8004efa:	6862      	ldr	r2, [r4, #4]
 8004efc:	4628      	mov	r0, r5
 8004efe:	f000 f859 	bl	8004fb4 <memchr>
 8004f02:	b108      	cbz	r0, 8004f08 <_printf_i+0x1ec>
 8004f04:	1b40      	subs	r0, r0, r5
 8004f06:	6060      	str	r0, [r4, #4]
 8004f08:	6863      	ldr	r3, [r4, #4]
 8004f0a:	6123      	str	r3, [r4, #16]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f12:	e7aa      	b.n	8004e6a <_printf_i+0x14e>
 8004f14:	462a      	mov	r2, r5
 8004f16:	4649      	mov	r1, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	6923      	ldr	r3, [r4, #16]
 8004f1c:	47d0      	blx	sl
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d0ad      	beq.n	8004e7e <_printf_i+0x162>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	079b      	lsls	r3, r3, #30
 8004f26:	d413      	bmi.n	8004f50 <_printf_i+0x234>
 8004f28:	68e0      	ldr	r0, [r4, #12]
 8004f2a:	9b03      	ldr	r3, [sp, #12]
 8004f2c:	4298      	cmp	r0, r3
 8004f2e:	bfb8      	it	lt
 8004f30:	4618      	movlt	r0, r3
 8004f32:	e7a6      	b.n	8004e82 <_printf_i+0x166>
 8004f34:	2301      	movs	r3, #1
 8004f36:	4632      	mov	r2, r6
 8004f38:	4649      	mov	r1, r9
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	47d0      	blx	sl
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d09d      	beq.n	8004e7e <_printf_i+0x162>
 8004f42:	3501      	adds	r5, #1
 8004f44:	68e3      	ldr	r3, [r4, #12]
 8004f46:	9903      	ldr	r1, [sp, #12]
 8004f48:	1a5b      	subs	r3, r3, r1
 8004f4a:	42ab      	cmp	r3, r5
 8004f4c:	dcf2      	bgt.n	8004f34 <_printf_i+0x218>
 8004f4e:	e7eb      	b.n	8004f28 <_printf_i+0x20c>
 8004f50:	2500      	movs	r5, #0
 8004f52:	f104 0619 	add.w	r6, r4, #25
 8004f56:	e7f5      	b.n	8004f44 <_printf_i+0x228>
 8004f58:	0800561b 	.word	0x0800561b
 8004f5c:	0800562c 	.word	0x0800562c

08004f60 <memmove>:
 8004f60:	4288      	cmp	r0, r1
 8004f62:	b510      	push	{r4, lr}
 8004f64:	eb01 0402 	add.w	r4, r1, r2
 8004f68:	d902      	bls.n	8004f70 <memmove+0x10>
 8004f6a:	4284      	cmp	r4, r0
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	d807      	bhi.n	8004f80 <memmove+0x20>
 8004f70:	1e43      	subs	r3, r0, #1
 8004f72:	42a1      	cmp	r1, r4
 8004f74:	d008      	beq.n	8004f88 <memmove+0x28>
 8004f76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f7e:	e7f8      	b.n	8004f72 <memmove+0x12>
 8004f80:	4601      	mov	r1, r0
 8004f82:	4402      	add	r2, r0
 8004f84:	428a      	cmp	r2, r1
 8004f86:	d100      	bne.n	8004f8a <memmove+0x2a>
 8004f88:	bd10      	pop	{r4, pc}
 8004f8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f92:	e7f7      	b.n	8004f84 <memmove+0x24>

08004f94 <_sbrk_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	2300      	movs	r3, #0
 8004f98:	4d05      	ldr	r5, [pc, #20]	; (8004fb0 <_sbrk_r+0x1c>)
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	f7fd f81a 	bl	8001fd8 <_sbrk>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_sbrk_r+0x1a>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_sbrk_r+0x1a>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20000780 	.word	0x20000780

08004fb4 <memchr>:
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	b510      	push	{r4, lr}
 8004fb8:	b2c9      	uxtb	r1, r1
 8004fba:	4402      	add	r2, r0
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	d101      	bne.n	8004fc6 <memchr+0x12>
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	e003      	b.n	8004fce <memchr+0x1a>
 8004fc6:	7804      	ldrb	r4, [r0, #0]
 8004fc8:	3301      	adds	r3, #1
 8004fca:	428c      	cmp	r4, r1
 8004fcc:	d1f6      	bne.n	8004fbc <memchr+0x8>
 8004fce:	bd10      	pop	{r4, pc}

08004fd0 <memcpy>:
 8004fd0:	440a      	add	r2, r1
 8004fd2:	4291      	cmp	r1, r2
 8004fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fd8:	d100      	bne.n	8004fdc <memcpy+0xc>
 8004fda:	4770      	bx	lr
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fe2:	4291      	cmp	r1, r2
 8004fe4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fe8:	d1f9      	bne.n	8004fde <memcpy+0xe>
 8004fea:	bd10      	pop	{r4, pc}

08004fec <_realloc_r>:
 8004fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ff0:	4680      	mov	r8, r0
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	460e      	mov	r6, r1
 8004ff6:	b921      	cbnz	r1, 8005002 <_realloc_r+0x16>
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffe:	f7ff bc37 	b.w	8004870 <_malloc_r>
 8005002:	b92a      	cbnz	r2, 8005010 <_realloc_r+0x24>
 8005004:	f7ff fbcc 	bl	80047a0 <_free_r>
 8005008:	4625      	mov	r5, r4
 800500a:	4628      	mov	r0, r5
 800500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005010:	f000 f81b 	bl	800504a <_malloc_usable_size_r>
 8005014:	4284      	cmp	r4, r0
 8005016:	4607      	mov	r7, r0
 8005018:	d802      	bhi.n	8005020 <_realloc_r+0x34>
 800501a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800501e:	d812      	bhi.n	8005046 <_realloc_r+0x5a>
 8005020:	4621      	mov	r1, r4
 8005022:	4640      	mov	r0, r8
 8005024:	f7ff fc24 	bl	8004870 <_malloc_r>
 8005028:	4605      	mov	r5, r0
 800502a:	2800      	cmp	r0, #0
 800502c:	d0ed      	beq.n	800500a <_realloc_r+0x1e>
 800502e:	42bc      	cmp	r4, r7
 8005030:	4622      	mov	r2, r4
 8005032:	4631      	mov	r1, r6
 8005034:	bf28      	it	cs
 8005036:	463a      	movcs	r2, r7
 8005038:	f7ff ffca 	bl	8004fd0 <memcpy>
 800503c:	4631      	mov	r1, r6
 800503e:	4640      	mov	r0, r8
 8005040:	f7ff fbae 	bl	80047a0 <_free_r>
 8005044:	e7e1      	b.n	800500a <_realloc_r+0x1e>
 8005046:	4635      	mov	r5, r6
 8005048:	e7df      	b.n	800500a <_realloc_r+0x1e>

0800504a <_malloc_usable_size_r>:
 800504a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800504e:	1f18      	subs	r0, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfbc      	itt	lt
 8005054:	580b      	ldrlt	r3, [r1, r0]
 8005056:	18c0      	addlt	r0, r0, r3
 8005058:	4770      	bx	lr
	...

0800505c <_init>:
 800505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800505e:	bf00      	nop
 8005060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005062:	bc08      	pop	{r3}
 8005064:	469e      	mov	lr, r3
 8005066:	4770      	bx	lr

08005068 <_fini>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr
