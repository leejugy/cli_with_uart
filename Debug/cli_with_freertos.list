
cli_with_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006470  08006470  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006470  08006470  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006470  08006470  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006478  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000750  20000060  080064d8  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  080064d8  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a761  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024a9  00000000  00000000  0002a82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009e0  00000000  00000000  0002ccd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000778  00000000  00000000  0002d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a5d  00000000  00000000  0002de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecc2  00000000  00000000  0004688d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c67  00000000  00000000  0005554f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002bec  00000000  00000000  000dd1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000dfda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c90 	.word	0x08005c90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005c90 	.word	0x08005c90

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_ADC1_Init+0x74>)
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <MX_ADC1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_ADC1_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000796:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007aa:	f002 fa11 	bl	8002bd0 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f001 ffb9 	bl	800272a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007ca:	f002 fb93 	bl	8002ef4 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f001 ffa9 	bl	800272a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000007c 	.word	0x2000007c
 80007e4:	40012400 	.word	0x40012400

080007e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_ADC_MspInit+0x6c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d121      	bne.n	800084c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_ADC_MspInit+0x74>)
 8000848:	f003 fa20 	bl	8003c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40012400 	.word	0x40012400
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_DMA_Init+0x38>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <MX_DMA_Init+0x38>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_DMA_Init+0x38>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200f      	movs	r0, #15
 8000884:	f002 fda1 	bl	80033ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000888:	200f      	movs	r0, #15
 800088a:	f002 fdba 	bl	8003402 <HAL_NVIC_EnableIRQ>

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_GPIO_Init+0x78>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_GPIO_Init+0x78>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_GPIO_Init+0x78>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_GPIO_Init+0x78>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <MX_GPIO_Init+0x78>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_GPIO_Init+0x78>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0x7c>)
 80008e8:	f003 fb54 	bl	8003f94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80008ec:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80008f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2302      	movs	r3, #2
 80008fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4619      	mov	r1, r3
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0x7c>)
 8000906:	f003 f9c1 	bl	8003c8c <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <string_to_num>:





uint32_t string_to_num(char *input_string, bool* is_number, type_nubmer num_type){
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4613      	mov	r3, r2
 8000928:	71fb      	strb	r3, [r7, #7]
    uint16_t length = strlen(input_string);
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff fc10 	bl	8000150 <strlen>
 8000930:	4603      	mov	r3, r0
 8000932:	827b      	strh	r3, [r7, #18]
    uint32_t ret = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    if (num_type == DEC){
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b0a      	cmp	r3, #10
 800093c:	d133      	bne.n	80009a6 <string_to_num+0x8a>
		for(uint32_t i=0;i<length;i++){
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	e02b      	b.n	800099c <string_to_num+0x80>
			if((input_string[i] >= (int)'0') && (input_string[i] <= (int) '9'))
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4413      	add	r3, r2
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b2f      	cmp	r3, #47	; 0x2f
 800094e:	d918      	bls.n	8000982 <string_to_num+0x66>
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b39      	cmp	r3, #57	; 0x39
 800095a:	d812      	bhi.n	8000982 <string_to_num+0x66>
			{
				*is_number=true;
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
				ret = input_string[i]-((int)'0') + ret * num_type;
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	440b      	add	r3, r1
 8000976:	3b30      	subs	r3, #48	; 0x30
 8000978:	61fb      	str	r3, [r7, #28]
		for(uint32_t i=0;i<length;i++){
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	3301      	adds	r3, #1
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	e00c      	b.n	800099c <string_to_num+0x80>
			}
			else if(input_string[i] == ' '){
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	4413      	add	r3, r2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b20      	cmp	r3, #32
 800098c:	d101      	bne.n	8000992 <string_to_num+0x76>
				return ret;
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	e078      	b.n	8000a84 <string_to_num+0x168>
			}
			else{
				*is_number=false;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
				return 0;
 8000998:	2300      	movs	r3, #0
 800099a:	e073      	b.n	8000a84 <string_to_num+0x168>
		for(uint32_t i=0;i<length;i++){
 800099c:	8a7b      	ldrh	r3, [r7, #18]
 800099e:	69ba      	ldr	r2, [r7, #24]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d3cf      	bcc.n	8000944 <string_to_num+0x28>
 80009a4:	e06d      	b.n	8000a82 <string_to_num+0x166>
			}
		}
    }
    else if (num_type == HEX){
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b10      	cmp	r3, #16
 80009aa:	d16a      	bne.n	8000a82 <string_to_num+0x166>
		for(uint32_t i=0;i<length;i++){
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	e063      	b.n	8000a7a <string_to_num+0x15e>
			if((input_string[i] >= (int)'0') && (input_string[i] <= (int) '9'))
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b2f      	cmp	r3, #47	; 0x2f
 80009bc:	d915      	bls.n	80009ea <string_to_num+0xce>
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b39      	cmp	r3, #57	; 0x39
 80009c8:	d80f      	bhi.n	80009ea <string_to_num+0xce>
			{
				*is_number=true;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	2201      	movs	r2, #1
 80009ce:	701a      	strb	r2, [r3, #0]
				ret = input_string[i]-((int)'0') + ret * num_type;
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	69fa      	ldr	r2, [r7, #28]
 80009de:	fb02 f303 	mul.w	r3, r2, r3
 80009e2:	440b      	add	r3, r1
 80009e4:	3b30      	subs	r3, #48	; 0x30
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	e044      	b.n	8000a74 <string_to_num+0x158>
			}
			else if((input_string[i] >= (int)'A') && (input_string[i] <= (int) 'F')){
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	4413      	add	r3, r2
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b40      	cmp	r3, #64	; 0x40
 80009f4:	d915      	bls.n	8000a22 <string_to_num+0x106>
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	4413      	add	r3, r2
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b46      	cmp	r3, #70	; 0x46
 8000a00:	d80f      	bhi.n	8000a22 <string_to_num+0x106>
				*is_number=true;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	2201      	movs	r2, #1
 8000a06:	701a      	strb	r2, [r3, #0]
				ret = input_string[i]-55 + ret * num_type;
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	fb02 f303 	mul.w	r3, r2, r3
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3b37      	subs	r3, #55	; 0x37
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	e028      	b.n	8000a74 <string_to_num+0x158>
			}
			else if((input_string[i] >= (int)'a') && (input_string[i] <= (int) 'f')){
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b60      	cmp	r3, #96	; 0x60
 8000a2c:	d915      	bls.n	8000a5a <string_to_num+0x13e>
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	697b      	ldr	r3, [r7, #20]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b66      	cmp	r3, #102	; 0x66
 8000a38:	d80f      	bhi.n	8000a5a <string_to_num+0x13e>
				*is_number=true;
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	701a      	strb	r2, [r3, #0]
				ret = input_string[i]-87 + ret * num_type;
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	4413      	add	r3, r2
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	69fa      	ldr	r2, [r7, #28]
 8000a4e:	fb02 f303 	mul.w	r3, r2, r3
 8000a52:	440b      	add	r3, r1
 8000a54:	3b57      	subs	r3, #87	; 0x57
 8000a56:	61fb      	str	r3, [r7, #28]
 8000a58:	e00c      	b.n	8000a74 <string_to_num+0x158>
			}
			else if(input_string[i] == ' '){
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b20      	cmp	r3, #32
 8000a64:	d101      	bne.n	8000a6a <string_to_num+0x14e>
				return ret;
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	e00c      	b.n	8000a84 <string_to_num+0x168>
			}
			else{
				*is_number=false;
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
				return 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	e007      	b.n	8000a84 <string_to_num+0x168>
		for(uint32_t i=0;i<length;i++){
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	8a7b      	ldrh	r3, [r7, #18]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d397      	bcc.n	80009b2 <string_to_num+0x96>
			}
		}
    }
    return ret;
 8000a82:	69fb      	ldr	r3, [r7, #28]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <flash_read>:

void flash_read(uint32_t address,uint32_t bit_num){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	uint8_t *data=(uint8_t *)address;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60bb      	str	r3, [r7, #8]
	uart_send(1,"\n");
 8000a9a:	490f      	ldr	r1, [pc, #60]	; (8000ad8 <flash_read+0x4c>)
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f000 fc73 	bl	8001388 <uart_send>
	for(uint32_t i=0;i<bit_num;i++){
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	e00e      	b.n	8000ac6 <flash_read+0x3a>
		uart_send(1,"data adress : 0x%08X, data : 0x%02X\n",address+i,data[i]);
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	18d1      	adds	r1, r2, r3
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	460a      	mov	r2, r1
 8000ab8:	4908      	ldr	r1, [pc, #32]	; (8000adc <flash_read+0x50>)
 8000aba:	2001      	movs	r0, #1
 8000abc:	f000 fc64 	bl	8001388 <uart_send>
	for(uint32_t i=0;i<bit_num;i++){
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d3ec      	bcc.n	8000aa8 <flash_read+0x1c>
	}
}
 8000ace:	bf00      	nop
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	08005ca8 	.word	0x08005ca8
 8000adc:	08005cac 	.word	0x08005cac

08000ae0 <flash_erase>:

bool flash_erase(uint32_t start_address,uint8_t data_len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	70fb      	strb	r3, [r7, #3]
  uint32_t NbOfPages = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t start_page = (start_address - F103_RB_START_ADD)/FLASH_PAGE_SIZE;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000af6:	0a9b      	lsrs	r3, r3, #10
 8000af8:	623b      	str	r3, [r7, #32]
  start_page = start_page * 1024 + F103_RB_START_ADD;
 8000afa:	6a3b      	ldr	r3, [r7, #32]
 8000afc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000b00:	029b      	lsls	r3, r3, #10
 8000b02:	623b      	str	r3, [r7, #32]
  uint32_t PageError = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef eraseinitstruct;

  /* Get the number of sector to erase from 1st sector */
  NbOfPages =
    (data_len / FLASH_PAGE_SIZE) + 1;
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	0a9b      	lsrs	r3, r3, #10
  NbOfPages =
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  eraseinitstruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  eraseinitstruct.PageAddress = start_page;
 8000b14:	6a3b      	ldr	r3, [r7, #32]
 8000b16:	613b      	str	r3, [r7, #16]
  eraseinitstruct.NbPages = NbOfPages;
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	617b      	str	r3, [r7, #20]
  HAL_FLASH_Unlock();
 8000b1c:	f002 ff26 	bl	800396c <HAL_FLASH_Unlock>
  status = HAL_FLASHEx_Erase(&eraseinitstruct, &PageError);
 8000b20:	f107 0218 	add.w	r2, r7, #24
 8000b24:	f107 0308 	add.w	r3, r7, #8
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 f806 	bl	8003b3c <HAL_FLASHEx_Erase>
 8000b30:	4603      	mov	r3, r0
 8000b32:	77fb      	strb	r3, [r7, #31]
  HAL_FLASH_Lock();
 8000b34:	f002 ff40 	bl	80039b8 <HAL_FLASH_Lock>
  if (status != HAL_OK)
 8000b38:	7ffb      	ldrb	r3, [r7, #31]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <flash_erase+0x62>
  {
    return false;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <flash_erase+0x64>
  }
  return true;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <flash_write>:

bool flash_write(uint32_t start_address,uint32_t data_len,uint8_t *data){
 8000b4c:	b5b0      	push	{r4, r5, r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
	bool ret = false;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	75fb      	strb	r3, [r7, #23]
	flash_erase(start_address,data_len);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f7ff ffbc 	bl	8000ae0 <flash_erase>
	HAL_FLASH_Unlock();
 8000b68:	f002 ff00 	bl	800396c <HAL_FLASH_Unlock>
	uint16_t send_data=0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	82bb      	strh	r3, [r7, #20]
	for(uint32_t i=0;i<data_len;i+=2){
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	e02b      	b.n	8000bce <flash_write+0x82>
		send_data+=data[i+1]<<8;
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	8abb      	ldrh	r3, [r7, #20]
 8000b88:	4413      	add	r3, r2
 8000b8a:	82bb      	strh	r3, [r7, #20]
		send_data+=data[i];
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	8abb      	ldrh	r3, [r7, #20]
 8000b98:	4413      	add	r3, r2
 8000b9a:	82bb      	strh	r3, [r7, #20]
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,start_address+i,(uint16_t)send_data)==HAL_OK){
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	18d1      	adds	r1, r2, r3
 8000ba2:	8abb      	ldrh	r3, [r7, #20]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	461c      	mov	r4, r3
 8000ba8:	4615      	mov	r5, r2
 8000baa:	4622      	mov	r2, r4
 8000bac:	462b      	mov	r3, r5
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f002 fe6c 	bl	800388c <HAL_FLASH_Program>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d104      	bne.n	8000bc4 <flash_write+0x78>
			ret = true;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	75fb      	strb	r3, [r7, #23]
			send_data=0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	82bb      	strh	r3, [r7, #20]
 8000bc2:	e001      	b.n	8000bc8 <flash_write+0x7c>
		}
		else{
			ret=false;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i=0;i<data_len;i+=2){
 8000bc8:	693b      	ldr	r3, [r7, #16]
 8000bca:	3302      	adds	r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d3cf      	bcc.n	8000b76 <flash_write+0x2a>
		}
	}
	HAL_FLASH_Lock();
 8000bd6:	f002 feef 	bl	80039b8 <HAL_FLASH_Lock>
	return ret;
 8000bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bdb0      	pop	{r4, r5, r7, pc}

08000be4 <chartoint>:

uint8_t chartoint(uint8_t ascii){
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	return ascii-48;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	3b30      	subs	r3, #48	; 0x30
 8000bf2:	b2db      	uxtb	r3, r3
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
	...

08000c00 <uart_send_1bit>:

void uart_send_1bit(uint8_t uart_num,uint8_t *send_1bit_buffer){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
	if(uart_num==1){
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d106      	bne.n	8000c20 <uart_send_1bit+0x20>
		HAL_UART_Transmit(&huart1,send_1bit_buffer,1,100);
 8000c12:	2364      	movs	r3, #100	; 0x64
 8000c14:	2201      	movs	r2, #1
 8000c16:	6839      	ldr	r1, [r7, #0]
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <uart_send_1bit+0x3c>)
 8000c1a:	f003 ff03 	bl	8004a24 <HAL_UART_Transmit>
	}
	else if(uart_num==2){
		HAL_UART_Transmit(&huart2,send_1bit_buffer,1,100);
	}
}
 8000c1e:	e008      	b.n	8000c32 <uart_send_1bit+0x32>
	else if(uart_num==2){
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d105      	bne.n	8000c32 <uart_send_1bit+0x32>
		HAL_UART_Transmit(&huart2,send_1bit_buffer,1,100);
 8000c26:	2364      	movs	r3, #100	; 0x64
 8000c28:	2201      	movs	r2, #1
 8000c2a:	6839      	ldr	r1, [r7, #0]
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <uart_send_1bit+0x40>)
 8000c2e:	f003 fef9 	bl	8004a24 <HAL_UART_Transmit>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000570 	.word	0x20000570
 8000c40:	200005b8 	.word	0x200005b8

08000c44 <calculate_crc16>:

bool calculate_crc16(uint8_t *data, int length, bool *loop_do) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
    uint16_t crc = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < length; i++) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	e016      	b.n	8000c88 <calculate_crc16+0x44>
        crc = (crc << 8) ^ crc_table[((crc >> 8) ^ data[i]) & 0xFF];
 8000c5a:	8afb      	ldrh	r3, [r7, #22]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	8afb      	ldrh	r3, [r7, #22]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4618      	mov	r0, r3
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	68f9      	ldr	r1, [r7, #12]
 8000c6c:	440b      	add	r3, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4043      	eors	r3, r0
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	490f      	ldr	r1, [pc, #60]	; (8000cb4 <calculate_crc16+0x70>)
 8000c76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c7a:	b21b      	sxth	r3, r3
 8000c7c:	4053      	eors	r3, r2
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < length; i++) {
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	3301      	adds	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbe4      	blt.n	8000c5a <calculate_crc16+0x16>
    }
    if(crc!=0){
 8000c90:	8afb      	ldrh	r3, [r7, #22]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d008      	beq.n	8000ca8 <calculate_crc16+0x64>
    	uart_send(2,"CRC is incorrect!\n");
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <calculate_crc16+0x74>)
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f000 fb75 	bl	8001388 <uart_send>
    	*loop_do=false;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
    	return false;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e000      	b.n	8000caa <calculate_crc16+0x66>
    }
    return true;
 8000ca8:	2301      	movs	r3, #1
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	08006210 	.word	0x08006210
 8000cb8:	08005cd4 	.word	0x08005cd4

08000cbc <ymodem_transmit>:
void ymodem_transmit(){
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	; 0x50
 8000cc0:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart1);
 8000cc2:	48bc      	ldr	r0, [pc, #752]	; (8000fb4 <ymodem_transmit+0x2f8>)
 8000cc4:	f003 ff56 	bl	8004b74 <HAL_UART_DMAStop>
	UART_Start_Receive_DMA(&huart1,&rx_1bit,1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	49bb      	ldr	r1, [pc, #748]	; (8000fb8 <ymodem_transmit+0x2fc>)
 8000ccc:	48b9      	ldr	r0, [pc, #740]	; (8000fb4 <ymodem_transmit+0x2f8>)
 8000cce:	f004 f959 	bl	8004f84 <UART_Start_Receive_DMA>

	HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	; 0x64
 8000cd4:	f001 ff58 	bl	8002b88 <HAL_Delay>
	bool send_c_flag=true;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	bool first_send_eot=true;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	bool loop_do=true;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	uint8_t _1bit_buffer;
	uint32_t file_size=0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t file_index;
	uint8_t file_name[64];
	memset(file_name,0,64);
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2240      	movs	r2, #64	; 0x40
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 fbe5 	bl	80054c4 <memset>
	memset(rx_ymodem,0,1029);
 8000cfa:	f240 4205 	movw	r2, #1029	; 0x405
 8000cfe:	2100      	movs	r1, #0
 8000d00:	48ae      	ldr	r0, [pc, #696]	; (8000fbc <ymodem_transmit+0x300>)
 8000d02:	f004 fbdf 	bl	80054c4 <memset>
	rx_index=0;
 8000d06:	4bae      	ldr	r3, [pc, #696]	; (8000fc0 <ymodem_transmit+0x304>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	801a      	strh	r2, [r3, #0]

	uart_send(1,"\n");
 8000d0c:	49ad      	ldr	r1, [pc, #692]	; (8000fc4 <ymodem_transmit+0x308>)
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f000 fb3a 	bl	8001388 <uart_send>
	while(loop_do){
 8000d14:	e144      	b.n	8000fa0 <ymodem_transmit+0x2e4>
		uart1_send_flag=true;
 8000d16:	4bac      	ldr	r3, [pc, #688]	; (8000fc8 <ymodem_transmit+0x30c>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
		if(send_c_flag){
 8000d1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d014      	beq.n	8000d4e <ymodem_transmit+0x92>
			HAL_Delay(100);
 8000d24:	2064      	movs	r0, #100	; 0x64
 8000d26:	f001 ff2f 	bl	8002b88 <HAL_Delay>
			_1bit_buffer='C';
 8000d2a:	2343      	movs	r3, #67	; 0x43
 8000d2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000d30:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000d34:	4619      	mov	r1, r3
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff ff62 	bl	8000c00 <uart_send_1bit>
			_1bit_buffer='C';
 8000d3c:	2343      	movs	r3, #67	; 0x43
 8000d3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000d42:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000d46:	4619      	mov	r1, r3
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff ff59 	bl	8000c00 <uart_send_1bit>
		}
		if(rx_ymodem[0]==SOH){
 8000d4e:	4b9b      	ldr	r3, [pc, #620]	; (8000fbc <ymodem_transmit+0x300>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d16e      	bne.n	8000e34 <ymodem_transmit+0x178>
			HAL_Delay(10);
 8000d56:	200a      	movs	r0, #10
 8000d58:	f001 ff16 	bl	8002b88 <HAL_Delay>
			for(file_index=3;file_index<128;file_index++){
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d62:	e01b      	b.n	8000d9c <ymodem_transmit+0xe0>
				file_name[file_index-3]=rx_ymodem[file_index];
 8000d64:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	4993      	ldr	r1, [pc, #588]	; (8000fbc <ymodem_transmit+0x300>)
 8000d70:	5c8a      	ldrb	r2, [r1, r2]
 8000d72:	3350      	adds	r3, #80	; 0x50
 8000d74:	443b      	add	r3, r7
 8000d76:	f803 2c50 	strb.w	r2, [r3, #-80]
				if(rx_ymodem[file_index]==0){
 8000d7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d7e:	4a8f      	ldr	r2, [pc, #572]	; (8000fbc <ymodem_transmit+0x300>)
 8000d80:	5cd3      	ldrb	r3, [r2, r3]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d105      	bne.n	8000d92 <ymodem_transmit+0xd6>
					file_index++;
 8000d86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
 8000d90:	e008      	b.n	8000da4 <ymodem_transmit+0xe8>
			for(file_index=3;file_index<128;file_index++){
 8000d92:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000d96:	3301      	adds	r3, #1
 8000d98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	dadf      	bge.n	8000d64 <ymodem_transmit+0xa8>
				}
			}
			for(;file_index<128;file_index++){
 8000da4:	e01a      	b.n	8000ddc <ymodem_transmit+0x120>
				if(rx_ymodem[file_index]==' '){
 8000da6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000daa:	4a84      	ldr	r2, [pc, #528]	; (8000fbc <ymodem_transmit+0x300>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	2b20      	cmp	r3, #32
 8000db0:	d019      	beq.n	8000de6 <ymodem_transmit+0x12a>
					break;
				}
				else{
					file_size=chartoint(rx_ymodem[file_index])+file_size*10;
 8000db2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000db6:	4a81      	ldr	r2, [pc, #516]	; (8000fbc <ymodem_transmit+0x300>)
 8000db8:	5cd3      	ldrb	r3, [r2, r3]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff12 	bl	8000be4 <chartoint>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4413      	add	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	440b      	add	r3, r1
 8000dd0:	64bb      	str	r3, [r7, #72]	; 0x48
			for(;file_index<128;file_index++){
 8000dd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ddc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dae0      	bge.n	8000da6 <ymodem_transmit+0xea>
 8000de4:	e000      	b.n	8000de8 <ymodem_transmit+0x12c>
					break;
 8000de6:	bf00      	nop
				}
			}
			calculate_crc16(rx_ymodem+1027, 2, &loop_do);
 8000de8:	4878      	ldr	r0, [pc, #480]	; (8000fcc <ymodem_transmit+0x310>)
 8000dea:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000dee:	461a      	mov	r2, r3
 8000df0:	2102      	movs	r1, #2
 8000df2:	f7ff ff27 	bl	8000c44 <calculate_crc16>

			memset(rx_ymodem,0,1029);
 8000df6:	f240 4205 	movw	r2, #1029	; 0x405
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	486f      	ldr	r0, [pc, #444]	; (8000fbc <ymodem_transmit+0x300>)
 8000dfe:	f004 fb61 	bl	80054c4 <memset>
			rx_index=0;
 8000e02:	4b6f      	ldr	r3, [pc, #444]	; (8000fc0 <ymodem_transmit+0x304>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	801a      	strh	r2, [r3, #0]

			_1bit_buffer=ACK;
 8000e08:	2306      	movs	r3, #6
 8000e0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000e0e:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000e12:	4619      	mov	r1, r3
 8000e14:	2001      	movs	r0, #1
 8000e16:	f7ff fef3 	bl	8000c00 <uart_send_1bit>
			_1bit_buffer='C';
 8000e1a:	2343      	movs	r3, #67	; 0x43
 8000e1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000e20:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000e24:	4619      	mov	r1, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff feea 	bl	8000c00 <uart_send_1bit>
			send_c_flag=false;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000e32:	e0b5      	b.n	8000fa0 <ymodem_transmit+0x2e4>
		}
		else if(rx_1bit==EOT && first_send_eot){
 8000e34:	4b60      	ldr	r3, [pc, #384]	; (8000fb8 <ymodem_transmit+0x2fc>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d110      	bne.n	8000e5e <ymodem_transmit+0x1a2>
 8000e3c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d00c      	beq.n	8000e5e <ymodem_transmit+0x1a2>
			_1bit_buffer=NAK;
 8000e44:	2315      	movs	r3, #21
 8000e46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000e4a:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fed5 	bl	8000c00 <uart_send_1bit>
			first_send_eot=false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000e5c:	e0a0      	b.n	8000fa0 <ymodem_transmit+0x2e4>
		}
		else if(rx_1bit==EOT && !first_send_eot){
 8000e5e:	4b56      	ldr	r3, [pc, #344]	; (8000fb8 <ymodem_transmit+0x2fc>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d162      	bne.n	8000f2c <ymodem_transmit+0x270>
 8000e66:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000e6a:	f083 0301 	eor.w	r3, r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d05b      	beq.n	8000f2c <ymodem_transmit+0x270>
			first_send_eot=true;
 8000e74:	2301      	movs	r3, #1
 8000e76:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			_1bit_buffer=ACK;
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000e80:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000e84:	4619      	mov	r1, r3
 8000e86:	2001      	movs	r0, #1
 8000e88:	f7ff feba 	bl	8000c00 <uart_send_1bit>
			_1bit_buffer='C';
 8000e8c:	2343      	movs	r3, #67	; 0x43
 8000e8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000e92:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000e96:	4619      	mov	r1, r3
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff feb1 	bl	8000c00 <uart_send_1bit>

			_1bit_buffer=ACK;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000ea4:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f7ff fea8 	bl	8000c00 <uart_send_1bit>
			_1bit_buffer='C';
 8000eb0:	2343      	movs	r3, #67	; 0x43
 8000eb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000eb6:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000eba:	4619      	mov	r1, r3
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fe9f 	bl	8000c00 <uart_send_1bit>

			loop_do=false;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			uart1_send_flag=false;
 8000ec8:	4b3f      	ldr	r3, [pc, #252]	; (8000fc8 <ymodem_transmit+0x30c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
			rx_1bit=0;
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <ymodem_transmit+0x2fc>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

			uart_send(2,"\n+++++++++++++++++++++++++++++++++++++++++\n");
 8000ed4:	493e      	ldr	r1, [pc, #248]	; (8000fd0 <ymodem_transmit+0x314>)
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f000 fa56 	bl	8001388 <uart_send>
			uart_send(2,"\nsend_complete!\n");
 8000edc:	493d      	ldr	r1, [pc, #244]	; (8000fd4 <ymodem_transmit+0x318>)
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f000 fa52 	bl	8001388 <uart_send>
			uart_send(2,"INFO)\nfile name : ");
 8000ee4:	493c      	ldr	r1, [pc, #240]	; (8000fd8 <ymodem_transmit+0x31c>)
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f000 fa4e 	bl	8001388 <uart_send>
			uart_send(2,"%s",file_name);
 8000eec:	463b      	mov	r3, r7
 8000eee:	461a      	mov	r2, r3
 8000ef0:	493a      	ldr	r1, [pc, #232]	; (8000fdc <ymodem_transmit+0x320>)
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f000 fa48 	bl	8001388 <uart_send>
			uart_send(2,"\n");
 8000ef8:	4932      	ldr	r1, [pc, #200]	; (8000fc4 <ymodem_transmit+0x308>)
 8000efa:	2002      	movs	r0, #2
 8000efc:	f000 fa44 	bl	8001388 <uart_send>
			uart_send(2,"file size : ");
 8000f00:	4937      	ldr	r1, [pc, #220]	; (8000fe0 <ymodem_transmit+0x324>)
 8000f02:	2002      	movs	r0, #2
 8000f04:	f000 fa40 	bl	8001388 <uart_send>
			uart_send(2,"%lu",file_size);
 8000f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f0a:	4936      	ldr	r1, [pc, #216]	; (8000fe4 <ymodem_transmit+0x328>)
 8000f0c:	2002      	movs	r0, #2
 8000f0e:	f000 fa3b 	bl	8001388 <uart_send>
			uart_send(2,"\n");
 8000f12:	492c      	ldr	r1, [pc, #176]	; (8000fc4 <ymodem_transmit+0x308>)
 8000f14:	2002      	movs	r0, #2
 8000f16:	f000 fa37 	bl	8001388 <uart_send>
			HAL_UART_DMAStop(&huart1);
 8000f1a:	4826      	ldr	r0, [pc, #152]	; (8000fb4 <ymodem_transmit+0x2f8>)
 8000f1c:	f003 fe2a 	bl	8004b74 <HAL_UART_DMAStop>
			UART_Start_Receive_DMA(&huart1,&command_tx[0],5);;
 8000f20:	2205      	movs	r2, #5
 8000f22:	4931      	ldr	r1, [pc, #196]	; (8000fe8 <ymodem_transmit+0x32c>)
 8000f24:	4823      	ldr	r0, [pc, #140]	; (8000fb4 <ymodem_transmit+0x2f8>)
 8000f26:	f004 f82d 	bl	8004f84 <UART_Start_Receive_DMA>
 8000f2a:	e039      	b.n	8000fa0 <ymodem_transmit+0x2e4>
		}
		else if(rx_ymodem[0]==STX){
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <ymodem_transmit+0x300>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d135      	bne.n	8000fa0 <ymodem_transmit+0x2e4>
			HAL_Delay(10);
 8000f34:	200a      	movs	r0, #10
 8000f36:	f001 fe27 	bl	8002b88 <HAL_Delay>
			calculate_crc16(rx_ymodem+1027, 2, &loop_do);
 8000f3a:	4824      	ldr	r0, [pc, #144]	; (8000fcc <ymodem_transmit+0x310>)
 8000f3c:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8000f40:	461a      	mov	r2, r3
 8000f42:	2102      	movs	r1, #2
 8000f44:	f7ff fe7e 	bl	8000c44 <calculate_crc16>
			/*buffer send_occur*/
			for(uint16_t i=3;i<=1026;i++){
 8000f48:	2303      	movs	r3, #3
 8000f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000f4e:	e00c      	b.n	8000f6a <ymodem_transmit+0x2ae>
				uart_send_1bit(2,&rx_ymodem[i]);
 8000f50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000f54:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <ymodem_transmit+0x300>)
 8000f56:	4413      	add	r3, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f7ff fe50 	bl	8000c00 <uart_send_1bit>
			for(uint16_t i=3;i<=1026;i++){
 8000f60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000f64:	3301      	adds	r3, #1
 8000f66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000f6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000f6e:	f240 4202 	movw	r2, #1026	; 0x402
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d9ec      	bls.n	8000f50 <ymodem_transmit+0x294>
			}
			memset(rx_ymodem,0,1029);
 8000f76:	f240 4205 	movw	r2, #1029	; 0x405
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	480f      	ldr	r0, [pc, #60]	; (8000fbc <ymodem_transmit+0x300>)
 8000f7e:	f004 faa1 	bl	80054c4 <memset>
			rx_index=0;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <ymodem_transmit+0x304>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	801a      	strh	r2, [r3, #0]
			_1bit_buffer=ACK;
 8000f88:	2306      	movs	r3, #6
 8000f8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8000f8e:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8000f92:	4619      	mov	r1, r3
 8000f94:	2001      	movs	r0, #1
 8000f96:	f7ff fe33 	bl	8000c00 <uart_send_1bit>
			send_c_flag=false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(loop_do){
 8000fa0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f47f aeb6 	bne.w	8000d16 <ymodem_transmit+0x5a>
		  }
	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3750      	adds	r7, #80	; 0x50
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000570 	.word	0x20000570
 8000fb8:	20000565 	.word	0x20000565
 8000fbc:	20000160 	.word	0x20000160
 8000fc0:	20000566 	.word	0x20000566
 8000fc4:	08005ca8 	.word	0x08005ca8
 8000fc8:	20000568 	.word	0x20000568
 8000fcc:	20000563 	.word	0x20000563
 8000fd0:	08005ce8 	.word	0x08005ce8
 8000fd4:	08005d14 	.word	0x08005d14
 8000fd8:	08005d28 	.word	0x08005d28
 8000fdc:	08005d3c 	.word	0x08005d3c
 8000fe0:	08005d40 	.word	0x08005d40
 8000fe4:	08005d50 	.word	0x08005d50
 8000fe8:	200000ac 	.word	0x200000ac

08000fec <ymodem_fw_update>:

void ymodem_fw_update(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart1);
 8000ff2:	48bc      	ldr	r0, [pc, #752]	; (80012e4 <ymodem_fw_update+0x2f8>)
 8000ff4:	f003 fdbe 	bl	8004b74 <HAL_UART_DMAStop>
	UART_Start_Receive_DMA(&huart1,&rx_1bit,1);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	49bb      	ldr	r1, [pc, #748]	; (80012e8 <ymodem_fw_update+0x2fc>)
 8000ffc:	48b9      	ldr	r0, [pc, #740]	; (80012e4 <ymodem_fw_update+0x2f8>)
 8000ffe:	f003 ffc1 	bl	8004f84 <UART_Start_Receive_DMA>

	HAL_Delay(100);
 8001002:	2064      	movs	r0, #100	; 0x64
 8001004:	f001 fdc0 	bl	8002b88 <HAL_Delay>
	bool send_c_flag=true;
 8001008:	2301      	movs	r3, #1
 800100a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	bool first_send_eot=true;
 800100e:	2301      	movs	r3, #1
 8001010:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	bool loop_do=true;
 8001014:	2301      	movs	r3, #1
 8001016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	uint8_t _1bit_buffer;
	uint32_t file_size=0;
 800101a:	2300      	movs	r3, #0
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t file_index;
	uint8_t file_name[64];
	memset(file_name,0,64);
 800101e:	463b      	mov	r3, r7
 8001020:	2240      	movs	r2, #64	; 0x40
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f004 fa4d 	bl	80054c4 <memset>
	memset(rx_ymodem,0,1029);
 800102a:	f240 4205 	movw	r2, #1029	; 0x405
 800102e:	2100      	movs	r1, #0
 8001030:	48ae      	ldr	r0, [pc, #696]	; (80012ec <ymodem_fw_update+0x300>)
 8001032:	f004 fa47 	bl	80054c4 <memset>
	rx_index=0;
 8001036:	4bae      	ldr	r3, [pc, #696]	; (80012f0 <ymodem_fw_update+0x304>)
 8001038:	2200      	movs	r2, #0
 800103a:	801a      	strh	r2, [r3, #0]

	uart_send(1,"\n");
 800103c:	49ad      	ldr	r1, [pc, #692]	; (80012f4 <ymodem_fw_update+0x308>)
 800103e:	2001      	movs	r0, #1
 8001040:	f000 f9a2 	bl	8001388 <uart_send>
	while(loop_do){
 8001044:	e144      	b.n	80012d0 <ymodem_fw_update+0x2e4>
		uart1_send_flag=true;
 8001046:	4bac      	ldr	r3, [pc, #688]	; (80012f8 <ymodem_fw_update+0x30c>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
		if(send_c_flag){
 800104c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001050:	2b00      	cmp	r3, #0
 8001052:	d014      	beq.n	800107e <ymodem_fw_update+0x92>
			HAL_Delay(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f001 fd97 	bl	8002b88 <HAL_Delay>
			_1bit_buffer='C';
 800105a:	2343      	movs	r3, #67	; 0x43
 800105c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8001060:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001064:	4619      	mov	r1, r3
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff fdca 	bl	8000c00 <uart_send_1bit>
			_1bit_buffer='C';
 800106c:	2343      	movs	r3, #67	; 0x43
 800106e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8001072:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001076:	4619      	mov	r1, r3
 8001078:	2001      	movs	r0, #1
 800107a:	f7ff fdc1 	bl	8000c00 <uart_send_1bit>
		}
		if(rx_ymodem[0]==SOH){
 800107e:	4b9b      	ldr	r3, [pc, #620]	; (80012ec <ymodem_fw_update+0x300>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d16e      	bne.n	8001164 <ymodem_fw_update+0x178>
			HAL_Delay(10);
 8001086:	200a      	movs	r0, #10
 8001088:	f001 fd7e 	bl	8002b88 <HAL_Delay>
			for(file_index=3;file_index<128;file_index++){
 800108c:	2303      	movs	r3, #3
 800108e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001092:	e01b      	b.n	80010cc <ymodem_fw_update+0xe0>
				file_name[file_index-3]=rx_ymodem[file_index];
 8001094:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001098:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800109c:	3b03      	subs	r3, #3
 800109e:	4993      	ldr	r1, [pc, #588]	; (80012ec <ymodem_fw_update+0x300>)
 80010a0:	5c8a      	ldrb	r2, [r1, r2]
 80010a2:	3350      	adds	r3, #80	; 0x50
 80010a4:	443b      	add	r3, r7
 80010a6:	f803 2c50 	strb.w	r2, [r3, #-80]
				if(rx_ymodem[file_index]==0){
 80010aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010ae:	4a8f      	ldr	r2, [pc, #572]	; (80012ec <ymodem_fw_update+0x300>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d105      	bne.n	80010c2 <ymodem_fw_update+0xd6>
					file_index++;
 80010b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010ba:	3301      	adds	r3, #1
 80010bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
 80010c0:	e008      	b.n	80010d4 <ymodem_fw_update+0xe8>
			for(file_index=3;file_index<128;file_index++){
 80010c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010c6:	3301      	adds	r3, #1
 80010c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80010cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dadf      	bge.n	8001094 <ymodem_fw_update+0xa8>
				}
			}
			for(;file_index<128;file_index++){
 80010d4:	e01a      	b.n	800110c <ymodem_fw_update+0x120>
				if(rx_ymodem[file_index]==' '){
 80010d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010da:	4a84      	ldr	r2, [pc, #528]	; (80012ec <ymodem_fw_update+0x300>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	2b20      	cmp	r3, #32
 80010e0:	d019      	beq.n	8001116 <ymodem_fw_update+0x12a>
					break;
				}
				else{
					file_size=chartoint(rx_ymodem[file_index])+file_size*10;
 80010e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80010e6:	4a81      	ldr	r2, [pc, #516]	; (80012ec <ymodem_fw_update+0x300>)
 80010e8:	5cd3      	ldrb	r3, [r2, r3]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fd7a 	bl	8000be4 <chartoint>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4619      	mov	r1, r3
 80010f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80010f6:	4613      	mov	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	4413      	add	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	440b      	add	r3, r1
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
			for(;file_index<128;file_index++){
 8001102:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001106:	3301      	adds	r3, #1
 8001108:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800110c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001110:	2b00      	cmp	r3, #0
 8001112:	dae0      	bge.n	80010d6 <ymodem_fw_update+0xea>
 8001114:	e000      	b.n	8001118 <ymodem_fw_update+0x12c>
					break;
 8001116:	bf00      	nop
				}
			}
			calculate_crc16(rx_ymodem+1027, 2, &loop_do);
 8001118:	4878      	ldr	r0, [pc, #480]	; (80012fc <ymodem_fw_update+0x310>)
 800111a:	f107 0343 	add.w	r3, r7, #67	; 0x43
 800111e:	461a      	mov	r2, r3
 8001120:	2102      	movs	r1, #2
 8001122:	f7ff fd8f 	bl	8000c44 <calculate_crc16>

			memset(rx_ymodem,0,1029);
 8001126:	f240 4205 	movw	r2, #1029	; 0x405
 800112a:	2100      	movs	r1, #0
 800112c:	486f      	ldr	r0, [pc, #444]	; (80012ec <ymodem_fw_update+0x300>)
 800112e:	f004 f9c9 	bl	80054c4 <memset>
			rx_index=0;
 8001132:	4b6f      	ldr	r3, [pc, #444]	; (80012f0 <ymodem_fw_update+0x304>)
 8001134:	2200      	movs	r2, #0
 8001136:	801a      	strh	r2, [r3, #0]

			_1bit_buffer=ACK;
 8001138:	2306      	movs	r3, #6
 800113a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 800113e:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001142:	4619      	mov	r1, r3
 8001144:	2001      	movs	r0, #1
 8001146:	f7ff fd5b 	bl	8000c00 <uart_send_1bit>
			_1bit_buffer='C';
 800114a:	2343      	movs	r3, #67	; 0x43
 800114c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 8001150:	f107 0342 	add.w	r3, r7, #66	; 0x42
 8001154:	4619      	mov	r1, r3
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff fd52 	bl	8000c00 <uart_send_1bit>
			send_c_flag=false;
 800115c:	2300      	movs	r3, #0
 800115e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001162:	e0b5      	b.n	80012d0 <ymodem_fw_update+0x2e4>
		}
		else if(rx_1bit==EOT && first_send_eot){
 8001164:	4b60      	ldr	r3, [pc, #384]	; (80012e8 <ymodem_fw_update+0x2fc>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b04      	cmp	r3, #4
 800116a:	d110      	bne.n	800118e <ymodem_fw_update+0x1a2>
 800116c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001170:	2b00      	cmp	r3, #0
 8001172:	d00c      	beq.n	800118e <ymodem_fw_update+0x1a2>
			_1bit_buffer=NAK;
 8001174:	2315      	movs	r3, #21
 8001176:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 800117a:	f107 0342 	add.w	r3, r7, #66	; 0x42
 800117e:	4619      	mov	r1, r3
 8001180:	2001      	movs	r0, #1
 8001182:	f7ff fd3d 	bl	8000c00 <uart_send_1bit>
			first_send_eot=false;
 8001186:	2300      	movs	r3, #0
 8001188:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800118c:	e0a0      	b.n	80012d0 <ymodem_fw_update+0x2e4>
		}
		else if(rx_1bit==EOT && !first_send_eot){
 800118e:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <ymodem_fw_update+0x2fc>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b04      	cmp	r3, #4
 8001194:	d162      	bne.n	800125c <ymodem_fw_update+0x270>
 8001196:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800119a:	f083 0301 	eor.w	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d05b      	beq.n	800125c <ymodem_fw_update+0x270>
			first_send_eot=true;
 80011a4:	2301      	movs	r3, #1
 80011a6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			_1bit_buffer=ACK;
 80011aa:	2306      	movs	r3, #6
 80011ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 80011b0:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80011b4:	4619      	mov	r1, r3
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff fd22 	bl	8000c00 <uart_send_1bit>
			_1bit_buffer='C';
 80011bc:	2343      	movs	r3, #67	; 0x43
 80011be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 80011c2:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80011c6:	4619      	mov	r1, r3
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff fd19 	bl	8000c00 <uart_send_1bit>

			_1bit_buffer=ACK;
 80011ce:	2306      	movs	r3, #6
 80011d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 80011d4:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80011d8:	4619      	mov	r1, r3
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff fd10 	bl	8000c00 <uart_send_1bit>
			_1bit_buffer='C';
 80011e0:	2343      	movs	r3, #67	; 0x43
 80011e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 80011e6:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80011ea:	4619      	mov	r1, r3
 80011ec:	2001      	movs	r0, #1
 80011ee:	f7ff fd07 	bl	8000c00 <uart_send_1bit>

			loop_do=false;
 80011f2:	2300      	movs	r3, #0
 80011f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			uart1_send_flag=false;
 80011f8:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <ymodem_fw_update+0x30c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			rx_1bit=0;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <ymodem_fw_update+0x2fc>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]

			uart_send(2,"\n+++++++++++++++++++++++++++++++++++++++++\n");
 8001204:	493e      	ldr	r1, [pc, #248]	; (8001300 <ymodem_fw_update+0x314>)
 8001206:	2002      	movs	r0, #2
 8001208:	f000 f8be 	bl	8001388 <uart_send>
			uart_send(2,"\nsend_complete!\n");
 800120c:	493d      	ldr	r1, [pc, #244]	; (8001304 <ymodem_fw_update+0x318>)
 800120e:	2002      	movs	r0, #2
 8001210:	f000 f8ba 	bl	8001388 <uart_send>
			uart_send(2,"INFO)\nfile name : ");
 8001214:	493c      	ldr	r1, [pc, #240]	; (8001308 <ymodem_fw_update+0x31c>)
 8001216:	2002      	movs	r0, #2
 8001218:	f000 f8b6 	bl	8001388 <uart_send>
			uart_send(2,"%s",file_name);
 800121c:	463b      	mov	r3, r7
 800121e:	461a      	mov	r2, r3
 8001220:	493a      	ldr	r1, [pc, #232]	; (800130c <ymodem_fw_update+0x320>)
 8001222:	2002      	movs	r0, #2
 8001224:	f000 f8b0 	bl	8001388 <uart_send>
			uart_send(2,"\n");
 8001228:	4932      	ldr	r1, [pc, #200]	; (80012f4 <ymodem_fw_update+0x308>)
 800122a:	2002      	movs	r0, #2
 800122c:	f000 f8ac 	bl	8001388 <uart_send>
			uart_send(2,"file size : ");
 8001230:	4937      	ldr	r1, [pc, #220]	; (8001310 <ymodem_fw_update+0x324>)
 8001232:	2002      	movs	r0, #2
 8001234:	f000 f8a8 	bl	8001388 <uart_send>
			uart_send(2,"%lu",file_size);
 8001238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800123a:	4936      	ldr	r1, [pc, #216]	; (8001314 <ymodem_fw_update+0x328>)
 800123c:	2002      	movs	r0, #2
 800123e:	f000 f8a3 	bl	8001388 <uart_send>
			uart_send(2,"\n");
 8001242:	492c      	ldr	r1, [pc, #176]	; (80012f4 <ymodem_fw_update+0x308>)
 8001244:	2002      	movs	r0, #2
 8001246:	f000 f89f 	bl	8001388 <uart_send>
			HAL_UART_DMAStop(&huart1);
 800124a:	4826      	ldr	r0, [pc, #152]	; (80012e4 <ymodem_fw_update+0x2f8>)
 800124c:	f003 fc92 	bl	8004b74 <HAL_UART_DMAStop>
			UART_Start_Receive_DMA(&huart1,&command_tx[0],5);;
 8001250:	2205      	movs	r2, #5
 8001252:	4931      	ldr	r1, [pc, #196]	; (8001318 <ymodem_fw_update+0x32c>)
 8001254:	4823      	ldr	r0, [pc, #140]	; (80012e4 <ymodem_fw_update+0x2f8>)
 8001256:	f003 fe95 	bl	8004f84 <UART_Start_Receive_DMA>
 800125a:	e039      	b.n	80012d0 <ymodem_fw_update+0x2e4>
		}
		else if(rx_ymodem[0]==STX){
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <ymodem_fw_update+0x300>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d135      	bne.n	80012d0 <ymodem_fw_update+0x2e4>
			HAL_Delay(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f001 fc8f 	bl	8002b88 <HAL_Delay>
			calculate_crc16(rx_ymodem+1027, 2, &loop_do);
 800126a:	4824      	ldr	r0, [pc, #144]	; (80012fc <ymodem_fw_update+0x310>)
 800126c:	f107 0343 	add.w	r3, r7, #67	; 0x43
 8001270:	461a      	mov	r2, r3
 8001272:	2102      	movs	r1, #2
 8001274:	f7ff fce6 	bl	8000c44 <calculate_crc16>
			/*buffer send_occur*/
			for(uint16_t i=3;i<=1026;i++){
 8001278:	2303      	movs	r3, #3
 800127a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800127e:	e00c      	b.n	800129a <ymodem_fw_update+0x2ae>
				uart_send_1bit(2,&rx_ymodem[i]);
 8001280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001284:	4a19      	ldr	r2, [pc, #100]	; (80012ec <ymodem_fw_update+0x300>)
 8001286:	4413      	add	r3, r2
 8001288:	4619      	mov	r1, r3
 800128a:	2002      	movs	r0, #2
 800128c:	f7ff fcb8 	bl	8000c00 <uart_send_1bit>
			for(uint16_t i=3;i<=1026;i++){
 8001290:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001294:	3301      	adds	r3, #1
 8001296:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800129a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800129e:	f240 4202 	movw	r2, #1026	; 0x402
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d9ec      	bls.n	8001280 <ymodem_fw_update+0x294>
			}
			memset(rx_ymodem,0,1029);
 80012a6:	f240 4205 	movw	r2, #1029	; 0x405
 80012aa:	2100      	movs	r1, #0
 80012ac:	480f      	ldr	r0, [pc, #60]	; (80012ec <ymodem_fw_update+0x300>)
 80012ae:	f004 f909 	bl	80054c4 <memset>
			rx_index=0;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <ymodem_fw_update+0x304>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	801a      	strh	r2, [r3, #0]
			_1bit_buffer=ACK;
 80012b8:	2306      	movs	r3, #6
 80012ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			uart_send_1bit(1,&_1bit_buffer);
 80012be:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80012c2:	4619      	mov	r1, r3
 80012c4:	2001      	movs	r0, #1
 80012c6:	f7ff fc9b 	bl	8000c00 <uart_send_1bit>
			send_c_flag=false;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	while(loop_do){
 80012d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f47f aeb6 	bne.w	8001046 <ymodem_fw_update+0x5a>
		  }
	}
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	; 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000570 	.word	0x20000570
 80012e8:	20000565 	.word	0x20000565
 80012ec:	20000160 	.word	0x20000160
 80012f0:	20000566 	.word	0x20000566
 80012f4:	08005ca8 	.word	0x08005ca8
 80012f8:	20000568 	.word	0x20000568
 80012fc:	20000563 	.word	0x20000563
 8001300:	08005ce8 	.word	0x08005ce8
 8001304:	08005d14 	.word	0x08005d14
 8001308:	08005d28 	.word	0x08005d28
 800130c:	08005d3c 	.word	0x08005d3c
 8001310:	08005d40 	.word	0x08005d40
 8001314:	08005d50 	.word	0x08005d50
 8001318:	200000ac 	.word	0x200000ac

0800131c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_UART_RxCpltCallback+0x50>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d119      	bne.n	8001362 <HAL_UART_RxCpltCallback+0x46>
		if(uart1_send_flag){
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <HAL_UART_RxCpltCallback+0x54>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d010      	beq.n	8001358 <HAL_UART_RxCpltCallback+0x3c>
			rx_ymodem[rx_index++]=rx_1bit;
 8001336:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <HAL_UART_RxCpltCallback+0x58>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	b291      	uxth	r1, r2
 800133e:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <HAL_UART_RxCpltCallback+0x58>)
 8001340:	8011      	strh	r1, [r2, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <HAL_UART_RxCpltCallback+0x5c>)
 8001346:	7819      	ldrb	r1, [r3, #0]
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_UART_RxCpltCallback+0x60>)
 800134a:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_DMA(&huart1,&rx_1bit,1);
 800134c:	2201      	movs	r2, #1
 800134e:	490a      	ldr	r1, [pc, #40]	; (8001378 <HAL_UART_RxCpltCallback+0x5c>)
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <HAL_UART_RxCpltCallback+0x64>)
 8001352:	f003 fbea 	bl	8004b2a <HAL_UART_Receive_DMA>
		else{
			HAL_UART_Receive_DMA(&huart1,&command_tx[0],5);
		}
	}
	UNUSED(huart);
}
 8001356:	e004      	b.n	8001362 <HAL_UART_RxCpltCallback+0x46>
			HAL_UART_Receive_DMA(&huart1,&command_tx[0],5);
 8001358:	2205      	movs	r2, #5
 800135a:	490a      	ldr	r1, [pc, #40]	; (8001384 <HAL_UART_RxCpltCallback+0x68>)
 800135c:	4808      	ldr	r0, [pc, #32]	; (8001380 <HAL_UART_RxCpltCallback+0x64>)
 800135e:	f003 fbe4 	bl	8004b2a <HAL_UART_Receive_DMA>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40013800 	.word	0x40013800
 8001370:	20000568 	.word	0x20000568
 8001374:	20000566 	.word	0x20000566
 8001378:	20000565 	.word	0x20000565
 800137c:	20000160 	.word	0x20000160
 8001380:	20000570 	.word	0x20000570
 8001384:	200000ac 	.word	0x200000ac

08001388 <uart_send>:

void uart_send(uint8_t uart_num, char *fmt,...){
 8001388:	b40e      	push	{r1, r2, r3}
 800138a:	b580      	push	{r7, lr}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)send_buffer,send_buffer_length,fmt,arg);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	2140      	movs	r1, #64	; 0x40
 80013a0:	4810      	ldr	r0, [pc, #64]	; (80013e4 <uart_send+0x5c>)
 80013a2:	f004 f881 	bl	80054a8 <vsniprintf>
	if(uart_num==1){
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <uart_send+0x32>
		HAL_UART_Transmit(&huart1,send_buffer,send_buffer_length,100);
 80013ac:	2364      	movs	r3, #100	; 0x64
 80013ae:	2240      	movs	r2, #64	; 0x40
 80013b0:	490c      	ldr	r1, [pc, #48]	; (80013e4 <uart_send+0x5c>)
 80013b2:	480d      	ldr	r0, [pc, #52]	; (80013e8 <uart_send+0x60>)
 80013b4:	f003 fb36 	bl	8004a24 <HAL_UART_Transmit>
 80013b8:	e008      	b.n	80013cc <uart_send+0x44>
	}
	else if(uart_num==2){
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d105      	bne.n	80013cc <uart_send+0x44>
		HAL_UART_Transmit(&huart2,send_buffer,send_buffer_length,100);
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	4907      	ldr	r1, [pc, #28]	; (80013e4 <uart_send+0x5c>)
 80013c6:	4809      	ldr	r0, [pc, #36]	; (80013ec <uart_send+0x64>)
 80013c8:	f003 fb2c 	bl	8004a24 <HAL_UART_Transmit>
	}
	memset(send_buffer,0,send_buffer_length);
 80013cc:	2240      	movs	r2, #64	; 0x40
 80013ce:	2100      	movs	r1, #0
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <uart_send+0x5c>)
 80013d2:	f004 f877 	bl	80054c4 <memset>
	va_end(arg);
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e0:	b003      	add	sp, #12
 80013e2:	4770      	bx	lr
 80013e4:	200000b4 	.word	0x200000b4
 80013e8:	20000570 	.word	0x20000570
 80013ec:	200005b8 	.word	0x200005b8

080013f0 <is_command>:

keytype is_command(uint8_t *buf,uint8_t i){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	70fb      	strb	r3, [r7, #3]
	keytype type_key = KEY_NONE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
	switch (buf[i]){
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b7f      	cmp	r3, #127	; 0x7f
 800140a:	d061      	beq.n	80014d0 <is_command+0xe0>
 800140c:	2b7f      	cmp	r3, #127	; 0x7f
 800140e:	dc68      	bgt.n	80014e2 <is_command+0xf2>
 8001410:	2b1b      	cmp	r3, #27
 8001412:	d006      	beq.n	8001422 <is_command+0x32>
 8001414:	2b1b      	cmp	r3, #27
 8001416:	dc64      	bgt.n	80014e2 <is_command+0xf2>
 8001418:	2b08      	cmp	r3, #8
 800141a:	d05c      	beq.n	80014d6 <is_command+0xe6>
 800141c:	2b0d      	cmp	r3, #13
 800141e:	d05d      	beq.n	80014dc <is_command+0xec>
			break;
		case 0x0d:
			type_key = ENTER;
			break;
		default:
			break;
 8001420:	e05f      	b.n	80014e2 <is_command+0xf2>
			HAL_Delay(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f001 fbb0 	bl	8002b88 <HAL_Delay>
			switch(buf[(i+2)%5]){
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	1c9a      	adds	r2, r3, #2
 800142c:	4b37      	ldr	r3, [pc, #220]	; (800150c <is_command+0x11c>)
 800142e:	fb83 1302 	smull	r1, r3, r3, r2
 8001432:	1059      	asrs	r1, r3, #1
 8001434:	17d3      	asrs	r3, r2, #31
 8001436:	1ac9      	subs	r1, r1, r3
 8001438:	460b      	mov	r3, r1
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	1ad1      	subs	r1, r2, r3
 8001440:	460a      	mov	r2, r1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	3b31      	subs	r3, #49	; 0x31
 800144a:	2b13      	cmp	r3, #19
 800144c:	d83c      	bhi.n	80014c8 <is_command+0xd8>
 800144e:	a201      	add	r2, pc, #4	; (adr r2, 8001454 <is_command+0x64>)
 8001450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001454:	080014c3 	.word	0x080014c3
 8001458:	080014c9 	.word	0x080014c9
 800145c:	080014c9 	.word	0x080014c9
 8001460:	080014bd 	.word	0x080014bd
 8001464:	080014c9 	.word	0x080014c9
 8001468:	080014c9 	.word	0x080014c9
 800146c:	080014c9 	.word	0x080014c9
 8001470:	080014c9 	.word	0x080014c9
 8001474:	080014c9 	.word	0x080014c9
 8001478:	080014c9 	.word	0x080014c9
 800147c:	080014c9 	.word	0x080014c9
 8001480:	080014c9 	.word	0x080014c9
 8001484:	080014c9 	.word	0x080014c9
 8001488:	080014c9 	.word	0x080014c9
 800148c:	080014c9 	.word	0x080014c9
 8001490:	080014c9 	.word	0x080014c9
 8001494:	080014b7 	.word	0x080014b7
 8001498:	080014b1 	.word	0x080014b1
 800149c:	080014ab 	.word	0x080014ab
 80014a0:	080014a5 	.word	0x080014a5
					type_key = LEFT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	73fb      	strb	r3, [r7, #15]
					break;
 80014a8:	e011      	b.n	80014ce <is_command+0xde>
					type_key = RIGHT;
 80014aa:	2304      	movs	r3, #4
 80014ac:	73fb      	strb	r3, [r7, #15]
					break;
 80014ae:	e00e      	b.n	80014ce <is_command+0xde>
					type_key = DOWN;
 80014b0:	2302      	movs	r3, #2
 80014b2:	73fb      	strb	r3, [r7, #15]
					break;
 80014b4:	e00b      	b.n	80014ce <is_command+0xde>
					type_key = UP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
					break;
 80014ba:	e008      	b.n	80014ce <is_command+0xde>
					type_key = END;
 80014bc:	2305      	movs	r3, #5
 80014be:	73fb      	strb	r3, [r7, #15]
					break;
 80014c0:	e005      	b.n	80014ce <is_command+0xde>
					type_key = HOME;
 80014c2:	2306      	movs	r3, #6
 80014c4:	73fb      	strb	r3, [r7, #15]
					break;
 80014c6:	e002      	b.n	80014ce <is_command+0xde>
					type_key = KEY_ERROR;
 80014c8:	230b      	movs	r3, #11
 80014ca:	73fb      	strb	r3, [r7, #15]
					break;
 80014cc:	bf00      	nop
			break;
 80014ce:	e009      	b.n	80014e4 <is_command+0xf4>
			type_key = DEL;
 80014d0:	2307      	movs	r3, #7
 80014d2:	73fb      	strb	r3, [r7, #15]
			break;
 80014d4:	e006      	b.n	80014e4 <is_command+0xf4>
			type_key = BACKSPACE;
 80014d6:	2308      	movs	r3, #8
 80014d8:	73fb      	strb	r3, [r7, #15]
			break;
 80014da:	e003      	b.n	80014e4 <is_command+0xf4>
			type_key = ENTER;
 80014dc:	2309      	movs	r3, #9
 80014de:	73fb      	strb	r3, [r7, #15]
			break;
 80014e0:	e000      	b.n	80014e4 <is_command+0xf4>
			break;
 80014e2:	bf00      	nop
	}
	if(buf[i]>=32 && buf[i]<=126){
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b1f      	cmp	r3, #31
 80014ee:	d907      	bls.n	8001500 <is_command+0x110>
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b7e      	cmp	r3, #126	; 0x7e
 80014fa:	d801      	bhi.n	8001500 <is_command+0x110>
		type_key=IS_WORD;
 80014fc:	230a      	movs	r3, #10
 80014fe:	73fb      	strb	r3, [r7, #15]
	}
	return type_key;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	66666667 	.word	0x66666667

08001510 <is_same_word>:
/*
 * compare uint8_t buf and compare if they are completely same character return
 * true. else they are not same character return false
*/
bool is_same_word(uint8_t *buf,uint8_t *compare,uint8_t start_compare){
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	4613      	mov	r3, r2
 800151c:	71fb      	strb	r3, [r7, #7]
    bool ret=false;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]
    uint8_t end_compare=strlen((const char *)compare);
 8001522:	68b8      	ldr	r0, [r7, #8]
 8001524:	f7fe fe14 	bl	8000150 <strlen>
 8001528:	4603      	mov	r3, r0
 800152a:	757b      	strb	r3, [r7, #21]
    for (uint8_t i=start_compare;i<start_compare+end_compare;i++){
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	75bb      	strb	r3, [r7, #22]
 8001530:	e02e      	b.n	8001590 <is_same_word+0x80>
        if(compare[i-start_compare]==0){
 8001532:	7dba      	ldrb	r2, [r7, #22]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	461a      	mov	r2, r3
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	4413      	add	r3, r2
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <is_same_word+0x3a>
            ret=false;
 8001544:	2300      	movs	r3, #0
 8001546:	75fb      	strb	r3, [r7, #23]
            break;
 8001548:	e028      	b.n	800159c <is_same_word+0x8c>
        }
        if (buf[i]==compare[i-start_compare]){
 800154a:	7dbb      	ldrb	r3, [r7, #22]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	781a      	ldrb	r2, [r3, #0]
 8001552:	7db9      	ldrb	r1, [r7, #22]
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	1acb      	subs	r3, r1, r3
 8001558:	4619      	mov	r1, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	440b      	add	r3, r1
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d102      	bne.n	800156a <is_same_word+0x5a>
            ret=true;
 8001564:	2301      	movs	r3, #1
 8001566:	75fb      	strb	r3, [r7, #23]
 8001568:	e00f      	b.n	800158a <is_same_word+0x7a>
        }
        else if(buf[i]!=compare[i-start_compare]){
 800156a:	7dbb      	ldrb	r3, [r7, #22]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	781a      	ldrb	r2, [r3, #0]
 8001572:	7db9      	ldrb	r1, [r7, #22]
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	1acb      	subs	r3, r1, r3
 8001578:	4619      	mov	r1, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	440b      	add	r3, r1
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d002      	beq.n	800158a <is_same_word+0x7a>
            ret=false;
 8001584:	2300      	movs	r3, #0
 8001586:	75fb      	strb	r3, [r7, #23]
            break;
 8001588:	e008      	b.n	800159c <is_same_word+0x8c>
    for (uint8_t i=start_compare;i<start_compare+end_compare;i++){
 800158a:	7dbb      	ldrb	r3, [r7, #22]
 800158c:	3301      	adds	r3, #1
 800158e:	75bb      	strb	r3, [r7, #22]
 8001590:	7dba      	ldrb	r2, [r7, #22]
 8001592:	79f9      	ldrb	r1, [r7, #7]
 8001594:	7d7b      	ldrb	r3, [r7, #21]
 8001596:	440b      	add	r3, r1
 8001598:	429a      	cmp	r2, r3
 800159a:	dbca      	blt.n	8001532 <is_same_word+0x22>
        }
    }
    return ret;
 800159c:	7dfb      	ldrb	r3, [r7, #23]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <command_input>:

void command_input(uint8_t *buf){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	bool existing_command = false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t word_len=0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t flash_start_address;

	if(is_same_word(buf,(uint8_t *)"help",0)){
 80015bc:	2200      	movs	r2, #0
 80015be:	49b8      	ldr	r1, [pc, #736]	; (80018a0 <command_input+0x2f8>)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffa5 	bl	8001510 <is_same_word>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d04b      	beq.n	8001664 <command_input+0xbc>
		uart_send(1,"\n---------------------------------------------------");
 80015cc:	49b5      	ldr	r1, [pc, #724]	; (80018a4 <command_input+0x2fc>)
 80015ce:	2001      	movs	r0, #1
 80015d0:	f7ff feda 	bl	8001388 <uart_send>
		uart_send(1,"----------------\n\n");
 80015d4:	49b4      	ldr	r1, [pc, #720]	; (80018a8 <command_input+0x300>)
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fed6 	bl	8001388 <uart_send>
		uart_send(1,"\t\t\tcommand_list\n\n");
 80015dc:	49b3      	ldr	r1, [pc, #716]	; (80018ac <command_input+0x304>)
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff fed2 	bl	8001388 <uart_send>
		uart_send(1,"1. printf [string] : print string at terminal.\n");
 80015e4:	49b2      	ldr	r1, [pc, #712]	; (80018b0 <command_input+0x308>)
 80015e6:	2001      	movs	r0, #1
 80015e8:	f7ff fece 	bl	8001388 <uart_send>
		uart_send(1,"note) ledx : x can be 1, 2 value.\n");
 80015ec:	49b1      	ldr	r1, [pc, #708]	; (80018b4 <command_input+0x30c>)
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff feca 	bl	8001388 <uart_send>
		uart_send(1,"2. ledx [on/off] : on/off led\n");
 80015f4:	49b0      	ldr	r1, [pc, #704]	; (80018b8 <command_input+0x310>)
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fec6 	bl	8001388 <uart_send>
		uart_send(1,"3. ledx toggle [number] : toggle led with user set number\n");
 80015fc:	49af      	ldr	r1, [pc, #700]	; (80018bc <command_input+0x314>)
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fec2 	bl	8001388 <uart_send>
		uart_send(1,"4. adc read : read adc voltage val, where reference voltage,");
 8001604:	49ae      	ldr	r1, [pc, #696]	; (80018c0 <command_input+0x318>)
 8001606:	2001      	movs	r0, #1
 8001608:	f7ff febe 	bl	8001388 <uart_send>
		uart_send(1,"is 3.3V.\n");
 800160c:	49ad      	ldr	r1, [pc, #692]	; (80018c4 <command_input+0x31c>)
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff feba 	bl	8001388 <uart_send>
		uart_send(1,"5. clear [x] : clear uart terminal, x can be 1,2.\n");
 8001614:	49ac      	ldr	r1, [pc, #688]	; (80018c8 <command_input+0x320>)
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff feb6 	bl	8001388 <uart_send>
		uart_send(1,"6. ymodem transmit : transmit data with ymodem.\n");
 800161c:	49ab      	ldr	r1, [pc, #684]	; (80018cc <command_input+0x324>)
 800161e:	2001      	movs	r0, #1
 8001620:	f7ff feb2 	bl	8001388 <uart_send>
		uart_send(1,"7. ymodem fw update : update fw.\n");
 8001624:	49aa      	ldr	r1, [pc, #680]	; (80018d0 <command_input+0x328>)
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff feae 	bl	8001388 <uart_send>
		uart_send(1,"note) start adrress must have 8 length.\n");
 800162c:	49a9      	ldr	r1, [pc, #676]	; (80018d4 <command_input+0x32c>)
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff feaa 	bl	8001388 <uart_send>
		uart_send(1,"8. flash read 0x[start adrress] [num]: read flash memory.\n");
 8001634:	49a8      	ldr	r1, [pc, #672]	; (80018d8 <command_input+0x330>)
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff fea6 	bl	8001388 <uart_send>
		uart_send(1,"9. flash erase 0x[start adrress] [num] : erase flash memory.\n");
 800163c:	49a7      	ldr	r1, [pc, #668]	; (80018dc <command_input+0x334>)
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff fea2 	bl	8001388 <uart_send>
		uart_send(1,"10. flash write 0x[start adrress] : write flash memory.\n");
 8001644:	49a6      	ldr	r1, [pc, #664]	; (80018e0 <command_input+0x338>)
 8001646:	2001      	movs	r0, #1
 8001648:	f7ff fe9e 	bl	8001388 <uart_send>
		uart_send(1,"\n---------------------------------------------------");
 800164c:	4995      	ldr	r1, [pc, #596]	; (80018a4 <command_input+0x2fc>)
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff fe9a 	bl	8001388 <uart_send>
		uart_send(1,"----------------\n\n");
 8001654:	4994      	ldr	r1, [pc, #592]	; (80018a8 <command_input+0x300>)
 8001656:	2001      	movs	r0, #1
 8001658:	f7ff fe96 	bl	8001388 <uart_send>
		existing_command = true;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001662:	e2ae      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"printf",0)){
 8001664:	2200      	movs	r2, #0
 8001666:	499f      	ldr	r1, [pc, #636]	; (80018e4 <command_input+0x33c>)
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff ff51 	bl	8001510 <is_same_word>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00f      	beq.n	8001694 <command_input+0xec>
		word_len=strlen("printf")+1;
 8001674:	2307      	movs	r3, #7
 8001676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uart_send(1,"\n%s",buf+word_len);
 800167a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4998      	ldr	r1, [pc, #608]	; (80018e8 <command_input+0x340>)
 8001686:	2001      	movs	r0, #1
 8001688:	f7ff fe7e 	bl	8001388 <uart_send>
		existing_command = true;
 800168c:	2301      	movs	r3, #1
 800168e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001692:	e296      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"flash read ",0)){
 8001694:	2200      	movs	r2, #0
 8001696:	4995      	ldr	r1, [pc, #596]	; (80018ec <command_input+0x344>)
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff ff39 	bl	8001510 <is_same_word>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d041      	beq.n	8001728 <command_input+0x180>
		word_len=strlen("flash read 0x");
 80016a4:	230d      	movs	r3, #13
 80016a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bool is_number;
		flash_start_address = string_to_num((char *)&buf[word_len],&is_number,HEX);
 80016aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	f107 010f 	add.w	r1, r7, #15
 80016b6:	2210      	movs	r2, #16
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff f92f 	bl	800091c <string_to_num>
 80016be:	61f8      	str	r0, [r7, #28]
		if(!is_number){
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	f083 0301 	eor.w	r3, r3, #1
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <command_input+0x136>
			uart_send(1,"\nsend val %s is not number\n",buf+word_len);
 80016cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4986      	ldr	r1, [pc, #536]	; (80018f0 <command_input+0x348>)
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff fe55 	bl	8001388 <uart_send>
		}
		word_len=strlen("flash read 0x00000000 ");
 80016de:	2316      	movs	r3, #22
 80016e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint16_t flash_read_val = string_to_num((char *)&buf[word_len],&is_number,DEC);
 80016e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	f107 010f 	add.w	r1, r7, #15
 80016f0:	220a      	movs	r2, #10
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f912 	bl	800091c <string_to_num>
 80016f8:	4603      	mov	r3, r0
 80016fa:	823b      	strh	r3, [r7, #16]
		if(is_number){
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d005      	beq.n	800170e <command_input+0x166>
			flash_read(flash_start_address,flash_read_val);
 8001702:	8a3b      	ldrh	r3, [r7, #16]
 8001704:	4619      	mov	r1, r3
 8001706:	69f8      	ldr	r0, [r7, #28]
 8001708:	f7ff f9c0 	bl	8000a8c <flash_read>
 800170c:	e008      	b.n	8001720 <command_input+0x178>
		}
		else{
			uart_send(1,"\nsend val %s is not number\n",buf+word_len);
 800170e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	461a      	mov	r2, r3
 8001718:	4975      	ldr	r1, [pc, #468]	; (80018f0 <command_input+0x348>)
 800171a:	2001      	movs	r0, #1
 800171c:	f7ff fe34 	bl	8001388 <uart_send>
		}
		existing_command = true;
 8001720:	2301      	movs	r3, #1
 8001722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001726:	e24c      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"flash erase ",0)){
 8001728:	2200      	movs	r2, #0
 800172a:	4972      	ldr	r1, [pc, #456]	; (80018f4 <command_input+0x34c>)
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff feef 	bl	8001510 <is_same_word>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d04e      	beq.n	80017d6 <command_input+0x22e>
		word_len=strlen("flash erase 0x");
 8001738:	230e      	movs	r3, #14
 800173a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bool is_number;
		flash_start_address = string_to_num((char *)&buf[word_len],&is_number,HEX);
 800173e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	f107 010e 	add.w	r1, r7, #14
 800174a:	2210      	movs	r2, #16
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff f8e5 	bl	800091c <string_to_num>
 8001752:	61f8      	str	r0, [r7, #28]
		if(!is_number){
 8001754:	7bbb      	ldrb	r3, [r7, #14]
 8001756:	f083 0301 	eor.w	r3, r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d008      	beq.n	8001772 <command_input+0x1ca>
			uart_send(1,"\nsend val %s is not number\n",buf+word_len);
 8001760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	4413      	add	r3, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4961      	ldr	r1, [pc, #388]	; (80018f0 <command_input+0x348>)
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff fe0b 	bl	8001388 <uart_send>
		}
		word_len=strlen("flash erase 0x00000000 ");
 8001772:	2317      	movs	r3, #23
 8001774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint16_t flash_erase_val = string_to_num((char *)&buf[word_len],&is_number,DEC);
 8001778:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4413      	add	r3, r2
 8001780:	f107 010e 	add.w	r1, r7, #14
 8001784:	220a      	movs	r2, #10
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f8c8 	bl	800091c <string_to_num>
 800178c:	4603      	mov	r3, r0
 800178e:	827b      	strh	r3, [r7, #18]
		if(is_number){
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d012      	beq.n	80017bc <command_input+0x214>
			if(flash_erase(flash_start_address,flash_erase_val)){
 8001796:	8a7b      	ldrh	r3, [r7, #18]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4619      	mov	r1, r3
 800179c:	69f8      	ldr	r0, [r7, #28]
 800179e:	f7ff f99f 	bl	8000ae0 <flash_erase>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <command_input+0x20a>
				uart_send(1,"\nerase complete!\n");
 80017a8:	4953      	ldr	r1, [pc, #332]	; (80018f8 <command_input+0x350>)
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff fdec 	bl	8001388 <uart_send>
 80017b0:	e00d      	b.n	80017ce <command_input+0x226>
			}
			else{
				uart_send(1,"\nerase fail!\n");
 80017b2:	4952      	ldr	r1, [pc, #328]	; (80018fc <command_input+0x354>)
 80017b4:	2001      	movs	r0, #1
 80017b6:	f7ff fde7 	bl	8001388 <uart_send>
 80017ba:	e008      	b.n	80017ce <command_input+0x226>
			}
		}
		else{
			uart_send(1,"\nsend val %s is not number\n",buf+word_len);
 80017bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	494a      	ldr	r1, [pc, #296]	; (80018f0 <command_input+0x348>)
 80017c8:	2001      	movs	r0, #1
 80017ca:	f7ff fddd 	bl	8001388 <uart_send>
		}
		existing_command = true;
 80017ce:	2301      	movs	r3, #1
 80017d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017d4:	e1f5      	b.n	8001bc2 <command_input+0x61a>
		}
	else if(is_same_word(buf,(uint8_t *)"flash write ",0)){
 80017d6:	2200      	movs	r2, #0
 80017d8:	4949      	ldr	r1, [pc, #292]	; (8001900 <command_input+0x358>)
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fe98 	bl	8001510 <is_same_word>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8092 	beq.w	800190c <command_input+0x364>
		word_len=strlen("flash write 0x");
 80017e8:	230e      	movs	r3, #14
 80017ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		bool is_number;
		flash_start_address = string_to_num((char *)&buf[word_len],&is_number,HEX);
 80017ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	f107 010d 	add.w	r1, r7, #13
 80017fa:	2210      	movs	r2, #16
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff f88d 	bl	800091c <string_to_num>
 8001802:	61f8      	str	r0, [r7, #28]
		if(!is_number){
 8001804:	7b7b      	ldrb	r3, [r7, #13]
 8001806:	f083 0301 	eor.w	r3, r3, #1
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <command_input+0x27a>
			uart_send(1,"\nsend val %s is not number\n",buf+word_len);
 8001810:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4935      	ldr	r1, [pc, #212]	; (80018f0 <command_input+0x348>)
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff fdb3 	bl	8001388 <uart_send>
		}
		word_len=strlen("flash write 0x00000000 ");
 8001822:	2317      	movs	r3, #23
 8001824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		uint16_t flash_write_val = string_to_num((char *)&buf[word_len],&is_number,DEC);
 8001828:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	4413      	add	r3, r2
 8001830:	f107 010d 	add.w	r1, r7, #13
 8001834:	220a      	movs	r2, #10
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f870 	bl	800091c <string_to_num>
 800183c:	4603      	mov	r3, r0
 800183e:	837b      	strh	r3, [r7, #26]
		uint8_t *data=(uint8_t *)malloc(sizeof(uint8_t)*flash_write_val);
 8001840:	8b7b      	ldrh	r3, [r7, #26]
 8001842:	4618      	mov	r0, r3
 8001844:	f003 fd50 	bl	80052e8 <malloc>
 8001848:	4603      	mov	r3, r0
 800184a:	617b      	str	r3, [r7, #20]
		memset(data,2,flash_write_val);
 800184c:	8b7b      	ldrh	r3, [r7, #26]
 800184e:	461a      	mov	r2, r3
 8001850:	2102      	movs	r1, #2
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f003 fe36 	bl	80054c4 <memset>
		if(is_number){
 8001858:	7b7b      	ldrb	r3, [r7, #13]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d012      	beq.n	8001884 <command_input+0x2dc>
			if(flash_write(flash_start_address,flash_write_val,data)){
 800185e:	8b7b      	ldrh	r3, [r7, #26]
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4619      	mov	r1, r3
 8001864:	69f8      	ldr	r0, [r7, #28]
 8001866:	f7ff f971 	bl	8000b4c <flash_write>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <command_input+0x2d2>
				uart_send(1,"\nwirte complete!\n");
 8001870:	4924      	ldr	r1, [pc, #144]	; (8001904 <command_input+0x35c>)
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff fd88 	bl	8001388 <uart_send>
 8001878:	e00d      	b.n	8001896 <command_input+0x2ee>
			}
			else{
				uart_send(1,"\nwirte fail!\n");
 800187a:	4923      	ldr	r1, [pc, #140]	; (8001908 <command_input+0x360>)
 800187c:	2001      	movs	r0, #1
 800187e:	f7ff fd83 	bl	8001388 <uart_send>
 8001882:	e008      	b.n	8001896 <command_input+0x2ee>
			}
		}
		else{
			uart_send(1,"\nsend val %s is not number\n",buf+word_len);
 8001884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	461a      	mov	r2, r3
 800188e:	4918      	ldr	r1, [pc, #96]	; (80018f0 <command_input+0x348>)
 8001890:	2001      	movs	r0, #1
 8001892:	f7ff fd79 	bl	8001388 <uart_send>
		}
		existing_command = true;
 8001896:	2301      	movs	r3, #1
 8001898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800189c:	e191      	b.n	8001bc2 <command_input+0x61a>
 800189e:	bf00      	nop
 80018a0:	08005d54 	.word	0x08005d54
 80018a4:	08005d5c 	.word	0x08005d5c
 80018a8:	08005d94 	.word	0x08005d94
 80018ac:	08005da8 	.word	0x08005da8
 80018b0:	08005dbc 	.word	0x08005dbc
 80018b4:	08005dec 	.word	0x08005dec
 80018b8:	08005e10 	.word	0x08005e10
 80018bc:	08005e30 	.word	0x08005e30
 80018c0:	08005e6c 	.word	0x08005e6c
 80018c4:	08005eac 	.word	0x08005eac
 80018c8:	08005eb8 	.word	0x08005eb8
 80018cc:	08005eec 	.word	0x08005eec
 80018d0:	08005f20 	.word	0x08005f20
 80018d4:	08005f44 	.word	0x08005f44
 80018d8:	08005f70 	.word	0x08005f70
 80018dc:	08005fac 	.word	0x08005fac
 80018e0:	08005fec 	.word	0x08005fec
 80018e4:	08006028 	.word	0x08006028
 80018e8:	08006030 	.word	0x08006030
 80018ec:	08006034 	.word	0x08006034
 80018f0:	08006040 	.word	0x08006040
 80018f4:	0800605c 	.word	0x0800605c
 80018f8:	0800606c 	.word	0x0800606c
 80018fc:	08006080 	.word	0x08006080
 8001900:	08006090 	.word	0x08006090
 8001904:	080060a0 	.word	0x080060a0
 8001908:	080060b4 	.word	0x080060b4
		}
	else if(is_same_word(buf,(uint8_t *)"clear",0)){
 800190c:	2200      	movs	r2, #0
 800190e:	49b6      	ldr	r1, [pc, #728]	; (8001be8 <command_input+0x640>)
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff fdfd 	bl	8001510 <is_same_word>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00b      	beq.n	8001934 <command_input+0x38c>
		uart_send(1,"\x1B[2J");
 800191c:	49b3      	ldr	r1, [pc, #716]	; (8001bec <command_input+0x644>)
 800191e:	2001      	movs	r0, #1
 8001920:	f7ff fd32 	bl	8001388 <uart_send>
		uart_send(2,"\x1B[2J");
 8001924:	49b1      	ldr	r1, [pc, #708]	; (8001bec <command_input+0x644>)
 8001926:	2002      	movs	r0, #2
 8001928:	f7ff fd2e 	bl	8001388 <uart_send>
		existing_command = true;
 800192c:	2301      	movs	r3, #1
 800192e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001932:	e146      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"clear 1",0)){
 8001934:	2200      	movs	r2, #0
 8001936:	49ae      	ldr	r1, [pc, #696]	; (8001bf0 <command_input+0x648>)
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fde9 	bl	8001510 <is_same_word>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d007      	beq.n	8001954 <command_input+0x3ac>
		uart_send(1,"\x1B[2J");
 8001944:	49a9      	ldr	r1, [pc, #676]	; (8001bec <command_input+0x644>)
 8001946:	2001      	movs	r0, #1
 8001948:	f7ff fd1e 	bl	8001388 <uart_send>
		existing_command = true;
 800194c:	2301      	movs	r3, #1
 800194e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001952:	e136      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"clear 2",0)){
 8001954:	2200      	movs	r2, #0
 8001956:	49a7      	ldr	r1, [pc, #668]	; (8001bf4 <command_input+0x64c>)
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff fdd9 	bl	8001510 <is_same_word>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d007      	beq.n	8001974 <command_input+0x3cc>
		uart_send(2,"\x1B[2J");
 8001964:	49a1      	ldr	r1, [pc, #644]	; (8001bec <command_input+0x644>)
 8001966:	2002      	movs	r0, #2
 8001968:	f7ff fd0e 	bl	8001388 <uart_send>
		existing_command = true;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001972:	e126      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"ymodem transmit",0)){
 8001974:	2200      	movs	r2, #0
 8001976:	49a0      	ldr	r1, [pc, #640]	; (8001bf8 <command_input+0x650>)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fdc9 	bl	8001510 <is_same_word>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <command_input+0x3e8>
		ymodem_transmit();
 8001984:	f7ff f99a 	bl	8000cbc <ymodem_transmit>
		existing_command = true;
 8001988:	2301      	movs	r3, #1
 800198a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800198e:	e118      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"ymodem fw update",0)){
 8001990:	2200      	movs	r2, #0
 8001992:	499a      	ldr	r1, [pc, #616]	; (8001bfc <command_input+0x654>)
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff fdbb 	bl	8001510 <is_same_word>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <command_input+0x404>
		ymodem_fw_update();
 80019a0:	f7ff fb24 	bl	8000fec <ymodem_fw_update>
		existing_command = true;
 80019a4:	2301      	movs	r3, #1
 80019a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019aa:	e10a      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"adc read",0)){
 80019ac:	2200      	movs	r2, #0
 80019ae:	4994      	ldr	r1, [pc, #592]	; (8001c00 <command_input+0x658>)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fdad 	bl	8001510 <is_same_word>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <command_input+0x456>
		uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 80019bc:	4891      	ldr	r0, [pc, #580]	; (8001c04 <command_input+0x65c>)
 80019be:	f001 fa8d 	bl	8002edc <HAL_ADC_GetValue>
 80019c2:	6238      	str	r0, [r7, #32]
		adc_val *= 3.3;
 80019c4:	6a38      	ldr	r0, [r7, #32]
 80019c6:	f7fe fe37 	bl	8000638 <__aeabi_ui2d>
 80019ca:	a385      	add	r3, pc, #532	; (adr r3, 8001be0 <command_input+0x638>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fbc6 	bl	8000160 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7fe fea6 	bl	800072c <__aeabi_d2uiz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	623b      	str	r3, [r7, #32]
		uart_send(1,"\nadc voltage:%dV",(uint16_t)adc_val/4096);
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	0b1b      	lsrs	r3, r3, #12
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	461a      	mov	r2, r3
 80019ee:	4986      	ldr	r1, [pc, #536]	; (8001c08 <command_input+0x660>)
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fcc9 	bl	8001388 <uart_send>
		existing_command = true;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019fc:	e0e1      	b.n	8001bc2 <command_input+0x61a>
	}
	else if(is_same_word(buf,(uint8_t *)"led",0)){
 80019fe:	2200      	movs	r2, #0
 8001a00:	4982      	ldr	r1, [pc, #520]	; (8001c0c <command_input+0x664>)
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fd84 	bl	8001510 <is_same_word>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80d9 	beq.w	8001bc2 <command_input+0x61a>
		word_len=strlen("led");
 8001a10:	2303      	movs	r3, #3
 8001a12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(is_same_word(buf,(uint8_t *)"1",word_len)){
 8001a16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	497c      	ldr	r1, [pc, #496]	; (8001c10 <command_input+0x668>)
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fd76 	bl	8001510 <is_same_word>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d060      	beq.n	8001aec <command_input+0x544>
			word_len+=2;
 8001a2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a2e:	3302      	adds	r3, #2
 8001a30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(is_same_word(buf,(uint8_t *)"on",word_len)){
 8001a34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4976      	ldr	r1, [pc, #472]	; (8001c14 <command_input+0x66c>)
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff fd67 	bl	8001510 <is_same_word>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d00b      	beq.n	8001a60 <command_input+0x4b8>
				led1_toggle=false;
 8001a48:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <command_input+0x670>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	2120      	movs	r1, #32
 8001a52:	4872      	ldr	r0, [pc, #456]	; (8001c1c <command_input+0x674>)
 8001a54:	f002 fa9e 	bl	8003f94 <HAL_GPIO_WritePin>
				existing_command = true;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a5e:	e0b0      	b.n	8001bc2 <command_input+0x61a>
			}
			else if(is_same_word(buf,(uint8_t *)"off",word_len)){
 8001a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a64:	461a      	mov	r2, r3
 8001a66:	496e      	ldr	r1, [pc, #440]	; (8001c20 <command_input+0x678>)
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fd51 	bl	8001510 <is_same_word>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00b      	beq.n	8001a8c <command_input+0x4e4>
				led1_toggle=false;
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <command_input+0x670>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	4867      	ldr	r0, [pc, #412]	; (8001c1c <command_input+0x674>)
 8001a80:	f002 fa88 	bl	8003f94 <HAL_GPIO_WritePin>
				existing_command = true;
 8001a84:	2301      	movs	r3, #1
 8001a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001a8a:	e09a      	b.n	8001bc2 <command_input+0x61a>
			}
			else if(is_same_word(buf,(uint8_t *)"toggle",word_len)){
 8001a8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a90:	461a      	mov	r2, r3
 8001a92:	4964      	ldr	r1, [pc, #400]	; (8001c24 <command_input+0x67c>)
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fd3b 	bl	8001510 <is_same_word>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8090 	beq.w	8001bc2 <command_input+0x61a>
				word_len=strlen("led1 toggle ");
 8001aa2:	230c      	movs	r3, #12
 8001aa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				bool is_number = false;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	733b      	strb	r3, [r7, #12]
				led1_toggle_time = string_to_num((char *)buf+word_len,&is_number,DEC);
 8001aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	f107 010c 	add.w	r1, r7, #12
 8001ab8:	220a      	movs	r2, #10
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe ff2e 	bl	800091c <string_to_num>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b58      	ldr	r3, [pc, #352]	; (8001c28 <command_input+0x680>)
 8001ac6:	801a      	strh	r2, [r3, #0]
				if(!is_number){
 8001ac8:	7b3b      	ldrb	r3, [r7, #12]
 8001aca:	f083 0301 	eor.w	r3, r3, #1
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d004      	beq.n	8001ade <command_input+0x536>
					uart_send(1,(char *)"\nerror : toggle time value must be number!");
 8001ad4:	4955      	ldr	r1, [pc, #340]	; (8001c2c <command_input+0x684>)
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fc56 	bl	8001388 <uart_send>
 8001adc:	e07c      	b.n	8001bd8 <command_input+0x630>
					return;
				}

				led1_toggle=true;
 8001ade:	4b4e      	ldr	r3, [pc, #312]	; (8001c18 <command_input+0x670>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	701a      	strb	r2, [r3, #0]
				existing_command = true;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001aea:	e06a      	b.n	8001bc2 <command_input+0x61a>
			}
		}
		else if(is_same_word(buf,(uint8_t *)"2",word_len)){
 8001aec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001af0:	461a      	mov	r2, r3
 8001af2:	494f      	ldr	r1, [pc, #316]	; (8001c30 <command_input+0x688>)
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fd0b 	bl	8001510 <is_same_word>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d060      	beq.n	8001bc2 <command_input+0x61a>
			word_len+=2;
 8001b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b04:	3302      	adds	r3, #2
 8001b06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if(is_same_word(buf,(uint8_t *)"on",word_len)){
 8001b0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4940      	ldr	r1, [pc, #256]	; (8001c14 <command_input+0x66c>)
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fcfc 	bl	8001510 <is_same_word>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <command_input+0x590>
				led2_toggle=false;
 8001b1e:	4b45      	ldr	r3, [pc, #276]	; (8001c34 <command_input+0x68c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b2a:	483c      	ldr	r0, [pc, #240]	; (8001c1c <command_input+0x674>)
 8001b2c:	f002 fa32 	bl	8003f94 <HAL_GPIO_WritePin>
				existing_command = true;
 8001b30:	2301      	movs	r3, #1
 8001b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b36:	e044      	b.n	8001bc2 <command_input+0x61a>
			}
			else if(is_same_word(buf,(uint8_t *)"off",word_len)){
 8001b38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4938      	ldr	r1, [pc, #224]	; (8001c20 <command_input+0x678>)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fce5 	bl	8001510 <is_same_word>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00c      	beq.n	8001b66 <command_input+0x5be>
				led2_toggle=false;
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <command_input+0x68c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b58:	4830      	ldr	r0, [pc, #192]	; (8001c1c <command_input+0x674>)
 8001b5a:	f002 fa1b 	bl	8003f94 <HAL_GPIO_WritePin>
				existing_command = true;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b64:	e02d      	b.n	8001bc2 <command_input+0x61a>
			}
			else if(is_same_word(buf,(uint8_t *)"toggle",word_len)){
 8001b66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	492d      	ldr	r1, [pc, #180]	; (8001c24 <command_input+0x67c>)
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fcce 	bl	8001510 <is_same_word>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d023      	beq.n	8001bc2 <command_input+0x61a>
				word_len=strlen("led2 toggle ");
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				bool is_number = false;
 8001b80:	2300      	movs	r3, #0
 8001b82:	72fb      	strb	r3, [r7, #11]
				led2_toggle_time = string_to_num((char *)buf+word_len,&is_number,DEC);
 8001b84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f107 010b 	add.w	r1, r7, #11
 8001b90:	220a      	movs	r2, #10
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fec2 	bl	800091c <string_to_num>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <command_input+0x690>)
 8001b9e:	801a      	strh	r2, [r3, #0]
				if(!is_number){
 8001ba0:	7afb      	ldrb	r3, [r7, #11]
 8001ba2:	f083 0301 	eor.w	r3, r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d004      	beq.n	8001bb6 <command_input+0x60e>
					uart_send(1,(char *)"\nerror : toggle time value must be number!");
 8001bac:	491f      	ldr	r1, [pc, #124]	; (8001c2c <command_input+0x684>)
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7ff fbea 	bl	8001388 <uart_send>
 8001bb4:	e010      	b.n	8001bd8 <command_input+0x630>
					return;
				}

				led2_toggle=true;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <command_input+0x68c>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
				existing_command = true;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			}
		}
	}
	if (!existing_command){
 8001bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bc6:	f083 0301 	eor.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <command_input+0x630>
		uart_send(1,"\ncommand is not existing. type \'help\' to get command list.");
 8001bd0:	491a      	ldr	r1, [pc, #104]	; (8001c3c <command_input+0x694>)
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f7ff fbd8 	bl	8001388 <uart_send>
	}
}
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	66666666 	.word	0x66666666
 8001be4:	400a6666 	.word	0x400a6666
 8001be8:	080060c4 	.word	0x080060c4
 8001bec:	080060cc 	.word	0x080060cc
 8001bf0:	080060d4 	.word	0x080060d4
 8001bf4:	080060dc 	.word	0x080060dc
 8001bf8:	080060e4 	.word	0x080060e4
 8001bfc:	080060f4 	.word	0x080060f4
 8001c00:	08006108 	.word	0x08006108
 8001c04:	2000007c 	.word	0x2000007c
 8001c08:	08006114 	.word	0x08006114
 8001c0c:	08006128 	.word	0x08006128
 8001c10:	0800612c 	.word	0x0800612c
 8001c14:	08006130 	.word	0x08006130
 8001c18:	2000015b 	.word	0x2000015b
 8001c1c:	40010800 	.word	0x40010800
 8001c20:	08006134 	.word	0x08006134
 8001c24:	08006138 	.word	0x08006138
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	08006140 	.word	0x08006140
 8001c30:	0800616c 	.word	0x0800616c
 8001c34:	2000015c 	.word	0x2000015c
 8001c38:	20000002 	.word	0x20000002
 8001c3c:	08006170 	.word	0x08006170

08001c40 <gpio_led_toggle>:

void gpio_led_toggle(uint32_t *led1_time,uint32_t *led2_time){
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
	if (led1_toggle){
 8001c4a:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <gpio_led_toggle+0x70>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d012      	beq.n	8001c78 <gpio_led_toggle+0x38>
		if (HAL_GetTick()-*led1_time>led1_toggle_time){
 8001c52:	f000 ff8f 	bl	8002b74 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <gpio_led_toggle+0x74>)
 8001c60:	8812      	ldrh	r2, [r2, #0]
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d908      	bls.n	8001c78 <gpio_led_toggle+0x38>
			*led1_time=HAL_GetTick();
 8001c66:	f000 ff85 	bl	8002b74 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001c70:	2120      	movs	r1, #32
 8001c72:	4811      	ldr	r0, [pc, #68]	; (8001cb8 <gpio_led_toggle+0x78>)
 8001c74:	f002 f9a6 	bl	8003fc4 <HAL_GPIO_TogglePin>
		}
	}
	if (led2_toggle){
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <gpio_led_toggle+0x7c>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d013      	beq.n	8001ca8 <gpio_led_toggle+0x68>
		if (HAL_GetTick()-*led2_time>led2_toggle_time){
 8001c80:	f000 ff78 	bl	8002b74 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4a0c      	ldr	r2, [pc, #48]	; (8001cc0 <gpio_led_toggle+0x80>)
 8001c8e:	8812      	ldrh	r2, [r2, #0]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d909      	bls.n	8001ca8 <gpio_led_toggle+0x68>
			*led2_time=HAL_GetTick();
 8001c94:	f000 ff6e 	bl	8002b74 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 8001c9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <gpio_led_toggle+0x78>)
 8001ca4:	f002 f98e 	bl	8003fc4 <HAL_GPIO_TogglePin>
		}
	}
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	2000015b 	.word	0x2000015b
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	40010800 	.word	0x40010800
 8001cbc:	2000015c 	.word	0x2000015c
 8001cc0:	20000002 	.word	0x20000002

08001cc4 <cli_start>:

void cli_start(uint8_t i,keytype key_input){
 8001cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71bb      	strb	r3, [r7, #6]
	switch (key_input){
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	f200 842d 	bhi.w	8002538 <cli_start+0x874>
 8001cde:	a201      	add	r2, pc, #4	; (adr r2, 8001ce4 <cli_start+0x20>)
 8001ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce4:	08001de3 	.word	0x08001de3
 8001ce8:	08001e97 	.word	0x08001e97
 8001cec:	08001d0d 	.word	0x08001d0d
 8001cf0:	08001d5f 	.word	0x08001d5f
 8001cf4:	08001f49 	.word	0x08001f49
 8001cf8:	08002009 	.word	0x08002009
 8001cfc:	080023d9 	.word	0x080023d9
 8001d00:	08002269 	.word	0x08002269
 8001d04:	0800205f 	.word	0x0800205f
 8001d08:	080020f3 	.word	0x080020f3
		case LEFT:
			if(data[data_num].cursor_index>0){
 8001d0c:	4bb5      	ldr	r3, [pc, #724]	; (8001fe4 <cli_start+0x320>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4ab5      	ldr	r2, [pc, #724]	; (8001fe8 <cli_start+0x324>)
 8001d14:	460b      	mov	r3, r1
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	440b      	add	r3, r1
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3321      	adds	r3, #33	; 0x21
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 840a 	beq.w	800253c <cli_start+0x878>
				data[data_num].cursor_index--;
 8001d28:	4bae      	ldr	r3, [pc, #696]	; (8001fe4 <cli_start+0x320>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	49ae      	ldr	r1, [pc, #696]	; (8001fe8 <cli_start+0x324>)
 8001d30:	4613      	mov	r3, r2
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	440b      	add	r3, r1
 8001d3a:	3321      	adds	r3, #33	; 0x21
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b2d8      	uxtb	r0, r3
 8001d42:	49a9      	ldr	r1, [pc, #676]	; (8001fe8 <cli_start+0x324>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3321      	adds	r3, #33	; 0x21
 8001d50:	4602      	mov	r2, r0
 8001d52:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1D");
 8001d54:	49a5      	ldr	r1, [pc, #660]	; (8001fec <cli_start+0x328>)
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff fb16 	bl	8001388 <uart_send>
			}
			break;
 8001d5c:	e3ee      	b.n	800253c <cli_start+0x878>
		case RIGHT:
			if(data[data_num].cursor_index<32 && data[data_num].cursor_index<data[data_num].command_index){
 8001d5e:	4ba1      	ldr	r3, [pc, #644]	; (8001fe4 <cli_start+0x320>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	4aa0      	ldr	r2, [pc, #640]	; (8001fe8 <cli_start+0x324>)
 8001d66:	460b      	mov	r3, r1
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	440b      	add	r3, r1
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	3321      	adds	r3, #33	; 0x21
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	f200 83e3 	bhi.w	8002540 <cli_start+0x87c>
 8001d7a:	4b9a      	ldr	r3, [pc, #616]	; (8001fe4 <cli_start+0x320>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4a99      	ldr	r2, [pc, #612]	; (8001fe8 <cli_start+0x324>)
 8001d82:	460b      	mov	r3, r1
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	440b      	add	r3, r1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3321      	adds	r3, #33	; 0x21
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b94      	ldr	r3, [pc, #592]	; (8001fe4 <cli_start+0x320>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	4994      	ldr	r1, [pc, #592]	; (8001fe8 <cli_start+0x324>)
 8001d98:	4603      	mov	r3, r0
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4403      	add	r3, r0
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	440b      	add	r3, r1
 8001da2:	3320      	adds	r3, #32
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	f080 83ca 	bcs.w	8002540 <cli_start+0x87c>
				data[data_num].cursor_index++;
 8001dac:	4b8d      	ldr	r3, [pc, #564]	; (8001fe4 <cli_start+0x320>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	498d      	ldr	r1, [pc, #564]	; (8001fe8 <cli_start+0x324>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	4413      	add	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3321      	adds	r3, #33	; 0x21
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	b2d8      	uxtb	r0, r3
 8001dc6:	4988      	ldr	r1, [pc, #544]	; (8001fe8 <cli_start+0x324>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3321      	adds	r3, #33	; 0x21
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1C");
 8001dd8:	4985      	ldr	r1, [pc, #532]	; (8001ff0 <cli_start+0x32c>)
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7ff fad4 	bl	8001388 <uart_send>
			}
			break;
 8001de0:	e3ae      	b.n	8002540 <cli_start+0x87c>
		case UP:
			if(data[data_num].cursor_index>0){
 8001de2:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <cli_start+0x320>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4a7f      	ldr	r2, [pc, #508]	; (8001fe8 <cli_start+0x324>)
 8001dea:	460b      	mov	r3, r1
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	440b      	add	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	3321      	adds	r3, #33	; 0x21
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00f      	beq.n	8001e1c <cli_start+0x158>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <cli_start+0x320>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	4a79      	ldr	r2, [pc, #484]	; (8001fe8 <cli_start+0x324>)
 8001e04:	460b      	mov	r3, r1
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	440b      	add	r3, r1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3321      	adds	r3, #33	; 0x21
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4977      	ldr	r1, [pc, #476]	; (8001ff4 <cli_start+0x330>)
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff fab6 	bl	8001388 <uart_send>
			}
			uart_send(1,"\x1B[0J");
 8001e1c:	4976      	ldr	r1, [pc, #472]	; (8001ff8 <cli_start+0x334>)
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fab2 	bl	8001388 <uart_send>
			data_num++;
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <cli_start+0x320>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b6d      	ldr	r3, [pc, #436]	; (8001fe4 <cli_start+0x320>)
 8001e2e:	701a      	strb	r2, [r3, #0]
			data_num%=3;
 8001e30:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <cli_start+0x320>)
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	4b71      	ldr	r3, [pc, #452]	; (8001ffc <cli_start+0x338>)
 8001e36:	fba3 1302 	umull	r1, r3, r3, r2
 8001e3a:	0859      	lsrs	r1, r3, #1
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	440b      	add	r3, r1
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <cli_start+0x320>)
 8001e48:	701a      	strb	r2, [r3, #0]
			uart_send(1,"\x1B[4h%s\x1B[4l",data[data_num].command_buffer);
 8001e4a:	4b66      	ldr	r3, [pc, #408]	; (8001fe4 <cli_start+0x320>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4613      	mov	r3, r2
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4a63      	ldr	r2, [pc, #396]	; (8001fe8 <cli_start+0x324>)
 8001e5a:	4413      	add	r3, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4968      	ldr	r1, [pc, #416]	; (8002000 <cli_start+0x33c>)
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff fa91 	bl	8001388 <uart_send>
			data[data_num].cursor_index=data[data_num].command_index;
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <cli_start+0x320>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4b5d      	ldr	r3, [pc, #372]	; (8001fe4 <cli_start+0x320>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	4a5d      	ldr	r2, [pc, #372]	; (8001fe8 <cli_start+0x324>)
 8001e74:	4603      	mov	r3, r0
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4403      	add	r3, r0
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3320      	adds	r3, #32
 8001e80:	7818      	ldrb	r0, [r3, #0]
 8001e82:	4a59      	ldr	r2, [pc, #356]	; (8001fe8 <cli_start+0x324>)
 8001e84:	460b      	mov	r3, r1
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	440b      	add	r3, r1
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3321      	adds	r3, #33	; 0x21
 8001e90:	4602      	mov	r2, r0
 8001e92:	701a      	strb	r2, [r3, #0]
			break;
 8001e94:	e35f      	b.n	8002556 <cli_start+0x892>
		case DOWN:
			if(data[data_num].cursor_index>0){
 8001e96:	4b53      	ldr	r3, [pc, #332]	; (8001fe4 <cli_start+0x320>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4a52      	ldr	r2, [pc, #328]	; (8001fe8 <cli_start+0x324>)
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	440b      	add	r3, r1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3321      	adds	r3, #33	; 0x21
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00f      	beq.n	8001ed0 <cli_start+0x20c>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 8001eb0:	4b4c      	ldr	r3, [pc, #304]	; (8001fe4 <cli_start+0x320>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4a4c      	ldr	r2, [pc, #304]	; (8001fe8 <cli_start+0x324>)
 8001eb8:	460b      	mov	r3, r1
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	440b      	add	r3, r1
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3321      	adds	r3, #33	; 0x21
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	494a      	ldr	r1, [pc, #296]	; (8001ff4 <cli_start+0x330>)
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f7ff fa5c 	bl	8001388 <uart_send>
			}
			uart_send(1,"\x1B[0J");
 8001ed0:	4949      	ldr	r1, [pc, #292]	; (8001ff8 <cli_start+0x334>)
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff fa58 	bl	8001388 <uart_send>
			if(data_num>0){
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <cli_start+0x320>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d006      	beq.n	8001eee <cli_start+0x22a>
				data_num--;
 8001ee0:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <cli_start+0x320>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <cli_start+0x320>)
 8001eea:	701a      	strb	r2, [r3, #0]
 8001eec:	e006      	b.n	8001efc <cli_start+0x238>
			}
			else if(data_num==0){
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <cli_start+0x320>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <cli_start+0x238>
				data_num=2;
 8001ef6:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <cli_start+0x320>)
 8001ef8:	2202      	movs	r2, #2
 8001efa:	701a      	strb	r2, [r3, #0]
			}
			uart_send(1,"\x1B[4h%s\x1B[4l",data[data_num].command_buffer);
 8001efc:	4b39      	ldr	r3, [pc, #228]	; (8001fe4 <cli_start+0x320>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4a37      	ldr	r2, [pc, #220]	; (8001fe8 <cli_start+0x324>)
 8001f0c:	4413      	add	r3, r2
 8001f0e:	461a      	mov	r2, r3
 8001f10:	493b      	ldr	r1, [pc, #236]	; (8002000 <cli_start+0x33c>)
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff fa38 	bl	8001388 <uart_send>
			data[data_num].cursor_index=data[data_num].command_index;
 8001f18:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <cli_start+0x320>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <cli_start+0x320>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	4a30      	ldr	r2, [pc, #192]	; (8001fe8 <cli_start+0x324>)
 8001f26:	4603      	mov	r3, r0
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	4403      	add	r3, r0
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	3320      	adds	r3, #32
 8001f32:	7818      	ldrb	r0, [r3, #0]
 8001f34:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <cli_start+0x324>)
 8001f36:	460b      	mov	r3, r1
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	440b      	add	r3, r1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	3321      	adds	r3, #33	; 0x21
 8001f42:	4602      	mov	r2, r0
 8001f44:	701a      	strb	r2, [r3, #0]
			break;
 8001f46:	e306      	b.n	8002556 <cli_start+0x892>
		case END:
			if(data[data_num].command_index>data[data_num].cursor_index){
 8001f48:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <cli_start+0x320>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4a26      	ldr	r2, [pc, #152]	; (8001fe8 <cli_start+0x324>)
 8001f50:	460b      	mov	r3, r1
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	440b      	add	r3, r1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4413      	add	r3, r2
 8001f5a:	3320      	adds	r3, #32
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	4b21      	ldr	r3, [pc, #132]	; (8001fe4 <cli_start+0x320>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	4920      	ldr	r1, [pc, #128]	; (8001fe8 <cli_start+0x324>)
 8001f66:	4603      	mov	r3, r0
 8001f68:	011b      	lsls	r3, r3, #4
 8001f6a:	4403      	add	r3, r0
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	440b      	add	r3, r1
 8001f70:	3321      	adds	r3, #33	; 0x21
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f240 82e5 	bls.w	8002544 <cli_start+0x880>
				uart_send(1,"\x1B[%dC",data[data_num].command_index-data[data_num].cursor_index);
 8001f7a:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <cli_start+0x320>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <cli_start+0x324>)
 8001f82:	460b      	mov	r3, r1
 8001f84:	011b      	lsls	r3, r3, #4
 8001f86:	440b      	add	r3, r1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3320      	adds	r3, #32
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <cli_start+0x320>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	4619      	mov	r1, r3
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <cli_start+0x324>)
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	440b      	add	r3, r1
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3321      	adds	r3, #33	; 0x21
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	1ac3      	subs	r3, r0, r3
 8001faa:	461a      	mov	r2, r3
 8001fac:	4915      	ldr	r1, [pc, #84]	; (8002004 <cli_start+0x340>)
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff f9ea 	bl	8001388 <uart_send>
				data[data_num].cursor_index=data[data_num].command_index;
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <cli_start+0x320>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <cli_start+0x320>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4a09      	ldr	r2, [pc, #36]	; (8001fe8 <cli_start+0x324>)
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	4403      	add	r3, r0
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	3320      	adds	r3, #32
 8001fce:	7818      	ldrb	r0, [r3, #0]
 8001fd0:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <cli_start+0x324>)
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	440b      	add	r3, r1
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	3321      	adds	r3, #33	; 0x21
 8001fde:	4602      	mov	r2, r0
 8001fe0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001fe2:	e2af      	b.n	8002544 <cli_start+0x880>
 8001fe4:	2000015a 	.word	0x2000015a
 8001fe8:	200000f4 	.word	0x200000f4
 8001fec:	080061ac 	.word	0x080061ac
 8001ff0:	080061b4 	.word	0x080061b4
 8001ff4:	080061bc 	.word	0x080061bc
 8001ff8:	080061c4 	.word	0x080061c4
 8001ffc:	aaaaaaab 	.word	0xaaaaaaab
 8002000:	080061cc 	.word	0x080061cc
 8002004:	080061d8 	.word	0x080061d8
		case HOME:
			if(data[data_num].cursor_index>0){
 8002008:	4b90      	ldr	r3, [pc, #576]	; (800224c <cli_start+0x588>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	4a90      	ldr	r2, [pc, #576]	; (8002250 <cli_start+0x58c>)
 8002010:	460b      	mov	r3, r1
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	440b      	add	r3, r1
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	3321      	adds	r3, #33	; 0x21
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8292 	beq.w	8002548 <cli_start+0x884>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 8002024:	4b89      	ldr	r3, [pc, #548]	; (800224c <cli_start+0x588>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	4a89      	ldr	r2, [pc, #548]	; (8002250 <cli_start+0x58c>)
 800202c:	460b      	mov	r3, r1
 800202e:	011b      	lsls	r3, r3, #4
 8002030:	440b      	add	r3, r1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	3321      	adds	r3, #33	; 0x21
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	4985      	ldr	r1, [pc, #532]	; (8002254 <cli_start+0x590>)
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff f9a2 	bl	8001388 <uart_send>
				data[data_num].cursor_index=0;
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <cli_start+0x588>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	4a81      	ldr	r2, [pc, #516]	; (8002250 <cli_start+0x58c>)
 800204c:	460b      	mov	r3, r1
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	440b      	add	r3, r1
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	3321      	adds	r3, #33	; 0x21
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800205c:	e274      	b.n	8002548 <cli_start+0x884>
		case ENTER:
			/*operating command when enter is pressed*/
			command_input(data[data_num].command_buffer);
 800205e:	4b7b      	ldr	r3, [pc, #492]	; (800224c <cli_start+0x588>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	4413      	add	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4a78      	ldr	r2, [pc, #480]	; (8002250 <cli_start+0x58c>)
 800206e:	4413      	add	r3, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fa99 	bl	80015a8 <command_input>
			/*end operating*/
			uart_send(1,"\nCLI-# ");
 8002076:	4978      	ldr	r1, [pc, #480]	; (8002258 <cli_start+0x594>)
 8002078:	2001      	movs	r0, #1
 800207a:	f7ff f985 	bl	8001388 <uart_send>
			data_num++;
 800207e:	4b73      	ldr	r3, [pc, #460]	; (800224c <cli_start+0x588>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b71      	ldr	r3, [pc, #452]	; (800224c <cli_start+0x588>)
 8002088:	701a      	strb	r2, [r3, #0]
			data_num%=3;
 800208a:	4b70      	ldr	r3, [pc, #448]	; (800224c <cli_start+0x588>)
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	4b73      	ldr	r3, [pc, #460]	; (800225c <cli_start+0x598>)
 8002090:	fba3 1302 	umull	r1, r3, r3, r2
 8002094:	0859      	lsrs	r1, r3, #1
 8002096:	460b      	mov	r3, r1
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	440b      	add	r3, r1
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	4b6a      	ldr	r3, [pc, #424]	; (800224c <cli_start+0x588>)
 80020a2:	701a      	strb	r2, [r3, #0]
			memset(data[data_num].command_buffer,0,32);
 80020a4:	4b69      	ldr	r3, [pc, #420]	; (800224c <cli_start+0x588>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	4a67      	ldr	r2, [pc, #412]	; (8002250 <cli_start+0x58c>)
 80020b4:	4413      	add	r3, r2
 80020b6:	2220      	movs	r2, #32
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 fa02 	bl	80054c4 <memset>
			data[data_num].command_index=0;
 80020c0:	4b62      	ldr	r3, [pc, #392]	; (800224c <cli_start+0x588>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	4a62      	ldr	r2, [pc, #392]	; (8002250 <cli_start+0x58c>)
 80020c8:	460b      	mov	r3, r1
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	440b      	add	r3, r1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	3320      	adds	r3, #32
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
			data[data_num].cursor_index=0;
 80020d8:	4b5c      	ldr	r3, [pc, #368]	; (800224c <cli_start+0x588>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	4a5c      	ldr	r2, [pc, #368]	; (8002250 <cli_start+0x58c>)
 80020e0:	460b      	mov	r3, r1
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	440b      	add	r3, r1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	3321      	adds	r3, #33	; 0x21
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
			break;
 80020f0:	e231      	b.n	8002556 <cli_start+0x892>
		case IS_WORD:
			if(data[data_num].command_index<32){
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <cli_start+0x588>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	4619      	mov	r1, r3
 80020f8:	4a55      	ldr	r2, [pc, #340]	; (8002250 <cli_start+0x58c>)
 80020fa:	460b      	mov	r3, r1
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	440b      	add	r3, r1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	3320      	adds	r3, #32
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b1f      	cmp	r3, #31
 800210a:	f200 821f 	bhi.w	800254c <cli_start+0x888>
				data[data_num].command_index++;
 800210e:	4b4f      	ldr	r3, [pc, #316]	; (800224c <cli_start+0x588>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	494e      	ldr	r1, [pc, #312]	; (8002250 <cli_start+0x58c>)
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	440b      	add	r3, r1
 8002120:	3320      	adds	r3, #32
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	b2d8      	uxtb	r0, r3
 8002128:	4949      	ldr	r1, [pc, #292]	; (8002250 <cli_start+0x58c>)
 800212a:	4613      	mov	r3, r2
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	440b      	add	r3, r1
 8002134:	3320      	adds	r3, #32
 8002136:	4602      	mov	r2, r0
 8002138:	701a      	strb	r2, [r3, #0]
				if(data[data_num].command_index-1!=data[data_num].cursor_index){
 800213a:	4b44      	ldr	r3, [pc, #272]	; (800224c <cli_start+0x588>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	4a43      	ldr	r2, [pc, #268]	; (8002250 <cli_start+0x58c>)
 8002142:	460b      	mov	r3, r1
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	440b      	add	r3, r1
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3320      	adds	r3, #32
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	1e5a      	subs	r2, r3, #1
 8002152:	4b3e      	ldr	r3, [pc, #248]	; (800224c <cli_start+0x588>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	493d      	ldr	r1, [pc, #244]	; (8002250 <cli_start+0x58c>)
 800215a:	4603      	mov	r3, r0
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	4403      	add	r3, r0
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	440b      	add	r3, r1
 8002164:	3321      	adds	r3, #33	; 0x21
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d03f      	beq.n	80021ec <cli_start+0x528>
					for(int8_t j=data[data_num].command_index-1;j>=data[data_num].cursor_index;j--){
 800216c:	4b37      	ldr	r3, [pc, #220]	; (800224c <cli_start+0x588>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	4a37      	ldr	r2, [pc, #220]	; (8002250 <cli_start+0x58c>)
 8002174:	460b      	mov	r3, r1
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	440b      	add	r3, r1
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	3320      	adds	r3, #32
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	3b01      	subs	r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e021      	b.n	80021ce <cli_start+0x50a>
						data[data_num].command_buffer[j+1]=data[data_num].command_buffer[j];
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <cli_start+0x588>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461d      	mov	r5, r3
 8002190:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <cli_start+0x588>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461c      	mov	r4, r3
 800219a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	482b      	ldr	r0, [pc, #172]	; (8002250 <cli_start+0x58c>)
 80021a2:	462b      	mov	r3, r5
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	442b      	add	r3, r5
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4403      	add	r3, r0
 80021ac:	440b      	add	r3, r1
 80021ae:	7818      	ldrb	r0, [r3, #0]
 80021b0:	4927      	ldr	r1, [pc, #156]	; (8002250 <cli_start+0x58c>)
 80021b2:	4623      	mov	r3, r4
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	4423      	add	r3, r4
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	440b      	add	r3, r1
 80021bc:	4413      	add	r3, r2
 80021be:	4602      	mov	r2, r0
 80021c0:	701a      	strb	r2, [r3, #0]
					for(int8_t j=data[data_num].command_index-1;j>=data[data_num].cursor_index;j--){
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	73fb      	strb	r3, [r7, #15]
 80021ce:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80021d2:	4b1e      	ldr	r3, [pc, #120]	; (800224c <cli_start+0x588>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	491d      	ldr	r1, [pc, #116]	; (8002250 <cli_start+0x58c>)
 80021da:	4603      	mov	r3, r0
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	4403      	add	r3, r0
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	440b      	add	r3, r1
 80021e4:	3321      	adds	r3, #33	; 0x21
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dace      	bge.n	800218a <cli_start+0x4c6>
					}
				}
				data[data_num].command_buffer[data[data_num].cursor_index++]=command_tx[i];
 80021ec:	79f8      	ldrb	r0, [r7, #7]
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <cli_start+0x588>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461d      	mov	r5, r3
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <cli_start+0x588>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4915      	ldr	r1, [pc, #84]	; (8002250 <cli_start+0x58c>)
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	4413      	add	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	440b      	add	r3, r1
 8002206:	3321      	adds	r3, #33	; 0x21
 8002208:	7819      	ldrb	r1, [r3, #0]
 800220a:	1c4b      	adds	r3, r1, #1
 800220c:	b2de      	uxtb	r6, r3
 800220e:	4c10      	ldr	r4, [pc, #64]	; (8002250 <cli_start+0x58c>)
 8002210:	4613      	mov	r3, r2
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	4413      	add	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4423      	add	r3, r4
 800221a:	3321      	adds	r3, #33	; 0x21
 800221c:	4632      	mov	r2, r6
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	460c      	mov	r4, r1
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <cli_start+0x59c>)
 8002224:	5c19      	ldrb	r1, [r3, r0]
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <cli_start+0x58c>)
 8002228:	462b      	mov	r3, r5
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	442b      	add	r3, r5
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	4423      	add	r3, r4
 8002234:	460a      	mov	r2, r1
 8002236:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[4h%c\x1B[4l",command_tx[i]);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <cli_start+0x59c>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	461a      	mov	r2, r3
 8002240:	4908      	ldr	r1, [pc, #32]	; (8002264 <cli_start+0x5a0>)
 8002242:	2001      	movs	r0, #1
 8002244:	f7ff f8a0 	bl	8001388 <uart_send>
			}
			break;
 8002248:	e180      	b.n	800254c <cli_start+0x888>
 800224a:	bf00      	nop
 800224c:	2000015a 	.word	0x2000015a
 8002250:	200000f4 	.word	0x200000f4
 8002254:	080061bc 	.word	0x080061bc
 8002258:	080061e0 	.word	0x080061e0
 800225c:	aaaaaaab 	.word	0xaaaaaaab
 8002260:	200000ac 	.word	0x200000ac
 8002264:	080061e8 	.word	0x080061e8
		case BACKSPACE:
			if(data[data_num].command_index>0 && data[data_num].cursor_index>0){
 8002268:	4bbd      	ldr	r3, [pc, #756]	; (8002560 <cli_start+0x89c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	4abd      	ldr	r2, [pc, #756]	; (8002564 <cli_start+0x8a0>)
 8002270:	460b      	mov	r3, r1
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	440b      	add	r3, r1
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	3320      	adds	r3, #32
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8166 	beq.w	8002550 <cli_start+0x88c>
 8002284:	4bb6      	ldr	r3, [pc, #728]	; (8002560 <cli_start+0x89c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	4ab6      	ldr	r2, [pc, #728]	; (8002564 <cli_start+0x8a0>)
 800228c:	460b      	mov	r3, r1
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	440b      	add	r3, r1
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	3321      	adds	r3, #33	; 0x21
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 8158 	beq.w	8002550 <cli_start+0x88c>
				data[data_num].command_index--;
 80022a0:	4baf      	ldr	r3, [pc, #700]	; (8002560 <cli_start+0x89c>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	461a      	mov	r2, r3
 80022a6:	49af      	ldr	r1, [pc, #700]	; (8002564 <cli_start+0x8a0>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	4413      	add	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	440b      	add	r3, r1
 80022b2:	3320      	adds	r3, #32
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b2d8      	uxtb	r0, r3
 80022ba:	49aa      	ldr	r1, [pc, #680]	; (8002564 <cli_start+0x8a0>)
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	4413      	add	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	440b      	add	r3, r1
 80022c6:	3320      	adds	r3, #32
 80022c8:	4602      	mov	r2, r0
 80022ca:	701a      	strb	r2, [r3, #0]
				data[data_num].command_buffer[--data[data_num].cursor_index]=0;
 80022cc:	4ba4      	ldr	r3, [pc, #656]	; (8002560 <cli_start+0x89c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	4ba3      	ldr	r3, [pc, #652]	; (8002560 <cli_start+0x89c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	49a2      	ldr	r1, [pc, #648]	; (8002564 <cli_start+0x8a0>)
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4413      	add	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	440b      	add	r3, r1
 80022e4:	3321      	adds	r3, #33	; 0x21
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b2dc      	uxtb	r4, r3
 80022ec:	499d      	ldr	r1, [pc, #628]	; (8002564 <cli_start+0x8a0>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	3321      	adds	r3, #33	; 0x21
 80022fa:	4621      	mov	r1, r4
 80022fc:	7019      	strb	r1, [r3, #0]
 80022fe:	4999      	ldr	r1, [pc, #612]	; (8002564 <cli_start+0x8a0>)
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	4413      	add	r3, r2
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	440b      	add	r3, r1
 800230a:	3321      	adds	r3, #33	; 0x21
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	4619      	mov	r1, r3
 8002310:	4a94      	ldr	r2, [pc, #592]	; (8002564 <cli_start+0x8a0>)
 8002312:	4603      	mov	r3, r0
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4403      	add	r3, r0
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4413      	add	r3, r2
 800231c:	440b      	add	r3, r1
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8002322:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <cli_start+0x89c>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	4a8e      	ldr	r2, [pc, #568]	; (8002564 <cli_start+0x8a0>)
 800232a:	460b      	mov	r3, r1
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	440b      	add	r3, r1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	3321      	adds	r3, #33	; 0x21
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	73bb      	strb	r3, [r7, #14]
 800233a:	e021      	b.n	8002380 <cli_start+0x6bc>
					data[data_num].command_buffer[j]=data[data_num].command_buffer[j+1];
 800233c:	4b88      	ldr	r3, [pc, #544]	; (8002560 <cli_start+0x89c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461d      	mov	r5, r3
 8002342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002346:	1c59      	adds	r1, r3, #1
 8002348:	4b85      	ldr	r3, [pc, #532]	; (8002560 <cli_start+0x89c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461c      	mov	r4, r3
 800234e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002352:	4884      	ldr	r0, [pc, #528]	; (8002564 <cli_start+0x8a0>)
 8002354:	462b      	mov	r3, r5
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	442b      	add	r3, r5
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4403      	add	r3, r0
 800235e:	440b      	add	r3, r1
 8002360:	7818      	ldrb	r0, [r3, #0]
 8002362:	4980      	ldr	r1, [pc, #512]	; (8002564 <cli_start+0x8a0>)
 8002364:	4623      	mov	r3, r4
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	4423      	add	r3, r4
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	4413      	add	r3, r2
 8002370:	4602      	mov	r2, r0
 8002372:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8002374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	3301      	adds	r3, #1
 800237c:	b2db      	uxtb	r3, r3
 800237e:	73bb      	strb	r3, [r7, #14]
 8002380:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8002384:	4b76      	ldr	r3, [pc, #472]	; (8002560 <cli_start+0x89c>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	4976      	ldr	r1, [pc, #472]	; (8002564 <cli_start+0x8a0>)
 800238c:	4603      	mov	r3, r0
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	4403      	add	r3, r0
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	440b      	add	r3, r1
 8002396:	3320      	adds	r3, #32
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	dbce      	blt.n	800233c <cli_start+0x678>
				}
				data[data_num].command_buffer[data[data_num].command_index]=0;
 800239e:	4b70      	ldr	r3, [pc, #448]	; (8002560 <cli_start+0x89c>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4b6e      	ldr	r3, [pc, #440]	; (8002560 <cli_start+0x89c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <cli_start+0x8a0>)
 80023ac:	4603      	mov	r3, r0
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4403      	add	r3, r0
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	3320      	adds	r3, #32
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	4a69      	ldr	r2, [pc, #420]	; (8002564 <cli_start+0x8a0>)
 80023be:	460b      	mov	r3, r1
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	440b      	add	r3, r1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	4403      	add	r3, r0
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1D\x1B[1P");
 80023ce:	4966      	ldr	r1, [pc, #408]	; (8002568 <cli_start+0x8a4>)
 80023d0:	2001      	movs	r0, #1
 80023d2:	f7fe ffd9 	bl	8001388 <uart_send>
			}
			break;
 80023d6:	e0bb      	b.n	8002550 <cli_start+0x88c>
		case DEL:
			if(data[data_num].command_index>0 && data[data_num].command_index!=data[data_num].cursor_index){
 80023d8:	4b61      	ldr	r3, [pc, #388]	; (8002560 <cli_start+0x89c>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	4a61      	ldr	r2, [pc, #388]	; (8002564 <cli_start+0x8a0>)
 80023e0:	460b      	mov	r3, r1
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	440b      	add	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	4413      	add	r3, r2
 80023ea:	3320      	adds	r3, #32
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 80b0 	beq.w	8002554 <cli_start+0x890>
 80023f4:	4b5a      	ldr	r3, [pc, #360]	; (8002560 <cli_start+0x89c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	4a5a      	ldr	r2, [pc, #360]	; (8002564 <cli_start+0x8a0>)
 80023fc:	460b      	mov	r3, r1
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	440b      	add	r3, r1
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	3320      	adds	r3, #32
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	4b55      	ldr	r3, [pc, #340]	; (8002560 <cli_start+0x89c>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	4954      	ldr	r1, [pc, #336]	; (8002564 <cli_start+0x8a0>)
 8002412:	4603      	mov	r3, r0
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4403      	add	r3, r0
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	3321      	adds	r3, #33	; 0x21
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	f000 8097 	beq.w	8002554 <cli_start+0x890>
				data[data_num].command_index--;
 8002426:	4b4e      	ldr	r3, [pc, #312]	; (8002560 <cli_start+0x89c>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	494d      	ldr	r1, [pc, #308]	; (8002564 <cli_start+0x8a0>)
 800242e:	4613      	mov	r3, r2
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	440b      	add	r3, r1
 8002438:	3320      	adds	r3, #32
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	3b01      	subs	r3, #1
 800243e:	b2d8      	uxtb	r0, r3
 8002440:	4948      	ldr	r1, [pc, #288]	; (8002564 <cli_start+0x8a0>)
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4413      	add	r3, r2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	3320      	adds	r3, #32
 800244e:	4602      	mov	r2, r0
 8002450:	701a      	strb	r2, [r3, #0]
				data[data_num].command_buffer[data[data_num].cursor_index]=0;
 8002452:	4b43      	ldr	r3, [pc, #268]	; (8002560 <cli_start+0x89c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	4b41      	ldr	r3, [pc, #260]	; (8002560 <cli_start+0x89c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	4a41      	ldr	r2, [pc, #260]	; (8002564 <cli_start+0x8a0>)
 8002460:	4603      	mov	r3, r0
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	4403      	add	r3, r0
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	3321      	adds	r3, #33	; 0x21
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	4a3c      	ldr	r2, [pc, #240]	; (8002564 <cli_start+0x8a0>)
 8002472:	460b      	mov	r3, r1
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	440b      	add	r3, r1
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	4403      	add	r3, r0
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 8002482:	4b37      	ldr	r3, [pc, #220]	; (8002560 <cli_start+0x89c>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	4619      	mov	r1, r3
 8002488:	4a36      	ldr	r2, [pc, #216]	; (8002564 <cli_start+0x8a0>)
 800248a:	460b      	mov	r3, r1
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	440b      	add	r3, r1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	3321      	adds	r3, #33	; 0x21
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	737b      	strb	r3, [r7, #13]
 800249a:	e021      	b.n	80024e0 <cli_start+0x81c>
					data[data_num].command_buffer[j]=data[data_num].command_buffer[j+1];
 800249c:	4b30      	ldr	r3, [pc, #192]	; (8002560 <cli_start+0x89c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461d      	mov	r5, r3
 80024a2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80024a6:	1c59      	adds	r1, r3, #1
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <cli_start+0x89c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461c      	mov	r4, r3
 80024ae:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80024b2:	482c      	ldr	r0, [pc, #176]	; (8002564 <cli_start+0x8a0>)
 80024b4:	462b      	mov	r3, r5
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	442b      	add	r3, r5
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4403      	add	r3, r0
 80024be:	440b      	add	r3, r1
 80024c0:	7818      	ldrb	r0, [r3, #0]
 80024c2:	4928      	ldr	r1, [pc, #160]	; (8002564 <cli_start+0x8a0>)
 80024c4:	4623      	mov	r3, r4
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	4423      	add	r3, r4
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	440b      	add	r3, r1
 80024ce:	4413      	add	r3, r2
 80024d0:	4602      	mov	r2, r0
 80024d2:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 80024d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	737b      	strb	r3, [r7, #13]
 80024e0:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80024e4:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <cli_start+0x89c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	491e      	ldr	r1, [pc, #120]	; (8002564 <cli_start+0x8a0>)
 80024ec:	4603      	mov	r3, r0
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4403      	add	r3, r0
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	440b      	add	r3, r1
 80024f6:	3320      	adds	r3, #32
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dbce      	blt.n	800249c <cli_start+0x7d8>
				}
				data[data_num].command_buffer[data[data_num].command_index]=0;
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <cli_start+0x89c>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4b16      	ldr	r3, [pc, #88]	; (8002560 <cli_start+0x89c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <cli_start+0x8a0>)
 800250c:	4603      	mov	r3, r0
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	4403      	add	r3, r0
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	3320      	adds	r3, #32
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	4a11      	ldr	r2, [pc, #68]	; (8002564 <cli_start+0x8a0>)
 800251e:	460b      	mov	r3, r1
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	440b      	add	r3, r1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	4403      	add	r3, r0
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1P");
 800252e:	490f      	ldr	r1, [pc, #60]	; (800256c <cli_start+0x8a8>)
 8002530:	2001      	movs	r0, #1
 8002532:	f7fe ff29 	bl	8001388 <uart_send>
			}
			break;
 8002536:	e00d      	b.n	8002554 <cli_start+0x890>
		default:
			break;
 8002538:	bf00      	nop
 800253a:	e00c      	b.n	8002556 <cli_start+0x892>
			break;
 800253c:	bf00      	nop
 800253e:	e00a      	b.n	8002556 <cli_start+0x892>
			break;
 8002540:	bf00      	nop
 8002542:	e008      	b.n	8002556 <cli_start+0x892>
			break;
 8002544:	bf00      	nop
 8002546:	e006      	b.n	8002556 <cli_start+0x892>
			break;
 8002548:	bf00      	nop
 800254a:	e004      	b.n	8002556 <cli_start+0x892>
			break;
 800254c:	bf00      	nop
 800254e:	e002      	b.n	8002556 <cli_start+0x892>
			break;
 8002550:	bf00      	nop
 8002552:	e000      	b.n	8002556 <cli_start+0x892>
			break;
 8002554:	bf00      	nop
	}
	uart_send(2,"\n\n\n");
	uart_send(2,"num %d command buffer val:%s\n",data_num,data[data_num].command_buffer);
	uart_send(2,"command index:%d cursor index:%d\n",data[data_num].command_index,data[data_num].cursor_index);
	*/
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255e:	bf00      	nop
 8002560:	2000015a 	.word	0x2000015a
 8002564:	200000f4 	.word	0x200000f4
 8002568:	080061f4 	.word	0x080061f4
 800256c:	08006200 	.word	0x08006200

08002570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002576:	f000 faa5 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800257a:	f000 f87b 	bl	8002674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800257e:	f7fe f98d 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 8002582:	f7fe f96d 	bl	8000860 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002586:	f000 f975 	bl	8002874 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800258a:	f000 f99d 	bl	80028c8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800258e:	f7fe f8ed 	bl	800076c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1,&command_tx[0],5);
 8002592:	2205      	movs	r2, #5
 8002594:	4930      	ldr	r1, [pc, #192]	; (8002658 <main+0xe8>)
 8002596:	4831      	ldr	r0, [pc, #196]	; (800265c <main+0xec>)
 8002598:	f002 fcf4 	bl	8004f84 <UART_Start_Receive_DMA>
  HAL_ADC_Start(&hadc1);
 800259c:	4830      	ldr	r0, [pc, #192]	; (8002660 <main+0xf0>)
 800259e:	f000 fbef 	bl	8002d80 <HAL_ADC_Start>
  uint32_t pre_time1=HAL_GetTick();
 80025a2:	f000 fae7 	bl	8002b74 <HAL_GetTick>
 80025a6:	4603      	mov	r3, r0
 80025a8:	60bb      	str	r3, [r7, #8]
  uint32_t pre_time2=HAL_GetTick();
 80025aa:	f000 fae3 	bl	8002b74 <HAL_GetTick>
 80025ae:	4603      	mov	r3, r0
 80025b0:	607b      	str	r3, [r7, #4]
  for (int8_t i=0;i<3;i++){
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	e012      	b.n	80025de <main+0x6e>
	  memset(data[i].command_buffer,0,32);
 80025b8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	4413      	add	r3, r2
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4a27      	ldr	r2, [pc, #156]	; (8002664 <main+0xf4>)
 80025c6:	4413      	add	r3, r2
 80025c8:	2220      	movs	r2, #32
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f002 ff79 	bl	80054c4 <memset>
  for (int8_t i=0;i<3;i++){
 80025d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	3301      	adds	r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	dde8      	ble.n	80025b8 <main+0x48>
  }
  memset(send_buffer,0,32);
 80025e6:	2220      	movs	r2, #32
 80025e8:	2100      	movs	r1, #0
 80025ea:	481f      	ldr	r0, [pc, #124]	; (8002668 <main+0xf8>)
 80025ec:	f002 ff6a 	bl	80054c4 <memset>
  uart_send(1,"CLI-# ");
 80025f0:	491e      	ldr	r1, [pc, #120]	; (800266c <main+0xfc>)
 80025f2:	2001      	movs	r0, #1
 80025f4:	f7fe fec8 	bl	8001388 <uart_send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t i=0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73bb      	strb	r3, [r7, #14]
	keytype key=KEY_NONE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	737b      	strb	r3, [r7, #13]
	for (;;){
		i=i%5;
 8002600:	7bba      	ldrb	r2, [r7, #14]
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <main+0x100>)
 8002604:	fba3 1302 	umull	r1, r3, r3, r2
 8002608:	0899      	lsrs	r1, r3, #2
 800260a:	460b      	mov	r3, r1
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	73bb      	strb	r3, [r7, #14]
		gpio_led_toggle(&pre_time1,&pre_time2);
 8002614:	1d3a      	adds	r2, r7, #4
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fb0f 	bl	8001c40 <gpio_led_toggle>
		key=is_command(&command_tx[0],i);
 8002622:	7bbb      	ldrb	r3, [r7, #14]
 8002624:	4619      	mov	r1, r3
 8002626:	480c      	ldr	r0, [pc, #48]	; (8002658 <main+0xe8>)
 8002628:	f7fe fee2 	bl	80013f0 <is_command>
 800262c:	4603      	mov	r3, r0
 800262e:	737b      	strb	r3, [r7, #13]
		if (key!=KEY_NONE){
 8002630:	7b7b      	ldrb	r3, [r7, #13]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d103      	bne.n	800263e <main+0xce>
			break;
		}
		i++;
 8002636:	7bbb      	ldrb	r3, [r7, #14]
 8002638:	3301      	adds	r3, #1
 800263a:	73bb      	strb	r3, [r7, #14]
		i=i%5;
 800263c:	e7e0      	b.n	8002600 <main+0x90>
			break;
 800263e:	bf00      	nop
	  }
	cli_start(i,key);
 8002640:	7b7a      	ldrb	r2, [r7, #13]
 8002642:	7bbb      	ldrb	r3, [r7, #14]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fb3c 	bl	8001cc4 <cli_start>
	memset(command_tx,0,5);
 800264c:	2205      	movs	r2, #5
 800264e:	2100      	movs	r1, #0
 8002650:	4801      	ldr	r0, [pc, #4]	; (8002658 <main+0xe8>)
 8002652:	f002 ff37 	bl	80054c4 <memset>
  {
 8002656:	e7cf      	b.n	80025f8 <main+0x88>
 8002658:	200000ac 	.word	0x200000ac
 800265c:	20000570 	.word	0x20000570
 8002660:	2000007c 	.word	0x2000007c
 8002664:	200000f4 	.word	0x200000f4
 8002668:	200000b4 	.word	0x200000b4
 800266c:	08006208 	.word	0x08006208
 8002670:	cccccccd 	.word	0xcccccccd

08002674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b094      	sub	sp, #80	; 0x50
 8002678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800267e:	2228      	movs	r2, #40	; 0x28
 8002680:	2100      	movs	r1, #0
 8002682:	4618      	mov	r0, r3
 8002684:	f002 ff1e 	bl	80054c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002698:	1d3b      	adds	r3, r7, #4
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
 80026a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80026ae:	2300      	movs	r3, #0
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026b2:	2301      	movs	r3, #1
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b6:	2302      	movs	r3, #2
 80026b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026c0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ca:	4618      	mov	r0, r3
 80026cc:	f001 fc94 	bl	8003ff8 <HAL_RCC_OscConfig>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80026d6:	f000 f828 	bl	800272a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026da:	230f      	movs	r3, #15
 80026dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026de:	2302      	movs	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	2102      	movs	r1, #2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 ff00 	bl	80044fc <HAL_RCC_ClockConfig>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002702:	f000 f812 	bl	800272a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002706:	2302      	movs	r3, #2
 8002708:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002710:	1d3b      	adds	r3, r7, #4
 8002712:	4618      	mov	r0, r3
 8002714:	f002 f880 	bl	8004818 <HAL_RCCEx_PeriphCLKConfig>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800271e:	f000 f804 	bl	800272a <Error_Handler>
  }
}
 8002722:	bf00      	nop
 8002724:	3750      	adds	r7, #80	; 0x50
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800272a:	b480      	push	{r7}
 800272c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800272e:	b672      	cpsid	i
}
 8002730:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002732:	e7fe      	b.n	8002732 <Error_Handler+0x8>

08002734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <HAL_MspInit+0x5c>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_MspInit+0x5c>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6193      	str	r3, [r2, #24]
 8002746:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_MspInit+0x5c>)
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_MspInit+0x5c>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <HAL_MspInit+0x5c>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	61d3      	str	r3, [r2, #28]
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_MspInit+0x5c>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_MspInit+0x60>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_MspInit+0x60>)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002786:	bf00      	nop
 8002788:	3714      	adds	r7, #20
 800278a:	46bd      	mov	sp, r7
 800278c:	bc80      	pop	{r7}
 800278e:	4770      	bx	lr
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000

08002798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800279c:	e7fe      	b.n	800279c <NMI_Handler+0x4>

0800279e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <HardFault_Handler+0x4>

080027a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <MemManage_Handler+0x4>

080027aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ae:	e7fe      	b.n	80027ae <BusFault_Handler+0x4>

080027b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b4:	e7fe      	b.n	80027b4 <UsageFault_Handler+0x4>

080027b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr

080027c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c2:	b480      	push	{r7}
 80027c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027de:	f000 f9b7 	bl	8002b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <DMA1_Channel5_IRQHandler+0x10>)
 80027ee:	f000 ff19 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000600 	.word	0x20000600

080027fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002804:	4a14      	ldr	r2, [pc, #80]	; (8002858 <_sbrk+0x5c>)
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <_sbrk+0x60>)
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002810:	4b13      	ldr	r3, [pc, #76]	; (8002860 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002818:	4b11      	ldr	r3, [pc, #68]	; (8002860 <_sbrk+0x64>)
 800281a:	4a12      	ldr	r2, [pc, #72]	; (8002864 <_sbrk+0x68>)
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d207      	bcs.n	800283c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800282c:	f002 fe62 	bl	80054f4 <__errno>
 8002830:	4603      	mov	r3, r0
 8002832:	220c      	movs	r2, #12
 8002834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	e009      	b.n	8002850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <_sbrk+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002842:	4b07      	ldr	r3, [pc, #28]	; (8002860 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	4a05      	ldr	r2, [pc, #20]	; (8002860 <_sbrk+0x64>)
 800284c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284e:	68fb      	ldr	r3, [r7, #12]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20005000 	.word	0x20005000
 800285c:	00000400 	.word	0x00000400
 8002860:	2000056c 	.word	0x2000056c
 8002864:	200007b0 	.word	0x200007b0

08002868 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr

08002874 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <MX_USART1_UART_Init+0x50>)
 800287c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002886:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800288c:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002898:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 800289a:	220c      	movs	r2, #12
 800289c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a4:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <MX_USART1_UART_Init+0x4c>)
 80028ac:	f002 f86a 	bl	8004984 <HAL_UART_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028b6:	f7ff ff38 	bl	800272a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000570 	.word	0x20000570
 80028c4:	40013800 	.word	0x40013800

080028c8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_USART2_UART_Init+0x50>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_USART2_UART_Init+0x4c>)
 8002900:	f002 f840 	bl	8004984 <HAL_UART_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800290a:	f7ff ff0e 	bl	800272a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	200005b8 	.word	0x200005b8
 8002918:	40004400 	.word	0x40004400

0800291c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0318 	add.w	r3, r7, #24
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_UART_MspInit+0x144>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d158      	bne.n	80029ee <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800293c:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <HAL_UART_MspInit+0x148>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4a48      	ldr	r2, [pc, #288]	; (8002a64 <HAL_UART_MspInit+0x148>)
 8002942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <HAL_UART_MspInit+0x148>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_UART_MspInit+0x148>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	4a42      	ldr	r2, [pc, #264]	; (8002a64 <HAL_UART_MspInit+0x148>)
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6193      	str	r3, [r2, #24]
 8002960:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <HAL_UART_MspInit+0x148>)
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800296c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002976:	2303      	movs	r3, #3
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297a:	f107 0318 	add.w	r3, r7, #24
 800297e:	4619      	mov	r1, r3
 8002980:	4839      	ldr	r0, [pc, #228]	; (8002a68 <HAL_UART_MspInit+0x14c>)
 8002982:	f001 f983 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002994:	f107 0318 	add.w	r3, r7, #24
 8002998:	4619      	mov	r1, r3
 800299a:	4833      	ldr	r0, [pc, #204]	; (8002a68 <HAL_UART_MspInit+0x14c>)
 800299c:	f001 f976 	bl	8003c8c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029a2:	4a33      	ldr	r2, [pc, #204]	; (8002a70 <HAL_UART_MspInit+0x154>)
 80029a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b2:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029b8:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029be:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80029c4:	4b29      	ldr	r3, [pc, #164]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029c6:	2220      	movs	r2, #32
 80029c8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029ca:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80029d0:	4826      	ldr	r0, [pc, #152]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029d2:	f000 fd31 	bl	8003438 <HAL_DMA_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80029dc:	f7ff fea5 	bl	800272a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e6:	4a21      	ldr	r2, [pc, #132]	; (8002a6c <HAL_UART_MspInit+0x150>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029ec:	e034      	b.n	8002a58 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a20      	ldr	r2, [pc, #128]	; (8002a74 <HAL_UART_MspInit+0x158>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d12f      	bne.n	8002a58 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029f8:	4b1a      	ldr	r3, [pc, #104]	; (8002a64 <HAL_UART_MspInit+0x148>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_UART_MspInit+0x148>)
 80029fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a02:	61d3      	str	r3, [r2, #28]
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <HAL_UART_MspInit+0x148>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <HAL_UART_MspInit+0x148>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	4a13      	ldr	r2, [pc, #76]	; (8002a64 <HAL_UART_MspInit+0x148>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6193      	str	r3, [r2, #24]
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_UART_MspInit+0x148>)
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a28:	2304      	movs	r3, #4
 8002a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 0318 	add.w	r3, r7, #24
 8002a38:	4619      	mov	r1, r3
 8002a3a:	480b      	ldr	r0, [pc, #44]	; (8002a68 <HAL_UART_MspInit+0x14c>)
 8002a3c:	f001 f926 	bl	8003c8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a40:	2308      	movs	r3, #8
 8002a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4c:	f107 0318 	add.w	r3, r7, #24
 8002a50:	4619      	mov	r1, r3
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <HAL_UART_MspInit+0x14c>)
 8002a54:	f001 f91a 	bl	8003c8c <HAL_GPIO_Init>
}
 8002a58:	bf00      	nop
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40013800 	.word	0x40013800
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010800 	.word	0x40010800
 8002a6c:	20000600 	.word	0x20000600
 8002a70:	40020058 	.word	0x40020058
 8002a74:	40004400 	.word	0x40004400

08002a78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a78:	f7ff fef6 	bl	8002868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a7c:	480b      	ldr	r0, [pc, #44]	; (8002aac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002a7e:	490c      	ldr	r1, [pc, #48]	; (8002ab0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002a80:	4a0c      	ldr	r2, [pc, #48]	; (8002ab4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002a94:	4c09      	ldr	r4, [pc, #36]	; (8002abc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f002 fd2d 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aa6:	f7ff fd63 	bl	8002570 <main>
  bx lr
 8002aaa:	4770      	bx	lr
  ldr r0, =_sdata
 8002aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002ab4:	08006478 	.word	0x08006478
  ldr r2, =_sbss
 8002ab8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002abc:	200007b0 	.word	0x200007b0

08002ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ac0:	e7fe      	b.n	8002ac0 <ADC1_2_IRQHandler>
	...

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_Init+0x28>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a07      	ldr	r2, [pc, #28]	; (8002aec <HAL_Init+0x28>)
 8002ace:	f043 0310 	orr.w	r3, r3, #16
 8002ad2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	f000 fc6d 	bl	80033b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ada:	200f      	movs	r0, #15
 8002adc:	f000 f808 	bl	8002af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ae0:	f7ff fe28 	bl	8002734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40022000 	.word	0x40022000

08002af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_InitTick+0x54>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	4b12      	ldr	r3, [pc, #72]	; (8002b48 <HAL_InitTick+0x58>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fc85 	bl	800341e <HAL_SYSTICK_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00e      	b.n	8002b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b0f      	cmp	r3, #15
 8002b22:	d80a      	bhi.n	8002b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b24:	2200      	movs	r2, #0
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f000 fc4d 	bl	80033ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b30:	4a06      	ldr	r2, [pc, #24]	; (8002b4c <HAL_InitTick+0x5c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000004 	.word	0x20000004
 8002b48:	2000000c 	.word	0x2000000c
 8002b4c:	20000008 	.word	0x20000008

08002b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_IncTick+0x1c>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <HAL_IncTick+0x20>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a03      	ldr	r2, [pc, #12]	; (8002b70 <HAL_IncTick+0x20>)
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	2000000c 	.word	0x2000000c
 8002b70:	20000644 	.word	0x20000644

08002b74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  return uwTick;
 8002b78:	4b02      	ldr	r3, [pc, #8]	; (8002b84 <HAL_GetTick+0x10>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr
 8002b84:	20000644 	.word	0x20000644

08002b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff fff0 	bl	8002b74 <HAL_GetTick>
 8002b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d005      	beq.n	8002bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_Delay+0x44>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bae:	bf00      	nop
 8002bb0:	f7ff ffe0 	bl	8002b74 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d8f7      	bhi.n	8002bb0 <HAL_Delay+0x28>
  {
  }
}
 8002bc0:	bf00      	nop
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000000c 	.word	0x2000000c

08002bd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0be      	b.n	8002d70 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fd fdea 	bl	80007e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fabf 	bl	8003198 <ADC_ConversionStop_Disable>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 8099 	bne.w	8002d5e <HAL_ADC_Init+0x18e>
 8002c2c:	7dfb      	ldrb	r3, [r7, #23]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f040 8095 	bne.w	8002d5e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c3c:	f023 0302 	bic.w	r3, r3, #2
 8002c40:	f043 0202 	orr.w	r2, r3, #2
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c50:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	7b1b      	ldrb	r3, [r3, #12]
 8002c56:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c58:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c68:	d003      	beq.n	8002c72 <HAL_ADC_Init+0xa2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <HAL_ADC_Init+0xa8>
 8002c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c76:	e000      	b.n	8002c7a <HAL_ADC_Init+0xaa>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	7d1b      	ldrb	r3, [r3, #20]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d119      	bne.n	8002cbc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	7b1b      	ldrb	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d109      	bne.n	8002ca4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	035a      	lsls	r2, r3, #13
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	e00b      	b.n	8002cbc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f043 0201 	orr.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	689a      	ldr	r2, [r3, #8]
 8002cd6:	4b28      	ldr	r3, [pc, #160]	; (8002d78 <HAL_ADC_Init+0x1a8>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	68b9      	ldr	r1, [r7, #8]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cec:	d003      	beq.n	8002cf6 <HAL_ADC_Init+0x126>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d104      	bne.n	8002d00 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	051b      	lsls	r3, r3, #20
 8002cfe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_ADC_Init+0x1ac>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d10b      	bne.n	8002d3c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	f023 0303 	bic.w	r3, r3, #3
 8002d32:	f043 0201 	orr.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d3a:	e018      	b.n	8002d6e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	f023 0312 	bic.w	r3, r3, #18
 8002d44:	f043 0210 	orr.w	r2, r3, #16
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d5c:	e007      	b.n	8002d6e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	f043 0210 	orr.w	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	ffe1f7fd 	.word	0xffe1f7fd
 8002d7c:	ff1f0efe 	.word	0xff1f0efe

08002d80 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Start+0x1a>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e098      	b.n	8002ecc <HAL_ADC_Start+0x14c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f99e 	bl	80030e4 <ADC_Enable>
 8002da8:	4603      	mov	r3, r0
 8002daa:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f040 8087 	bne.w	8002ec2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a41      	ldr	r2, [pc, #260]	; (8002ed4 <HAL_ADC_Start+0x154>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_Start+0x5e>
 8002dd2:	4b41      	ldr	r3, [pc, #260]	; (8002ed8 <HAL_ADC_Start+0x158>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d115      	bne.n	8002e0a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d026      	beq.n	8002e46 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e00:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e08:	e01d      	b.n	8002e46 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <HAL_ADC_Start+0x158>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_Start+0xaa>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a2b      	ldr	r2, [pc, #172]	; (8002ed4 <HAL_ADC_Start+0x154>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10d      	bne.n	8002e46 <HAL_ADC_Start+0xc6>
 8002e2a:	4b2b      	ldr	r3, [pc, #172]	; (8002ed8 <HAL_ADC_Start+0x158>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f023 0206 	bic.w	r2, r3, #6
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e5e:	e002      	b.n	8002e66 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f06f 0202 	mvn.w	r2, #2
 8002e76:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e82:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e86:	d113      	bne.n	8002eb0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e8c:	4a11      	ldr	r2, [pc, #68]	; (8002ed4 <HAL_ADC_Start+0x154>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d105      	bne.n	8002e9e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_ADC_Start+0x158>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d108      	bne.n	8002eb0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	e00c      	b.n	8002eca <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ebe:	609a      	str	r2, [r3, #8]
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40012800 	.word	0x40012800
 8002ed8:	40012400 	.word	0x40012400

08002edc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x20>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e0dc      	b.n	80030ce <HAL_ADC_ConfigChannel+0x1da>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b06      	cmp	r3, #6
 8002f22:	d81c      	bhi.n	8002f5e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	3b05      	subs	r3, #5
 8002f36:	221f      	movs	r2, #31
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	4019      	ands	r1, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6818      	ldr	r0, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3b05      	subs	r3, #5
 8002f50:	fa00 f203 	lsl.w	r2, r0, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f5c:	e03c      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b0c      	cmp	r3, #12
 8002f64:	d81c      	bhi.n	8002fa0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	3b23      	subs	r3, #35	; 0x23
 8002f78:	221f      	movs	r2, #31
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4019      	ands	r1, r3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	3b23      	subs	r3, #35	; 0x23
 8002f92:	fa00 f203 	lsl.w	r2, r0, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9e:	e01b      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	3b41      	subs	r3, #65	; 0x41
 8002fb2:	221f      	movs	r2, #31
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	4019      	ands	r1, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	3b41      	subs	r3, #65	; 0x41
 8002fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b09      	cmp	r3, #9
 8002fde:	d91c      	bls.n	800301a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	3b1e      	subs	r3, #30
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4019      	ands	r1, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6898      	ldr	r0, [r3, #8]
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	3b1e      	subs	r3, #30
 800300c:	fa00 f203 	lsl.w	r2, r0, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]
 8003018:	e019      	b.n	800304e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6919      	ldr	r1, [r3, #16]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4413      	add	r3, r2
 800302a:	2207      	movs	r2, #7
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	4019      	ands	r1, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	6898      	ldr	r0, [r3, #8]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	fa00 f203 	lsl.w	r2, r0, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b10      	cmp	r3, #16
 8003054:	d003      	beq.n	800305e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800305a:	2b11      	cmp	r3, #17
 800305c:	d132      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d125      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d126      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003084:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b10      	cmp	r3, #16
 800308c:	d11a      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800308e:	4b13      	ldr	r3, [pc, #76]	; (80030dc <HAL_ADC_ConfigChannel+0x1e8>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	0c9a      	lsrs	r2, r3, #18
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030a4:	e002      	b.n	80030ac <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f9      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x1b2>
 80030b2:	e007      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bc80      	pop	{r7}
 80030d6:	4770      	bx	lr
 80030d8:	40012400 	.word	0x40012400
 80030dc:	20000004 	.word	0x20000004
 80030e0:	431bde83 	.word	0x431bde83

080030e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d040      	beq.n	8003184 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f042 0201 	orr.w	r2, r2, #1
 8003110:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003112:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <ADC_Enable+0xac>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <ADC_Enable+0xb0>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	0c9b      	lsrs	r3, r3, #18
 800311e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003120:	e002      	b.n	8003128 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	3b01      	subs	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f9      	bne.n	8003122 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800312e:	f7ff fd21 	bl	8002b74 <HAL_GetTick>
 8003132:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003134:	e01f      	b.n	8003176 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003136:	f7ff fd1d 	bl	8002b74 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d918      	bls.n	8003176 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d011      	beq.n	8003176 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e007      	b.n	8003186 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d1d8      	bne.n	8003136 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	20000004 	.word	0x20000004
 8003194:	431bde83 	.word	0x431bde83

08003198 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d12e      	bne.n	8003210 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031c2:	f7ff fcd7 	bl	8002b74 <HAL_GetTick>
 80031c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80031c8:	e01b      	b.n	8003202 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031ca:	f7ff fcd3 	bl	8002b74 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d914      	bls.n	8003202 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10d      	bne.n	8003202 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e007      	b.n	8003212 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d0dc      	beq.n	80031ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003244:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800324c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	60d3      	str	r3, [r2, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4906      	ldr	r1, [pc, #24]	; (80032b4 <__NVIC_EnableIRQ+0x34>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003380:	d301      	bcc.n	8003386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003382:	2301      	movs	r3, #1
 8003384:	e00f      	b.n	80033a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <SysTick_Config+0x40>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338e:	210f      	movs	r1, #15
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f7ff ff90 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <SysTick_Config+0x40>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SysTick_Config+0x40>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff2d 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033dc:	f7ff ff42 	bl	8003264 <__NVIC_GetPriorityGrouping>
 80033e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	6978      	ldr	r0, [r7, #20]
 80033e8:	f7ff ff90 	bl	800330c <NVIC_EncodePriority>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff5f 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800340c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff ff35 	bl	8003280 <__NVIC_EnableIRQ>
}
 8003416:	bf00      	nop
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b082      	sub	sp, #8
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ffa2 	bl	8003370 <SysTick_Config>
 800342c:	4603      	mov	r3, r0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
	...

08003438 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e043      	b.n	80034d6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	461a      	mov	r2, r3
 8003454:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_DMA_Init+0xa8>)
 8003456:	4413      	add	r3, r2
 8003458:	4a22      	ldr	r2, [pc, #136]	; (80034e4 <HAL_DMA_Init+0xac>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	009a      	lsls	r2, r3, #2
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <HAL_DMA_Init+0xb0>)
 800346a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003482:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003486:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003490:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr
 80034e0:	bffdfff8 	.word	0xbffdfff8
 80034e4:	cccccccd 	.word	0xcccccccd
 80034e8:	40020000 	.word	0x40020000

080034ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fa:	2300      	movs	r3, #0
 80034fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_DMA_Start_IT+0x20>
 8003508:	2302      	movs	r3, #2
 800350a:	e04b      	b.n	80035a4 <HAL_DMA_Start_IT+0xb8>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d13a      	bne.n	8003596 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f973 	bl	8003830 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 020e 	orr.w	r2, r2, #14
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	e00f      	b.n	8003584 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0204 	bic.w	r2, r2, #4
 8003572:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 020a 	orr.w	r2, r2, #10
 8003582:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	e005      	b.n	80035a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800359e:	2302      	movs	r3, #2
 80035a0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d008      	beq.n	80035d6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2204      	movs	r2, #4
 80035c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e020      	b.n	8003618 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 020e 	bic.w	r2, r2, #14
 80035e4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
	...

08003624 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003640:	2204      	movs	r2, #4
 8003642:	409a      	lsls	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d04f      	beq.n	80036ec <HAL_DMA_IRQHandler+0xc8>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d04a      	beq.n	80036ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0204 	bic.w	r2, r2, #4
 8003672:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a66      	ldr	r2, [pc, #408]	; (8003814 <HAL_DMA_IRQHandler+0x1f0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d029      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xae>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_DMA_IRQHandler+0x1f4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_IRQHandler+0xaa>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_DMA_IRQHandler+0x1f8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01a      	beq.n	80036c8 <HAL_DMA_IRQHandler+0xa4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a62      	ldr	r2, [pc, #392]	; (8003820 <HAL_DMA_IRQHandler+0x1fc>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d012      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x9e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a60      	ldr	r2, [pc, #384]	; (8003824 <HAL_DMA_IRQHandler+0x200>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00a      	beq.n	80036bc <HAL_DMA_IRQHandler+0x98>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a5f      	ldr	r2, [pc, #380]	; (8003828 <HAL_DMA_IRQHandler+0x204>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <HAL_DMA_IRQHandler+0x92>
 80036b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036b4:	e00e      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80036ba:	e00b      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80036c0:	e008      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036c6:	e005      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036cc:	e002      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036ce:	2340      	movs	r3, #64	; 0x40
 80036d0:	e000      	b.n	80036d4 <HAL_DMA_IRQHandler+0xb0>
 80036d2:	2304      	movs	r3, #4
 80036d4:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_DMA_IRQHandler+0x208>)
 80036d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 8094 	beq.w	800380a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80036ea:	e08e      	b.n	800380a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f0:	2202      	movs	r2, #2
 80036f2:	409a      	lsls	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d056      	beq.n	80037aa <HAL_DMA_IRQHandler+0x186>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d051      	beq.n	80037aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10b      	bne.n	800372c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020a 	bic.w	r2, r2, #10
 8003722:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a38      	ldr	r2, [pc, #224]	; (8003814 <HAL_DMA_IRQHandler+0x1f0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d029      	beq.n	800378a <HAL_DMA_IRQHandler+0x166>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a37      	ldr	r2, [pc, #220]	; (8003818 <HAL_DMA_IRQHandler+0x1f4>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d022      	beq.n	8003786 <HAL_DMA_IRQHandler+0x162>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a35      	ldr	r2, [pc, #212]	; (800381c <HAL_DMA_IRQHandler+0x1f8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d01a      	beq.n	8003780 <HAL_DMA_IRQHandler+0x15c>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a34      	ldr	r2, [pc, #208]	; (8003820 <HAL_DMA_IRQHandler+0x1fc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d012      	beq.n	800377a <HAL_DMA_IRQHandler+0x156>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a32      	ldr	r2, [pc, #200]	; (8003824 <HAL_DMA_IRQHandler+0x200>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00a      	beq.n	8003774 <HAL_DMA_IRQHandler+0x150>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a31      	ldr	r2, [pc, #196]	; (8003828 <HAL_DMA_IRQHandler+0x204>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d102      	bne.n	800376e <HAL_DMA_IRQHandler+0x14a>
 8003768:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800376c:	e00e      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 800376e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003772:	e00b      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 8003774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003778:	e008      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 800377a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800377e:	e005      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 8003780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003784:	e002      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 8003786:	2320      	movs	r3, #32
 8003788:	e000      	b.n	800378c <HAL_DMA_IRQHandler+0x168>
 800378a:	2302      	movs	r3, #2
 800378c:	4a27      	ldr	r2, [pc, #156]	; (800382c <HAL_DMA_IRQHandler+0x208>)
 800378e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	d034      	beq.n	800380a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80037a8:	e02f      	b.n	800380a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2208      	movs	r2, #8
 80037b0:	409a      	lsls	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d028      	beq.n	800380c <HAL_DMA_IRQHandler+0x1e8>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d023      	beq.n	800380c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 020e 	bic.w	r2, r2, #14
 80037d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	2101      	movs	r1, #1
 80037de:	fa01 f202 	lsl.w	r2, r1, r2
 80037e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
    }
  }
  return;
 800380a:	bf00      	nop
 800380c:	bf00      	nop
}
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40020008 	.word	0x40020008
 8003818:	4002001c 	.word	0x4002001c
 800381c:	40020030 	.word	0x40020030
 8003820:	40020044 	.word	0x40020044
 8003824:	40020058 	.word	0x40020058
 8003828:	4002006c 	.word	0x4002006c
 800382c:	40020000 	.word	0x40020000

08003830 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003846:	2101      	movs	r1, #1
 8003848:	fa01 f202 	lsl.w	r2, r1, r2
 800384c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b10      	cmp	r3, #16
 800385c:	d108      	bne.n	8003870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800386e:	e007      	b.n	8003880 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr
	...

0800388c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800388c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800389e:	2300      	movs	r3, #0
 80038a0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80038a2:	2300      	movs	r3, #0
 80038a4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <HAL_FLASH_Program+0xd8>)
 80038a8:	7e1b      	ldrb	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_FLASH_Program+0x26>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e054      	b.n	800395c <HAL_FLASH_Program+0xd0>
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <HAL_FLASH_Program+0xd8>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038bc:	f000 f8a8 	bl	8003a10 <FLASH_WaitForLastOperation>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d144      	bne.n	8003954 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80038d0:	2301      	movs	r3, #1
 80038d2:	757b      	strb	r3, [r7, #21]
 80038d4:	e007      	b.n	80038e6 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d102      	bne.n	80038e2 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80038dc:	2302      	movs	r3, #2
 80038de:	757b      	strb	r3, [r7, #21]
 80038e0:	e001      	b.n	80038e6 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80038e2:	2304      	movs	r3, #4
 80038e4:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	75bb      	strb	r3, [r7, #22]
 80038ea:	e02d      	b.n	8003948 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80038ec:	7dbb      	ldrb	r3, [r7, #22]
 80038ee:	005a      	lsls	r2, r3, #1
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	eb02 0c03 	add.w	ip, r2, r3
 80038f6:	7dbb      	ldrb	r3, [r7, #22]
 80038f8:	0119      	lsls	r1, r3, #4
 80038fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fe:	f1c1 0620 	rsb	r6, r1, #32
 8003902:	f1a1 0020 	sub.w	r0, r1, #32
 8003906:	fa22 f401 	lsr.w	r4, r2, r1
 800390a:	fa03 f606 	lsl.w	r6, r3, r6
 800390e:	4334      	orrs	r4, r6
 8003910:	fa23 f000 	lsr.w	r0, r3, r0
 8003914:	4304      	orrs	r4, r0
 8003916:	fa23 f501 	lsr.w	r5, r3, r1
 800391a:	b2a3      	uxth	r3, r4
 800391c:	4619      	mov	r1, r3
 800391e:	4660      	mov	r0, ip
 8003920:	f000 f85a 	bl	80039d8 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003924:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003928:	f000 f872 	bl	8003a10 <FLASH_WaitForLastOperation>
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003930:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <HAL_FLASH_Program+0xdc>)
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	4a0c      	ldr	r2, [pc, #48]	; (8003968 <HAL_FLASH_Program+0xdc>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003942:	7dbb      	ldrb	r3, [r7, #22]
 8003944:	3301      	adds	r3, #1
 8003946:	75bb      	strb	r3, [r7, #22]
 8003948:	7dba      	ldrb	r2, [r7, #22]
 800394a:	7d7b      	ldrb	r3, [r7, #21]
 800394c:	429a      	cmp	r2, r3
 800394e:	d3cd      	bcc.n	80038ec <HAL_FLASH_Program+0x60>
 8003950:	e000      	b.n	8003954 <HAL_FLASH_Program+0xc8>
      {
        break;
 8003952:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_FLASH_Program+0xd8>)
 8003956:	2200      	movs	r2, #0
 8003958:	761a      	strb	r2, [r3, #24]

  return status;
 800395a:	7dfb      	ldrb	r3, [r7, #23]
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003964:	20000648 	.word	0x20000648
 8003968:	40022000 	.word	0x40022000

0800396c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_FLASH_Unlock+0x40>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <HAL_FLASH_Unlock+0x40>)
 8003984:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <HAL_FLASH_Unlock+0x44>)
 8003986:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_FLASH_Unlock+0x40>)
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HAL_FLASH_Unlock+0x48>)
 800398c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800398e:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_FLASH_Unlock+0x40>)
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800399e:	79fb      	ldrb	r3, [r7, #7]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40022000 	.word	0x40022000
 80039b0:	45670123 	.word	0x45670123
 80039b4:	cdef89ab 	.word	0xcdef89ab

080039b8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <HAL_FLASH_Lock+0x1c>)
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <HAL_FLASH_Lock+0x1c>)
 80039c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bc80      	pop	{r7}
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40022000 	.word	0x40022000

080039d8 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039e4:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <FLASH_Program_HalfWord+0x30>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <FLASH_Program_HalfWord+0x34>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	4a07      	ldr	r2, [pc, #28]	; (8003a0c <FLASH_Program_HalfWord+0x34>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	887a      	ldrh	r2, [r7, #2]
 80039fa:	801a      	strh	r2, [r3, #0]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000648 	.word	0x20000648
 8003a0c:	40022000 	.word	0x40022000

08003a10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a18:	f7ff f8ac 	bl	8002b74 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a1e:	e010      	b.n	8003a42 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d00c      	beq.n	8003a42 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <FLASH_WaitForLastOperation+0x2e>
 8003a2e:	f7ff f8a1 	bl	8002b74 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d201      	bcs.n	8003a42 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e025      	b.n	8003a8e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a42:	4b15      	ldr	r3, [pc, #84]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e8      	bne.n	8003a20 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a4e:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a6c:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003a78:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <FLASH_WaitForLastOperation+0x88>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a84:	f000 f80a 	bl	8003a9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40022000 	.word	0x40022000

08003a9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003aa6:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d009      	beq.n	8003ac6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003ab2:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f043 0302 	orr.w	r3, r3, #2
 8003aba:	4a1f      	ldr	r2, [pc, #124]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003abc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f043 0310 	orr.w	r3, r3, #16
 8003ac4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d009      	beq.n	8003ae6 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003adc:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f043 0304 	orr.w	r3, r3, #4
 8003afa:	4a0f      	ldr	r2, [pc, #60]	; (8003b38 <FLASH_SetErrorCode+0x9c>)
 8003afc:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f240 1201 	movw	r2, #257	; 0x101
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d106      	bne.n	8003b22 <FLASH_SetErrorCode+0x86>
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4a06      	ldr	r2, [pc, #24]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	61d3      	str	r3, [r2, #28]
}  
 8003b20:	e002      	b.n	8003b28 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b22:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <FLASH_SetErrorCode+0x98>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60d3      	str	r3, [r2, #12]
}  
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40022000 	.word	0x40022000
 8003b38:	20000648 	.word	0x20000648

08003b3c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <HAL_FLASHEx_Erase+0xd0>)
 8003b50:	7e1b      	ldrb	r3, [r3, #24]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d101      	bne.n	8003b5a <HAL_FLASHEx_Erase+0x1e>
 8003b56:	2302      	movs	r3, #2
 8003b58:	e053      	b.n	8003c02 <HAL_FLASHEx_Erase+0xc6>
 8003b5a:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_FLASHEx_Erase+0xd0>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d116      	bne.n	8003b96 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b6c:	f7ff ff50 	bl	8003a10 <FLASH_WaitForLastOperation>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d141      	bne.n	8003bfa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003b76:	2001      	movs	r0, #1
 8003b78:	f000 f84c 	bl	8003c14 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003b7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b80:	f7ff ff46 	bl	8003a10 <FLASH_WaitForLastOperation>
 8003b84:	4603      	mov	r3, r0
 8003b86:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_FLASHEx_Erase+0xd4>)
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	4a20      	ldr	r2, [pc, #128]	; (8003c10 <HAL_FLASHEx_Erase+0xd4>)
 8003b8e:	f023 0304 	bic.w	r3, r3, #4
 8003b92:	6113      	str	r3, [r2, #16]
 8003b94:	e031      	b.n	8003bfa <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003b96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b9a:	f7ff ff39 	bl	8003a10 <FLASH_WaitForLastOperation>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d12a      	bne.n	8003bfa <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8003baa:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	e019      	b.n	8003be8 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003bb4:	68b8      	ldr	r0, [r7, #8]
 8003bb6:	f000 f849 	bl	8003c4c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bbe:	f7ff ff27 	bl	8003a10 <FLASH_WaitForLastOperation>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_FLASHEx_Erase+0xd4>)
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	4a11      	ldr	r2, [pc, #68]	; (8003c10 <HAL_FLASHEx_Erase+0xd4>)
 8003bcc:	f023 0302 	bic.w	r3, r3, #2
 8003bd0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	601a      	str	r2, [r3, #0]
            break;
 8003bde:	e00c      	b.n	8003bfa <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be6:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	029a      	lsls	r2, r3, #10
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3dc      	bcc.n	8003bb4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <HAL_FLASHEx_Erase+0xd0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	761a      	strb	r2, [r3, #24]

  return status;
 8003c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000648 	.word	0x20000648
 8003c10:	40022000 	.word	0x40022000

08003c14 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	; (8003c44 <FLASH_MassErase+0x30>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <FLASH_MassErase+0x34>)
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4a08      	ldr	r2, [pc, #32]	; (8003c48 <FLASH_MassErase+0x34>)
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <FLASH_MassErase+0x34>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	4a05      	ldr	r2, [pc, #20]	; (8003c48 <FLASH_MassErase+0x34>)
 8003c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c38:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr
 8003c44:	20000648 	.word	0x20000648
 8003c48:	40022000 	.word	0x40022000

08003c4c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <FLASH_PageErase+0x38>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	4a05      	ldr	r2, [pc, #20]	; (8003c88 <FLASH_PageErase+0x3c>)
 8003c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c76:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000648 	.word	0x20000648
 8003c88:	40022000 	.word	0x40022000

08003c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b08b      	sub	sp, #44	; 0x2c
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c9e:	e169      	b.n	8003f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	f040 8158 	bne.w	8003f6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4a9a      	ldr	r2, [pc, #616]	; (8003f2c <HAL_GPIO_Init+0x2a0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d05e      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cc8:	4a98      	ldr	r2, [pc, #608]	; (8003f2c <HAL_GPIO_Init+0x2a0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d875      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cce:	4a98      	ldr	r2, [pc, #608]	; (8003f30 <HAL_GPIO_Init+0x2a4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d058      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cd4:	4a96      	ldr	r2, [pc, #600]	; (8003f30 <HAL_GPIO_Init+0x2a4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d86f      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cda:	4a96      	ldr	r2, [pc, #600]	; (8003f34 <HAL_GPIO_Init+0x2a8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d052      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003ce0:	4a94      	ldr	r2, [pc, #592]	; (8003f34 <HAL_GPIO_Init+0x2a8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d869      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003ce6:	4a94      	ldr	r2, [pc, #592]	; (8003f38 <HAL_GPIO_Init+0x2ac>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d04c      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cec:	4a92      	ldr	r2, [pc, #584]	; (8003f38 <HAL_GPIO_Init+0x2ac>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d863      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cf2:	4a92      	ldr	r2, [pc, #584]	; (8003f3c <HAL_GPIO_Init+0x2b0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d046      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
 8003cf8:	4a90      	ldr	r2, [pc, #576]	; (8003f3c <HAL_GPIO_Init+0x2b0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d85d      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003cfe:	2b12      	cmp	r3, #18
 8003d00:	d82a      	bhi.n	8003d58 <HAL_GPIO_Init+0xcc>
 8003d02:	2b12      	cmp	r3, #18
 8003d04:	d859      	bhi.n	8003dba <HAL_GPIO_Init+0x12e>
 8003d06:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_GPIO_Init+0x80>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003d87 	.word	0x08003d87
 8003d10:	08003d61 	.word	0x08003d61
 8003d14:	08003d73 	.word	0x08003d73
 8003d18:	08003db5 	.word	0x08003db5
 8003d1c:	08003dbb 	.word	0x08003dbb
 8003d20:	08003dbb 	.word	0x08003dbb
 8003d24:	08003dbb 	.word	0x08003dbb
 8003d28:	08003dbb 	.word	0x08003dbb
 8003d2c:	08003dbb 	.word	0x08003dbb
 8003d30:	08003dbb 	.word	0x08003dbb
 8003d34:	08003dbb 	.word	0x08003dbb
 8003d38:	08003dbb 	.word	0x08003dbb
 8003d3c:	08003dbb 	.word	0x08003dbb
 8003d40:	08003dbb 	.word	0x08003dbb
 8003d44:	08003dbb 	.word	0x08003dbb
 8003d48:	08003dbb 	.word	0x08003dbb
 8003d4c:	08003dbb 	.word	0x08003dbb
 8003d50:	08003d69 	.word	0x08003d69
 8003d54:	08003d7d 	.word	0x08003d7d
 8003d58:	4a79      	ldr	r2, [pc, #484]	; (8003f40 <HAL_GPIO_Init+0x2b4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d5e:	e02c      	b.n	8003dba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	623b      	str	r3, [r7, #32]
          break;
 8003d66:	e029      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	623b      	str	r3, [r7, #32]
          break;
 8003d70:	e024      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	3308      	adds	r3, #8
 8003d78:	623b      	str	r3, [r7, #32]
          break;
 8003d7a:	e01f      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	330c      	adds	r3, #12
 8003d82:	623b      	str	r3, [r7, #32]
          break;
 8003d84:	e01a      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d8e:	2304      	movs	r3, #4
 8003d90:	623b      	str	r3, [r7, #32]
          break;
 8003d92:	e013      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d105      	bne.n	8003da8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d9c:	2308      	movs	r3, #8
 8003d9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	611a      	str	r2, [r3, #16]
          break;
 8003da6:	e009      	b.n	8003dbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003da8:	2308      	movs	r3, #8
 8003daa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	615a      	str	r2, [r3, #20]
          break;
 8003db2:	e003      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
          break;
 8003db8:	e000      	b.n	8003dbc <HAL_GPIO_Init+0x130>
          break;
 8003dba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d801      	bhi.n	8003dc6 <HAL_GPIO_Init+0x13a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	e001      	b.n	8003dca <HAL_GPIO_Init+0x13e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3304      	adds	r3, #4
 8003dca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2bff      	cmp	r3, #255	; 0xff
 8003dd0:	d802      	bhi.n	8003dd8 <HAL_GPIO_Init+0x14c>
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	e002      	b.n	8003dde <HAL_GPIO_Init+0x152>
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	3b08      	subs	r3, #8
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	210f      	movs	r1, #15
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	401a      	ands	r2, r3
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	fa01 f303 	lsl.w	r3, r1, r3
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 80b1 	beq.w	8003f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e0c:	4b4d      	ldr	r3, [pc, #308]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	4a4c      	ldr	r2, [pc, #304]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6193      	str	r3, [r2, #24]
 8003e18:	4b4a      	ldr	r3, [pc, #296]	; (8003f44 <HAL_GPIO_Init+0x2b8>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e24:	4a48      	ldr	r2, [pc, #288]	; (8003f48 <HAL_GPIO_Init+0x2bc>)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4013      	ands	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a40      	ldr	r2, [pc, #256]	; (8003f4c <HAL_GPIO_Init+0x2c0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_GPIO_Init+0x1ec>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <HAL_GPIO_Init+0x2c4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00d      	beq.n	8003e74 <HAL_GPIO_Init+0x1e8>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a3e      	ldr	r2, [pc, #248]	; (8003f54 <HAL_GPIO_Init+0x2c8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d007      	beq.n	8003e70 <HAL_GPIO_Init+0x1e4>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3d      	ldr	r2, [pc, #244]	; (8003f58 <HAL_GPIO_Init+0x2cc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d101      	bne.n	8003e6c <HAL_GPIO_Init+0x1e0>
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e006      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	e004      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e70:	2302      	movs	r3, #2
 8003e72:	e002      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_GPIO_Init+0x1ee>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7c:	f002 0203 	and.w	r2, r2, #3
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	4093      	lsls	r3, r2
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e8a:	492f      	ldr	r1, [pc, #188]	; (8003f48 <HAL_GPIO_Init+0x2bc>)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	089b      	lsrs	r3, r3, #2
 8003e90:	3302      	adds	r3, #2
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d006      	beq.n	8003eb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ea4:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	492c      	ldr	r1, [pc, #176]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]
 8003eb0:	e006      	b.n	8003ec0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003eb2:	4b2a      	ldr	r3, [pc, #168]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	4928      	ldr	r1, [pc, #160]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d006      	beq.n	8003eda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ecc:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ece:	68da      	ldr	r2, [r3, #12]
 8003ed0:	4922      	ldr	r1, [pc, #136]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60cb      	str	r3, [r1, #12]
 8003ed8:	e006      	b.n	8003ee8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	491e      	ldr	r1, [pc, #120]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d006      	beq.n	8003f02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	4918      	ldr	r1, [pc, #96]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
 8003f00:	e006      	b.n	8003f10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	4914      	ldr	r1, [pc, #80]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d021      	beq.n	8003f60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	490e      	ldr	r1, [pc, #56]	; (8003f5c <HAL_GPIO_Init+0x2d0>)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	600b      	str	r3, [r1, #0]
 8003f28:	e021      	b.n	8003f6e <HAL_GPIO_Init+0x2e2>
 8003f2a:	bf00      	nop
 8003f2c:	10320000 	.word	0x10320000
 8003f30:	10310000 	.word	0x10310000
 8003f34:	10220000 	.word	0x10220000
 8003f38:	10210000 	.word	0x10210000
 8003f3c:	10120000 	.word	0x10120000
 8003f40:	10110000 	.word	0x10110000
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40010800 	.word	0x40010800
 8003f50:	40010c00 	.word	0x40010c00
 8003f54:	40011000 	.word	0x40011000
 8003f58:	40011400 	.word	0x40011400
 8003f5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_GPIO_Init+0x304>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	4909      	ldr	r1, [pc, #36]	; (8003f90 <HAL_GPIO_Init+0x304>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	3301      	adds	r3, #1
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f47f ae8e 	bne.w	8003ca0 <HAL_GPIO_Init+0x14>
  }
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	372c      	adds	r7, #44	; 0x2c
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	40010400 	.word	0x40010400

08003f94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	807b      	strh	r3, [r7, #2]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fa4:	787b      	ldrb	r3, [r7, #1]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003faa:	887a      	ldrh	r2, [r7, #2]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fb0:	e003      	b.n	8003fba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fb2:	887b      	ldrh	r3, [r7, #2]
 8003fb4:	041a      	lsls	r2, r3, #16
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	611a      	str	r2, [r3, #16]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bc80      	pop	{r7}
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003fd6:	887a      	ldrh	r2, [r7, #2]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	041a      	lsls	r2, r3, #16
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	43d9      	mvns	r1, r3
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	400b      	ands	r3, r1
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	611a      	str	r2, [r3, #16]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e272      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 8087 	beq.w	8004126 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004018:	4b92      	ldr	r3, [pc, #584]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f003 030c 	and.w	r3, r3, #12
 8004020:	2b04      	cmp	r3, #4
 8004022:	d00c      	beq.n	800403e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004024:	4b8f      	ldr	r3, [pc, #572]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b08      	cmp	r3, #8
 800402e:	d112      	bne.n	8004056 <HAL_RCC_OscConfig+0x5e>
 8004030:	4b8c      	ldr	r3, [pc, #560]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403c:	d10b      	bne.n	8004056 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403e:	4b89      	ldr	r3, [pc, #548]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d06c      	beq.n	8004124 <HAL_RCC_OscConfig+0x12c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d168      	bne.n	8004124 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e24c      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405e:	d106      	bne.n	800406e <HAL_RCC_OscConfig+0x76>
 8004060:	4b80      	ldr	r3, [pc, #512]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a7f      	ldr	r2, [pc, #508]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e02e      	b.n	80040cc <HAL_RCC_OscConfig+0xd4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x98>
 8004076:	4b7b      	ldr	r3, [pc, #492]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b78      	ldr	r3, [pc, #480]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a77      	ldr	r2, [pc, #476]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e01d      	b.n	80040cc <HAL_RCC_OscConfig+0xd4>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0xbc>
 800409a:	4b72      	ldr	r3, [pc, #456]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a71      	ldr	r2, [pc, #452]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b6f      	ldr	r3, [pc, #444]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6e      	ldr	r2, [pc, #440]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e00b      	b.n	80040cc <HAL_RCC_OscConfig+0xd4>
 80040b4:	4b6b      	ldr	r3, [pc, #428]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a6a      	ldr	r2, [pc, #424]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b68      	ldr	r3, [pc, #416]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a67      	ldr	r2, [pc, #412]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fe fd4e 	bl	8002b74 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe fd4a 	bl	8002b74 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e200      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	4b5d      	ldr	r3, [pc, #372]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0xe4>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe fd3a 	bl	8002b74 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7fe fd36 	bl	8002b74 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1ec      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004116:	4b53      	ldr	r3, [pc, #332]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x10c>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d063      	beq.n	80041fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004132:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800413e:	4b49      	ldr	r3, [pc, #292]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b08      	cmp	r3, #8
 8004148:	d11c      	bne.n	8004184 <HAL_RCC_OscConfig+0x18c>
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d116      	bne.n	8004184 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	4b43      	ldr	r3, [pc, #268]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_RCC_OscConfig+0x176>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e1c0      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416e:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4939      	ldr	r1, [pc, #228]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	e03a      	b.n	80041fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800418c:	4b36      	ldr	r3, [pc, #216]	; (8004268 <HAL_RCC_OscConfig+0x270>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004192:	f7fe fcef 	bl	8002b74 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419a:	f7fe fceb 	bl	8002b74 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e1a1      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	4b2d      	ldr	r3, [pc, #180]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4927      	ldr	r1, [pc, #156]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
 80041cc:	e015      	b.n	80041fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <HAL_RCC_OscConfig+0x270>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe fcce 	bl	8002b74 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041dc:	f7fe fcca 	bl	8002b74 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e180      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d03a      	beq.n	800427c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d019      	beq.n	8004242 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <HAL_RCC_OscConfig+0x274>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004214:	f7fe fcae 	bl	8002b74 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421c:	f7fe fcaa 	bl	8002b74 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e160      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_RCC_OscConfig+0x26c>)
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800423a:	2001      	movs	r0, #1
 800423c:	f000 face 	bl	80047dc <RCC_Delay>
 8004240:	e01c      	b.n	800427c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004242:	4b0a      	ldr	r3, [pc, #40]	; (800426c <HAL_RCC_OscConfig+0x274>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004248:	f7fe fc94 	bl	8002b74 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424e:	e00f      	b.n	8004270 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004250:	f7fe fc90 	bl	8002b74 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d908      	bls.n	8004270 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e146      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
 8004268:	42420000 	.word	0x42420000
 800426c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	4b92      	ldr	r3, [pc, #584]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e9      	bne.n	8004250 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80a6 	beq.w	80043d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800428e:	4b8b      	ldr	r3, [pc, #556]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10d      	bne.n	80042b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800429a:	4b88      	ldr	r3, [pc, #544]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4a87      	ldr	r2, [pc, #540]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a4:	61d3      	str	r3, [r2, #28]
 80042a6:	4b85      	ldr	r3, [pc, #532]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	60bb      	str	r3, [r7, #8]
 80042b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042b2:	2301      	movs	r3, #1
 80042b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b6:	4b82      	ldr	r3, [pc, #520]	; (80044c0 <HAL_RCC_OscConfig+0x4c8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d118      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042c2:	4b7f      	ldr	r3, [pc, #508]	; (80044c0 <HAL_RCC_OscConfig+0x4c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7e      	ldr	r2, [pc, #504]	; (80044c0 <HAL_RCC_OscConfig+0x4c8>)
 80042c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ce:	f7fe fc51 	bl	8002b74 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d6:	f7fe fc4d 	bl	8002b74 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b64      	cmp	r3, #100	; 0x64
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e103      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	4b75      	ldr	r3, [pc, #468]	; (80044c0 <HAL_RCC_OscConfig+0x4c8>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0f0      	beq.n	80042d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <HAL_RCC_OscConfig+0x312>
 80042fc:	4b6f      	ldr	r3, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	6a1b      	ldr	r3, [r3, #32]
 8004300:	4a6e      	ldr	r2, [pc, #440]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	6213      	str	r3, [r2, #32]
 8004308:	e02d      	b.n	8004366 <HAL_RCC_OscConfig+0x36e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <HAL_RCC_OscConfig+0x334>
 8004312:	4b6a      	ldr	r3, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4a69      	ldr	r2, [pc, #420]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	6213      	str	r3, [r2, #32]
 800431e:	4b67      	ldr	r3, [pc, #412]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	4a66      	ldr	r2, [pc, #408]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004324:	f023 0304 	bic.w	r3, r3, #4
 8004328:	6213      	str	r3, [r2, #32]
 800432a:	e01c      	b.n	8004366 <HAL_RCC_OscConfig+0x36e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b05      	cmp	r3, #5
 8004332:	d10c      	bne.n	800434e <HAL_RCC_OscConfig+0x356>
 8004334:	4b61      	ldr	r3, [pc, #388]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4a60      	ldr	r2, [pc, #384]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800433a:	f043 0304 	orr.w	r3, r3, #4
 800433e:	6213      	str	r3, [r2, #32]
 8004340:	4b5e      	ldr	r3, [pc, #376]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	6213      	str	r3, [r2, #32]
 800434c:	e00b      	b.n	8004366 <HAL_RCC_OscConfig+0x36e>
 800434e:	4b5b      	ldr	r3, [pc, #364]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4a5a      	ldr	r2, [pc, #360]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004354:	f023 0301 	bic.w	r3, r3, #1
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	4b58      	ldr	r3, [pc, #352]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a57      	ldr	r2, [pc, #348]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004360:	f023 0304 	bic.w	r3, r3, #4
 8004364:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d015      	beq.n	800439a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fe fc01 	bl	8002b74 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fe fbfd 	bl	8002b74 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	; 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e0b1      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438c:	4b4b      	ldr	r3, [pc, #300]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0ee      	beq.n	8004376 <HAL_RCC_OscConfig+0x37e>
 8004398:	e014      	b.n	80043c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800439a:	f7fe fbeb 	bl	8002b74 <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043a2:	f7fe fbe7 	bl	8002b74 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e09b      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b8:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ee      	bne.n	80043a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d105      	bne.n	80043d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ca:	4b3c      	ldr	r3, [pc, #240]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4a3b      	ldr	r2, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8087 	beq.w	80044ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d061      	beq.n	80044b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d146      	bne.n	8004482 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <HAL_RCC_OscConfig+0x4cc>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7fe fbbb 	bl	8002b74 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fe fbb7 	bl	8002b74 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e06d      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004414:	4b29      	ldr	r3, [pc, #164]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1f0      	bne.n	8004402 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004428:	d108      	bne.n	800443c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800442a:	4b24      	ldr	r3, [pc, #144]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	4921      	ldr	r1, [pc, #132]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800443c:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a19      	ldr	r1, [r3, #32]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	430b      	orrs	r3, r1
 800444e:	491b      	ldr	r1, [pc, #108]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004454:	4b1b      	ldr	r3, [pc, #108]	; (80044c4 <HAL_RCC_OscConfig+0x4cc>)
 8004456:	2201      	movs	r2, #1
 8004458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445a:	f7fe fb8b 	bl	8002b74 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004462:	f7fe fb87 	bl	8002b74 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e03d      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004474:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x46a>
 8004480:	e035      	b.n	80044ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b10      	ldr	r3, [pc, #64]	; (80044c4 <HAL_RCC_OscConfig+0x4cc>)
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fe fb74 	bl	8002b74 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004490:	f7fe fb70 	bl	8002b74 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e026      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0x498>
 80044ae:	e01e      	b.n	80044ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e019      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40007000 	.word	0x40007000
 80044c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044c8:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_RCC_OscConfig+0x500>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d106      	bne.n	80044ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d001      	beq.n	80044ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40021000 	.word	0x40021000

080044fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0d0      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004510:	4b6a      	ldr	r3, [pc, #424]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d910      	bls.n	8004540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b67      	ldr	r3, [pc, #412]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 0207 	bic.w	r2, r3, #7
 8004526:	4965      	ldr	r1, [pc, #404]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b63      	ldr	r3, [pc, #396]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b8      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	4a58      	ldr	r2, [pc, #352]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800455e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004562:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4a52      	ldr	r2, [pc, #328]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004576:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800457a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	494d      	ldr	r1, [pc, #308]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800458a:	4313      	orrs	r3, r2
 800458c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d040      	beq.n	800461c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d115      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e07f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d107      	bne.n	80045ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e073      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ca:	4b3d      	ldr	r3, [pc, #244]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e06b      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045da:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	4936      	ldr	r1, [pc, #216]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fe fac2 	bl	8002b74 <HAL_GetTick>
 80045f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f2:	e00a      	b.n	800460a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f4:	f7fe fabe 	bl	8002b74 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e053      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460a:	4b2d      	ldr	r3, [pc, #180]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f003 020c 	and.w	r2, r3, #12
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	429a      	cmp	r2, r3
 800461a:	d1eb      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800461c:	4b27      	ldr	r3, [pc, #156]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d210      	bcs.n	800464c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b24      	ldr	r3, [pc, #144]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 0207 	bic.w	r2, r3, #7
 8004632:	4922      	ldr	r1, [pc, #136]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_RCC_ClockConfig+0x1c0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4916      	ldr	r1, [pc, #88]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800468a:	f000 f821 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800468e:	4602      	mov	r2, r0
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_ClockConfig+0x1c4>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	490a      	ldr	r1, [pc, #40]	; (80046c4 <HAL_RCC_ClockConfig+0x1c8>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x1cc>)
 80046a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_ClockConfig+0x1d0>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe fa20 	bl	8002af0 <HAL_InitTick>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40022000 	.word	0x40022000
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08006410 	.word	0x08006410
 80046c8:	20000004 	.word	0x20000004
 80046cc:	20000008 	.word	0x20000008

080046d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	2300      	movs	r3, #0
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046ea:	4b1e      	ldr	r3, [pc, #120]	; (8004764 <HAL_RCC_GetSysClockFreq+0x94>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 030c 	and.w	r3, r3, #12
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d002      	beq.n	8004700 <HAL_RCC_GetSysClockFreq+0x30>
 80046fa:	2b08      	cmp	r3, #8
 80046fc:	d003      	beq.n	8004706 <HAL_RCC_GetSysClockFreq+0x36>
 80046fe:	e027      	b.n	8004750 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004700:	4b19      	ldr	r3, [pc, #100]	; (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 8004702:	613b      	str	r3, [r7, #16]
      break;
 8004704:	e027      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	0c9b      	lsrs	r3, r3, #18
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004710:	5cd3      	ldrb	r3, [r2, r3]
 8004712:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d010      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <HAL_RCC_GetSysClockFreq+0x94>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	0c5b      	lsrs	r3, r3, #17
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	4a11      	ldr	r2, [pc, #68]	; (8004770 <HAL_RCC_GetSysClockFreq+0xa0>)
 800472a:	5cd3      	ldrb	r3, [r2, r3]
 800472c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a0d      	ldr	r2, [pc, #52]	; (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 8004732:	fb03 f202 	mul.w	r2, r3, r2
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e004      	b.n	800474a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004744:	fb02 f303 	mul.w	r3, r2, r3
 8004748:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	613b      	str	r3, [r7, #16]
      break;
 800474e:	e002      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_RCC_GetSysClockFreq+0x98>)
 8004752:	613b      	str	r3, [r7, #16]
      break;
 8004754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004756:	693b      	ldr	r3, [r7, #16]
}
 8004758:	4618      	mov	r0, r3
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	007a1200 	.word	0x007a1200
 800476c:	08006428 	.word	0x08006428
 8004770:	08006438 	.word	0x08006438
 8004774:	003d0900 	.word	0x003d0900

08004778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800477c:	4b02      	ldr	r3, [pc, #8]	; (8004788 <HAL_RCC_GetHCLKFreq+0x10>)
 800477e:	681b      	ldr	r3, [r3, #0]
}
 8004780:	4618      	mov	r0, r3
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr
 8004788:	20000004 	.word	0x20000004

0800478c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004790:	f7ff fff2 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4903      	ldr	r1, [pc, #12]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40021000 	.word	0x40021000
 80047b0:	08006420 	.word	0x08006420

080047b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047b8:	f7ff ffde 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	0adb      	lsrs	r3, r3, #11
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4903      	ldr	r1, [pc, #12]	; (80047d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021000 	.word	0x40021000
 80047d8:	08006420 	.word	0x08006420

080047dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <RCC_Delay+0x34>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <RCC_Delay+0x38>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	0a5b      	lsrs	r3, r3, #9
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047f8:	bf00      	nop
  }
  while (Delay --);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1e5a      	subs	r2, r3, #1
 80047fe:	60fa      	str	r2, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f9      	bne.n	80047f8 <RCC_Delay+0x1c>
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	20000004 	.word	0x20000004
 8004814:	10624dd3 	.word	0x10624dd3

08004818 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	613b      	str	r3, [r7, #16]
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d07d      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004838:	4b4f      	ldr	r3, [pc, #316]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483a:	69db      	ldr	r3, [r3, #28]
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10d      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004844:	4b4c      	ldr	r3, [pc, #304]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	4a4b      	ldr	r2, [pc, #300]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484e:	61d3      	str	r3, [r2, #28]
 8004850:	4b49      	ldr	r3, [pc, #292]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800485c:	2301      	movs	r3, #1
 800485e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004860:	4b46      	ldr	r3, [pc, #280]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d118      	bne.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800486c:	4b43      	ldr	r3, [pc, #268]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a42      	ldr	r2, [pc, #264]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004876:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004878:	f7fe f97c 	bl	8002b74 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487e:	e008      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004880:	f7fe f978 	bl	8002b74 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e06d      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004892:	4b3a      	ldr	r3, [pc, #232]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0f0      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800489e:	4b36      	ldr	r3, [pc, #216]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d02e      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d027      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048bc:	4b2e      	ldr	r3, [pc, #184]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	6a1b      	ldr	r3, [r3, #32]
 80048c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048c6:	4b2e      	ldr	r3, [pc, #184]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048d2:	4a29      	ldr	r2, [pc, #164]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d014      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e2:	f7fe f947 	bl	8002b74 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e8:	e00a      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fe f943 	bl	8002b74 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e036      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004900:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0ee      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800490c:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	4917      	ldr	r1, [pc, #92]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800491a:	4313      	orrs	r3, r2
 800491c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	4a13      	ldr	r2, [pc, #76]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d008      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800493c:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	490b      	ldr	r1, [pc, #44]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4904      	ldr	r1, [pc, #16]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
 800497c:	40007000 	.word	0x40007000
 8004980:	42420440 	.word	0x42420440

08004984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e042      	b.n	8004a1c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800499c:	b2db      	uxtb	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f7fd ffb6 	bl	800291c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2224      	movs	r2, #36	; 0x24
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fbff 	bl	80051cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691a      	ldr	r2, [r3, #16]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	; 0x28
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b20      	cmp	r3, #32
 8004a42:	d16d      	bne.n	8004b20 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d002      	beq.n	8004a50 <HAL_UART_Transmit+0x2c>
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e066      	b.n	8004b22 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2221      	movs	r2, #33	; 0x21
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a62:	f7fe f887 	bl	8002b74 <HAL_GetTick>
 8004a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a7c:	d108      	bne.n	8004a90 <HAL_UART_Transmit+0x6c>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	e003      	b.n	8004a98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a98:	e02a      	b.n	8004af0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f9ff 	bl	8004ea8 <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e036      	b.n	8004b22 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	3302      	adds	r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e007      	b.n	8004ae2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1cf      	bne.n	8004a9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2200      	movs	r2, #0
 8004b02:	2140      	movs	r1, #64	; 0x40
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f9cf 	bl	8004ea8 <UART_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e006      	b.n	8004b22 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	4613      	mov	r3, r2
 8004b36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d112      	bne.n	8004b6a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Receive_DMA+0x26>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e00b      	b.n	8004b6c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fa0f 	bl	8004f84 <UART_Start_Receive_DMA>
 8004b66:	4603      	mov	r3, r0
 8004b68:	e000      	b.n	8004b6c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b6a:	2302      	movs	r3, #2
  }
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b090      	sub	sp, #64	; 0x40
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bf14      	ite	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	2300      	moveq	r3, #0
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b21      	cmp	r3, #33	; 0x21
 8004ba0:	d128      	bne.n	8004bf4 <HAL_UART_DMAStop+0x80>
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d025      	beq.n	8004bf4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	e853 3f00 	ldrex	r3, [r3]
 8004bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3314      	adds	r3, #20
 8004bc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bc8:	633a      	str	r2, [r7, #48]	; 0x30
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd0:	e841 2300 	strex	r3, r2, [r1]
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1e5      	bne.n	8004ba8 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d004      	beq.n	8004bee <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe fcdf 	bl	80035ac <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fa62 	bl	80050b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	bf14      	ite	ne
 8004c02:	2301      	movne	r3, #1
 8004c04:	2300      	moveq	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b22      	cmp	r3, #34	; 0x22
 8004c14:	d128      	bne.n	8004c68 <HAL_UART_DMAStop+0xf4>
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d025      	beq.n	8004c68 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c32:	637b      	str	r3, [r7, #52]	; 0x34
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c3c:	61fa      	str	r2, [r7, #28]
 8004c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	69b9      	ldr	r1, [r7, #24]
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	617b      	str	r3, [r7, #20]
   return(result);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7fe fca5 	bl	80035ac <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa4f 	bl	8005106 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3740      	adds	r7, #64	; 0x40
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr

08004cac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b09c      	sub	sp, #112	; 0x70
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0320 	and.w	r3, r3, #32
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d172      	bne.n	8004dae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	2200      	movs	r2, #0
 8004ccc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ce4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cee:	65ba      	str	r2, [r7, #88]	; 0x58
 8004cf0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	667b      	str	r3, [r7, #100]	; 0x64
 8004d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d22:	647a      	str	r2, [r7, #68]	; 0x44
 8004d24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3314      	adds	r3, #20
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	e853 3f00 	ldrex	r3, [r3]
 8004d44:	623b      	str	r3, [r7, #32]
   return(result);
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d4c:	663b      	str	r3, [r7, #96]	; 0x60
 8004d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3314      	adds	r3, #20
 8004d54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d56:	633a      	str	r2, [r7, #48]	; 0x30
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d5e:	e841 2300 	strex	r3, r2, [r1]
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1e5      	bne.n	8004d36 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d119      	bne.n	8004dae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	330c      	adds	r3, #12
 8004d80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	e853 3f00 	ldrex	r3, [r3]
 8004d88:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f023 0310 	bic.w	r3, r3, #16
 8004d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	330c      	adds	r3, #12
 8004d98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d9a:	61fa      	str	r2, [r7, #28]
 8004d9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	69b9      	ldr	r1, [r7, #24]
 8004da0:	69fa      	ldr	r2, [r7, #28]
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	617b      	str	r3, [r7, #20]
   return(result);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e5      	bne.n	8004d7a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db0:	2200      	movs	r2, #0
 8004db2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d106      	bne.n	8004dca <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004dc4:	f7ff ff67 	bl	8004c96 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dc8:	e002      	b.n	8004dd0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004dca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004dcc:	f7fc faa6 	bl	800131c <HAL_UART_RxCpltCallback>
}
 8004dd0:	bf00      	nop
 8004dd2:	3770      	adds	r7, #112	; 0x70
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d108      	bne.n	8004e06 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff ff49 	bl	8004c96 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e04:	e002      	b.n	8004e0c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f7ff ff33 	bl	8004c72 <HAL_UART_RxHalfCpltCallback>
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b21      	cmp	r3, #33	; 0x21
 8004e46:	d108      	bne.n	8004e5a <UART_DMAError+0x46>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	2200      	movs	r2, #0
 8004e52:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004e54:	68b8      	ldr	r0, [r7, #8]
 8004e56:	f000 f92f 	bl	80050b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf14      	ite	ne
 8004e68:	2301      	movne	r3, #1
 8004e6a:	2300      	moveq	r3, #0
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b22      	cmp	r3, #34	; 0x22
 8004e7a:	d108      	bne.n	8004e8e <UART_DMAError+0x7a>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2200      	movs	r2, #0
 8004e86:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e88:	68b8      	ldr	r0, [r7, #8]
 8004e8a:	f000 f93c 	bl	8005106 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e92:	f043 0210 	orr.w	r2, r3, #16
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e9a:	68b8      	ldr	r0, [r7, #8]
 8004e9c:	f7ff fef2 	bl	8004c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b090      	sub	sp, #64	; 0x40
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	603b      	str	r3, [r7, #0]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb8:	e050      	b.n	8004f5c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d04c      	beq.n	8004f5c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d007      	beq.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ec8:	f7fd fe54 	bl	8002b74 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d241      	bcs.n	8004f5c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	330c      	adds	r3, #12
 8004ede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	330c      	adds	r3, #12
 8004ef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ef8:	637a      	str	r2, [r7, #52]	; 0x34
 8004efa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f00:	e841 2300 	strex	r3, r2, [r1]
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1e5      	bne.n	8004ed8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3314      	adds	r3, #20
 8004f12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 0301 	bic.w	r3, r3, #1
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3314      	adds	r3, #20
 8004f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f2c:	623a      	str	r2, [r7, #32]
 8004f2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	69f9      	ldr	r1, [r7, #28]
 8004f32:	6a3a      	ldr	r2, [r7, #32]
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e5      	bne.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e00f      	b.n	8004f7c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4013      	ands	r3, r2
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	79fb      	ldrb	r3, [r7, #7]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d09f      	beq.n	8004eba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3740      	adds	r7, #64	; 0x40
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b098      	sub	sp, #96	; 0x60
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	88fa      	ldrh	r2, [r7, #6]
 8004f9c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2222      	movs	r2, #34	; 0x22
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	4a3e      	ldr	r2, [pc, #248]	; (80050ac <UART_Start_Receive_DMA+0x128>)
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb8:	4a3d      	ldr	r2, [pc, #244]	; (80050b0 <UART_Start_Receive_DMA+0x12c>)
 8004fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc0:	4a3c      	ldr	r2, [pc, #240]	; (80050b4 <UART_Start_Receive_DMA+0x130>)
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc8:	2200      	movs	r2, #0
 8004fca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	f7fe fa82 	bl	80034ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	613b      	str	r3, [r7, #16]
 8004ffc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d019      	beq.n	800503a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800501c:	65bb      	str	r3, [r7, #88]	; 0x58
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005026:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800502c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800502e:	e841 2300 	strex	r3, r2, [r1]
 8005032:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1e5      	bne.n	8005006 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3314      	adds	r3, #20
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	657b      	str	r3, [r7, #84]	; 0x54
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3314      	adds	r3, #20
 8005058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800505a:	63ba      	str	r2, [r7, #56]	; 0x38
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005062:	e841 2300 	strex	r3, r2, [r1]
 8005066:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1e5      	bne.n	800503a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3314      	adds	r3, #20
 8005074:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	e853 3f00 	ldrex	r3, [r3]
 800507c:	617b      	str	r3, [r7, #20]
   return(result);
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005084:	653b      	str	r3, [r7, #80]	; 0x50
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3314      	adds	r3, #20
 800508c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800508e:	627a      	str	r2, [r7, #36]	; 0x24
 8005090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6a39      	ldr	r1, [r7, #32]
 8005094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	61fb      	str	r3, [r7, #28]
   return(result);
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1e5      	bne.n	800506e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3760      	adds	r7, #96	; 0x60
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	08004cad 	.word	0x08004cad
 80050b0:	08004dd9 	.word	0x08004dd9
 80050b4:	08004e15 	.word	0x08004e15

080050b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b089      	sub	sp, #36	; 0x24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	e853 3f00 	ldrex	r3, [r3]
 80050ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	61ba      	str	r2, [r7, #24]
 80050e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e4:	6979      	ldr	r1, [r7, #20]
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	e841 2300 	strex	r3, r2, [r1]
 80050ec:	613b      	str	r3, [r7, #16]
   return(result);
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1e5      	bne.n	80050c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80050fc:	bf00      	nop
 80050fe:	3724      	adds	r7, #36	; 0x24
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005106:	b480      	push	{r7}
 8005108:	b095      	sub	sp, #84	; 0x54
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	330c      	adds	r3, #12
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800512e:	643a      	str	r2, [r7, #64]	; 0x40
 8005130:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e5      	bne.n	800510e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3314      	adds	r3, #20
 8005148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	e853 3f00 	ldrex	r3, [r3]
 8005150:	61fb      	str	r3, [r7, #28]
   return(result);
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f023 0301 	bic.w	r3, r3, #1
 8005158:	64bb      	str	r3, [r7, #72]	; 0x48
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3314      	adds	r3, #20
 8005160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800516a:	e841 2300 	strex	r3, r2, [r1]
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1e5      	bne.n	8005142 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	2b01      	cmp	r3, #1
 800517c:	d119      	bne.n	80051b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	60bb      	str	r3, [r7, #8]
   return(result);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	647b      	str	r3, [r7, #68]	; 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519e:	61ba      	str	r2, [r7, #24]
 80051a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6979      	ldr	r1, [r7, #20]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	613b      	str	r3, [r7, #16]
   return(result);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e5      	bne.n	800517e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051c0:	bf00      	nop
 80051c2:	3754      	adds	r7, #84	; 0x54
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
	...

080051cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005206:	f023 030c 	bic.w	r3, r3, #12
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	430b      	orrs	r3, r1
 8005212:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	699a      	ldr	r2, [r3, #24]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <UART_SetConfig+0x114>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d103      	bne.n	800523c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7ff fabe 	bl	80047b4 <HAL_RCC_GetPCLK2Freq>
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	e002      	b.n	8005242 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800523c:	f7ff faa6 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8005240:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	009a      	lsls	r2, r3, #2
 800524c:	441a      	add	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	4a22      	ldr	r2, [pc, #136]	; (80052e4 <UART_SetConfig+0x118>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	0119      	lsls	r1, r3, #4
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009a      	lsls	r2, r3, #2
 800526c:	441a      	add	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	fbb2 f2f3 	udiv	r2, r2, r3
 8005278:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <UART_SetConfig+0x118>)
 800527a:	fba3 0302 	umull	r0, r3, r3, r2
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	2064      	movs	r0, #100	; 0x64
 8005282:	fb00 f303 	mul.w	r3, r0, r3
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	011b      	lsls	r3, r3, #4
 800528a:	3332      	adds	r3, #50	; 0x32
 800528c:	4a15      	ldr	r2, [pc, #84]	; (80052e4 <UART_SetConfig+0x118>)
 800528e:	fba2 2303 	umull	r2, r3, r2, r3
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005298:	4419      	add	r1, r3
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009a      	lsls	r2, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80052b0:	4b0c      	ldr	r3, [pc, #48]	; (80052e4 <UART_SetConfig+0x118>)
 80052b2:	fba3 0302 	umull	r0, r3, r3, r2
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2064      	movs	r0, #100	; 0x64
 80052ba:	fb00 f303 	mul.w	r3, r0, r3
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	3332      	adds	r3, #50	; 0x32
 80052c4:	4a07      	ldr	r2, [pc, #28]	; (80052e4 <UART_SetConfig+0x118>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	f003 020f 	and.w	r2, r3, #15
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	440a      	add	r2, r1
 80052d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40013800 	.word	0x40013800
 80052e4:	51eb851f 	.word	0x51eb851f

080052e8 <malloc>:
 80052e8:	4b02      	ldr	r3, [pc, #8]	; (80052f4 <malloc+0xc>)
 80052ea:	4601      	mov	r1, r0
 80052ec:	6818      	ldr	r0, [r3, #0]
 80052ee:	f000 b823 	b.w	8005338 <_malloc_r>
 80052f2:	bf00      	nop
 80052f4:	2000005c 	.word	0x2000005c

080052f8 <sbrk_aligned>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	4e0e      	ldr	r6, [pc, #56]	; (8005334 <sbrk_aligned+0x3c>)
 80052fc:	460c      	mov	r4, r1
 80052fe:	6831      	ldr	r1, [r6, #0]
 8005300:	4605      	mov	r5, r0
 8005302:	b911      	cbnz	r1, 800530a <sbrk_aligned+0x12>
 8005304:	f000 f8e6 	bl	80054d4 <_sbrk_r>
 8005308:	6030      	str	r0, [r6, #0]
 800530a:	4621      	mov	r1, r4
 800530c:	4628      	mov	r0, r5
 800530e:	f000 f8e1 	bl	80054d4 <_sbrk_r>
 8005312:	1c43      	adds	r3, r0, #1
 8005314:	d00a      	beq.n	800532c <sbrk_aligned+0x34>
 8005316:	1cc4      	adds	r4, r0, #3
 8005318:	f024 0403 	bic.w	r4, r4, #3
 800531c:	42a0      	cmp	r0, r4
 800531e:	d007      	beq.n	8005330 <sbrk_aligned+0x38>
 8005320:	1a21      	subs	r1, r4, r0
 8005322:	4628      	mov	r0, r5
 8005324:	f000 f8d6 	bl	80054d4 <_sbrk_r>
 8005328:	3001      	adds	r0, #1
 800532a:	d101      	bne.n	8005330 <sbrk_aligned+0x38>
 800532c:	f04f 34ff 	mov.w	r4, #4294967295
 8005330:	4620      	mov	r0, r4
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	2000066c 	.word	0x2000066c

08005338 <_malloc_r>:
 8005338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800533c:	1ccd      	adds	r5, r1, #3
 800533e:	f025 0503 	bic.w	r5, r5, #3
 8005342:	3508      	adds	r5, #8
 8005344:	2d0c      	cmp	r5, #12
 8005346:	bf38      	it	cc
 8005348:	250c      	movcc	r5, #12
 800534a:	2d00      	cmp	r5, #0
 800534c:	4607      	mov	r7, r0
 800534e:	db01      	blt.n	8005354 <_malloc_r+0x1c>
 8005350:	42a9      	cmp	r1, r5
 8005352:	d905      	bls.n	8005360 <_malloc_r+0x28>
 8005354:	230c      	movs	r3, #12
 8005356:	2600      	movs	r6, #0
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4630      	mov	r0, r6
 800535c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005360:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005434 <_malloc_r+0xfc>
 8005364:	f000 f868 	bl	8005438 <__malloc_lock>
 8005368:	f8d8 3000 	ldr.w	r3, [r8]
 800536c:	461c      	mov	r4, r3
 800536e:	bb5c      	cbnz	r4, 80053c8 <_malloc_r+0x90>
 8005370:	4629      	mov	r1, r5
 8005372:	4638      	mov	r0, r7
 8005374:	f7ff ffc0 	bl	80052f8 <sbrk_aligned>
 8005378:	1c43      	adds	r3, r0, #1
 800537a:	4604      	mov	r4, r0
 800537c:	d155      	bne.n	800542a <_malloc_r+0xf2>
 800537e:	f8d8 4000 	ldr.w	r4, [r8]
 8005382:	4626      	mov	r6, r4
 8005384:	2e00      	cmp	r6, #0
 8005386:	d145      	bne.n	8005414 <_malloc_r+0xdc>
 8005388:	2c00      	cmp	r4, #0
 800538a:	d048      	beq.n	800541e <_malloc_r+0xe6>
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	4631      	mov	r1, r6
 8005390:	4638      	mov	r0, r7
 8005392:	eb04 0903 	add.w	r9, r4, r3
 8005396:	f000 f89d 	bl	80054d4 <_sbrk_r>
 800539a:	4581      	cmp	r9, r0
 800539c:	d13f      	bne.n	800541e <_malloc_r+0xe6>
 800539e:	6821      	ldr	r1, [r4, #0]
 80053a0:	4638      	mov	r0, r7
 80053a2:	1a6d      	subs	r5, r5, r1
 80053a4:	4629      	mov	r1, r5
 80053a6:	f7ff ffa7 	bl	80052f8 <sbrk_aligned>
 80053aa:	3001      	adds	r0, #1
 80053ac:	d037      	beq.n	800541e <_malloc_r+0xe6>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	442b      	add	r3, r5
 80053b2:	6023      	str	r3, [r4, #0]
 80053b4:	f8d8 3000 	ldr.w	r3, [r8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d038      	beq.n	800542e <_malloc_r+0xf6>
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	42a2      	cmp	r2, r4
 80053c0:	d12b      	bne.n	800541a <_malloc_r+0xe2>
 80053c2:	2200      	movs	r2, #0
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	e00f      	b.n	80053e8 <_malloc_r+0xb0>
 80053c8:	6822      	ldr	r2, [r4, #0]
 80053ca:	1b52      	subs	r2, r2, r5
 80053cc:	d41f      	bmi.n	800540e <_malloc_r+0xd6>
 80053ce:	2a0b      	cmp	r2, #11
 80053d0:	d917      	bls.n	8005402 <_malloc_r+0xca>
 80053d2:	1961      	adds	r1, r4, r5
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	6025      	str	r5, [r4, #0]
 80053d8:	bf18      	it	ne
 80053da:	6059      	strne	r1, [r3, #4]
 80053dc:	6863      	ldr	r3, [r4, #4]
 80053de:	bf08      	it	eq
 80053e0:	f8c8 1000 	streq.w	r1, [r8]
 80053e4:	5162      	str	r2, [r4, r5]
 80053e6:	604b      	str	r3, [r1, #4]
 80053e8:	4638      	mov	r0, r7
 80053ea:	f104 060b 	add.w	r6, r4, #11
 80053ee:	f000 f829 	bl	8005444 <__malloc_unlock>
 80053f2:	f026 0607 	bic.w	r6, r6, #7
 80053f6:	1d23      	adds	r3, r4, #4
 80053f8:	1af2      	subs	r2, r6, r3
 80053fa:	d0ae      	beq.n	800535a <_malloc_r+0x22>
 80053fc:	1b9b      	subs	r3, r3, r6
 80053fe:	50a3      	str	r3, [r4, r2]
 8005400:	e7ab      	b.n	800535a <_malloc_r+0x22>
 8005402:	42a3      	cmp	r3, r4
 8005404:	6862      	ldr	r2, [r4, #4]
 8005406:	d1dd      	bne.n	80053c4 <_malloc_r+0x8c>
 8005408:	f8c8 2000 	str.w	r2, [r8]
 800540c:	e7ec      	b.n	80053e8 <_malloc_r+0xb0>
 800540e:	4623      	mov	r3, r4
 8005410:	6864      	ldr	r4, [r4, #4]
 8005412:	e7ac      	b.n	800536e <_malloc_r+0x36>
 8005414:	4634      	mov	r4, r6
 8005416:	6876      	ldr	r6, [r6, #4]
 8005418:	e7b4      	b.n	8005384 <_malloc_r+0x4c>
 800541a:	4613      	mov	r3, r2
 800541c:	e7cc      	b.n	80053b8 <_malloc_r+0x80>
 800541e:	230c      	movs	r3, #12
 8005420:	4638      	mov	r0, r7
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	f000 f80e 	bl	8005444 <__malloc_unlock>
 8005428:	e797      	b.n	800535a <_malloc_r+0x22>
 800542a:	6025      	str	r5, [r4, #0]
 800542c:	e7dc      	b.n	80053e8 <_malloc_r+0xb0>
 800542e:	605b      	str	r3, [r3, #4]
 8005430:	deff      	udf	#255	; 0xff
 8005432:	bf00      	nop
 8005434:	20000668 	.word	0x20000668

08005438 <__malloc_lock>:
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <__malloc_lock+0x8>)
 800543a:	f000 b885 	b.w	8005548 <__retarget_lock_acquire_recursive>
 800543e:	bf00      	nop
 8005440:	200007ac 	.word	0x200007ac

08005444 <__malloc_unlock>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__malloc_unlock+0x8>)
 8005446:	f000 b880 	b.w	800554a <__retarget_lock_release_recursive>
 800544a:	bf00      	nop
 800544c:	200007ac 	.word	0x200007ac

08005450 <_vsniprintf_r>:
 8005450:	b530      	push	{r4, r5, lr}
 8005452:	4614      	mov	r4, r2
 8005454:	2c00      	cmp	r4, #0
 8005456:	4605      	mov	r5, r0
 8005458:	461a      	mov	r2, r3
 800545a:	b09b      	sub	sp, #108	; 0x6c
 800545c:	da05      	bge.n	800546a <_vsniprintf_r+0x1a>
 800545e:	238b      	movs	r3, #139	; 0x8b
 8005460:	6003      	str	r3, [r0, #0]
 8005462:	f04f 30ff 	mov.w	r0, #4294967295
 8005466:	b01b      	add	sp, #108	; 0x6c
 8005468:	bd30      	pop	{r4, r5, pc}
 800546a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800546e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005472:	bf0c      	ite	eq
 8005474:	4623      	moveq	r3, r4
 8005476:	f104 33ff 	addne.w	r3, r4, #4294967295
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	9305      	str	r3, [sp, #20]
 800547e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005482:	9100      	str	r1, [sp, #0]
 8005484:	9104      	str	r1, [sp, #16]
 8005486:	f8ad 300e 	strh.w	r3, [sp, #14]
 800548a:	4669      	mov	r1, sp
 800548c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800548e:	f000 f8ff 	bl	8005690 <_svfiprintf_r>
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	bfbc      	itt	lt
 8005496:	238b      	movlt	r3, #139	; 0x8b
 8005498:	602b      	strlt	r3, [r5, #0]
 800549a:	2c00      	cmp	r4, #0
 800549c:	d0e3      	beq.n	8005466 <_vsniprintf_r+0x16>
 800549e:	2200      	movs	r2, #0
 80054a0:	9b00      	ldr	r3, [sp, #0]
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e7df      	b.n	8005466 <_vsniprintf_r+0x16>
	...

080054a8 <vsniprintf>:
 80054a8:	b507      	push	{r0, r1, r2, lr}
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	4613      	mov	r3, r2
 80054ae:	460a      	mov	r2, r1
 80054b0:	4601      	mov	r1, r0
 80054b2:	4803      	ldr	r0, [pc, #12]	; (80054c0 <vsniprintf+0x18>)
 80054b4:	6800      	ldr	r0, [r0, #0]
 80054b6:	f7ff ffcb 	bl	8005450 <_vsniprintf_r>
 80054ba:	b003      	add	sp, #12
 80054bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80054c0:	2000005c 	.word	0x2000005c

080054c4 <memset>:
 80054c4:	4603      	mov	r3, r0
 80054c6:	4402      	add	r2, r0
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d100      	bne.n	80054ce <memset+0xa>
 80054cc:	4770      	bx	lr
 80054ce:	f803 1b01 	strb.w	r1, [r3], #1
 80054d2:	e7f9      	b.n	80054c8 <memset+0x4>

080054d4 <_sbrk_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	2300      	movs	r3, #0
 80054d8:	4d05      	ldr	r5, [pc, #20]	; (80054f0 <_sbrk_r+0x1c>)
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	602b      	str	r3, [r5, #0]
 80054e0:	f7fd f98c 	bl	80027fc <_sbrk>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_sbrk_r+0x1a>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_sbrk_r+0x1a>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	200007a8 	.word	0x200007a8

080054f4 <__errno>:
 80054f4:	4b01      	ldr	r3, [pc, #4]	; (80054fc <__errno+0x8>)
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	2000005c 	.word	0x2000005c

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	2600      	movs	r6, #0
 8005504:	4d0c      	ldr	r5, [pc, #48]	; (8005538 <__libc_init_array+0x38>)
 8005506:	4c0d      	ldr	r4, [pc, #52]	; (800553c <__libc_init_array+0x3c>)
 8005508:	1b64      	subs	r4, r4, r5
 800550a:	10a4      	asrs	r4, r4, #2
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	f000 fbbe 	bl	8005c90 <_init>
 8005514:	2600      	movs	r6, #0
 8005516:	4d0a      	ldr	r5, [pc, #40]	; (8005540 <__libc_init_array+0x40>)
 8005518:	4c0a      	ldr	r4, [pc, #40]	; (8005544 <__libc_init_array+0x44>)
 800551a:	1b64      	subs	r4, r4, r5
 800551c:	10a4      	asrs	r4, r4, #2
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	08006470 	.word	0x08006470
 800553c:	08006470 	.word	0x08006470
 8005540:	08006470 	.word	0x08006470
 8005544:	08006474 	.word	0x08006474

08005548 <__retarget_lock_acquire_recursive>:
 8005548:	4770      	bx	lr

0800554a <__retarget_lock_release_recursive>:
 800554a:	4770      	bx	lr

0800554c <_free_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4605      	mov	r5, r0
 8005550:	2900      	cmp	r1, #0
 8005552:	d040      	beq.n	80055d6 <_free_r+0x8a>
 8005554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005558:	1f0c      	subs	r4, r1, #4
 800555a:	2b00      	cmp	r3, #0
 800555c:	bfb8      	it	lt
 800555e:	18e4      	addlt	r4, r4, r3
 8005560:	f7ff ff6a 	bl	8005438 <__malloc_lock>
 8005564:	4a1c      	ldr	r2, [pc, #112]	; (80055d8 <_free_r+0x8c>)
 8005566:	6813      	ldr	r3, [r2, #0]
 8005568:	b933      	cbnz	r3, 8005578 <_free_r+0x2c>
 800556a:	6063      	str	r3, [r4, #4]
 800556c:	6014      	str	r4, [r2, #0]
 800556e:	4628      	mov	r0, r5
 8005570:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005574:	f7ff bf66 	b.w	8005444 <__malloc_unlock>
 8005578:	42a3      	cmp	r3, r4
 800557a:	d908      	bls.n	800558e <_free_r+0x42>
 800557c:	6820      	ldr	r0, [r4, #0]
 800557e:	1821      	adds	r1, r4, r0
 8005580:	428b      	cmp	r3, r1
 8005582:	bf01      	itttt	eq
 8005584:	6819      	ldreq	r1, [r3, #0]
 8005586:	685b      	ldreq	r3, [r3, #4]
 8005588:	1809      	addeq	r1, r1, r0
 800558a:	6021      	streq	r1, [r4, #0]
 800558c:	e7ed      	b.n	800556a <_free_r+0x1e>
 800558e:	461a      	mov	r2, r3
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	b10b      	cbz	r3, 8005598 <_free_r+0x4c>
 8005594:	42a3      	cmp	r3, r4
 8005596:	d9fa      	bls.n	800558e <_free_r+0x42>
 8005598:	6811      	ldr	r1, [r2, #0]
 800559a:	1850      	adds	r0, r2, r1
 800559c:	42a0      	cmp	r0, r4
 800559e:	d10b      	bne.n	80055b8 <_free_r+0x6c>
 80055a0:	6820      	ldr	r0, [r4, #0]
 80055a2:	4401      	add	r1, r0
 80055a4:	1850      	adds	r0, r2, r1
 80055a6:	4283      	cmp	r3, r0
 80055a8:	6011      	str	r1, [r2, #0]
 80055aa:	d1e0      	bne.n	800556e <_free_r+0x22>
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	4408      	add	r0, r1
 80055b2:	6010      	str	r0, [r2, #0]
 80055b4:	6053      	str	r3, [r2, #4]
 80055b6:	e7da      	b.n	800556e <_free_r+0x22>
 80055b8:	d902      	bls.n	80055c0 <_free_r+0x74>
 80055ba:	230c      	movs	r3, #12
 80055bc:	602b      	str	r3, [r5, #0]
 80055be:	e7d6      	b.n	800556e <_free_r+0x22>
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	1821      	adds	r1, r4, r0
 80055c4:	428b      	cmp	r3, r1
 80055c6:	bf01      	itttt	eq
 80055c8:	6819      	ldreq	r1, [r3, #0]
 80055ca:	685b      	ldreq	r3, [r3, #4]
 80055cc:	1809      	addeq	r1, r1, r0
 80055ce:	6021      	streq	r1, [r4, #0]
 80055d0:	6063      	str	r3, [r4, #4]
 80055d2:	6054      	str	r4, [r2, #4]
 80055d4:	e7cb      	b.n	800556e <_free_r+0x22>
 80055d6:	bd38      	pop	{r3, r4, r5, pc}
 80055d8:	20000668 	.word	0x20000668

080055dc <__ssputs_r>:
 80055dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e0:	461f      	mov	r7, r3
 80055e2:	688e      	ldr	r6, [r1, #8]
 80055e4:	4682      	mov	sl, r0
 80055e6:	42be      	cmp	r6, r7
 80055e8:	460c      	mov	r4, r1
 80055ea:	4690      	mov	r8, r2
 80055ec:	680b      	ldr	r3, [r1, #0]
 80055ee:	d82c      	bhi.n	800564a <__ssputs_r+0x6e>
 80055f0:	898a      	ldrh	r2, [r1, #12]
 80055f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055f6:	d026      	beq.n	8005646 <__ssputs_r+0x6a>
 80055f8:	6965      	ldr	r5, [r4, #20]
 80055fa:	6909      	ldr	r1, [r1, #16]
 80055fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005600:	eba3 0901 	sub.w	r9, r3, r1
 8005604:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005608:	1c7b      	adds	r3, r7, #1
 800560a:	444b      	add	r3, r9
 800560c:	106d      	asrs	r5, r5, #1
 800560e:	429d      	cmp	r5, r3
 8005610:	bf38      	it	cc
 8005612:	461d      	movcc	r5, r3
 8005614:	0553      	lsls	r3, r2, #21
 8005616:	d527      	bpl.n	8005668 <__ssputs_r+0x8c>
 8005618:	4629      	mov	r1, r5
 800561a:	f7ff fe8d 	bl	8005338 <_malloc_r>
 800561e:	4606      	mov	r6, r0
 8005620:	b360      	cbz	r0, 800567c <__ssputs_r+0xa0>
 8005622:	464a      	mov	r2, r9
 8005624:	6921      	ldr	r1, [r4, #16]
 8005626:	f000 faed 	bl	8005c04 <memcpy>
 800562a:	89a3      	ldrh	r3, [r4, #12]
 800562c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	6126      	str	r6, [r4, #16]
 8005638:	444e      	add	r6, r9
 800563a:	6026      	str	r6, [r4, #0]
 800563c:	463e      	mov	r6, r7
 800563e:	6165      	str	r5, [r4, #20]
 8005640:	eba5 0509 	sub.w	r5, r5, r9
 8005644:	60a5      	str	r5, [r4, #8]
 8005646:	42be      	cmp	r6, r7
 8005648:	d900      	bls.n	800564c <__ssputs_r+0x70>
 800564a:	463e      	mov	r6, r7
 800564c:	4632      	mov	r2, r6
 800564e:	4641      	mov	r1, r8
 8005650:	6820      	ldr	r0, [r4, #0]
 8005652:	f000 faaf 	bl	8005bb4 <memmove>
 8005656:	2000      	movs	r0, #0
 8005658:	68a3      	ldr	r3, [r4, #8]
 800565a:	1b9b      	subs	r3, r3, r6
 800565c:	60a3      	str	r3, [r4, #8]
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	4433      	add	r3, r6
 8005662:	6023      	str	r3, [r4, #0]
 8005664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005668:	462a      	mov	r2, r5
 800566a:	f000 fad9 	bl	8005c20 <_realloc_r>
 800566e:	4606      	mov	r6, r0
 8005670:	2800      	cmp	r0, #0
 8005672:	d1e0      	bne.n	8005636 <__ssputs_r+0x5a>
 8005674:	4650      	mov	r0, sl
 8005676:	6921      	ldr	r1, [r4, #16]
 8005678:	f7ff ff68 	bl	800554c <_free_r>
 800567c:	230c      	movs	r3, #12
 800567e:	f8ca 3000 	str.w	r3, [sl]
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f04f 30ff 	mov.w	r0, #4294967295
 8005688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	e7e9      	b.n	8005664 <__ssputs_r+0x88>

08005690 <_svfiprintf_r>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	4698      	mov	r8, r3
 8005696:	898b      	ldrh	r3, [r1, #12]
 8005698:	4607      	mov	r7, r0
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	460d      	mov	r5, r1
 800569e:	4614      	mov	r4, r2
 80056a0:	b09d      	sub	sp, #116	; 0x74
 80056a2:	d50e      	bpl.n	80056c2 <_svfiprintf_r+0x32>
 80056a4:	690b      	ldr	r3, [r1, #16]
 80056a6:	b963      	cbnz	r3, 80056c2 <_svfiprintf_r+0x32>
 80056a8:	2140      	movs	r1, #64	; 0x40
 80056aa:	f7ff fe45 	bl	8005338 <_malloc_r>
 80056ae:	6028      	str	r0, [r5, #0]
 80056b0:	6128      	str	r0, [r5, #16]
 80056b2:	b920      	cbnz	r0, 80056be <_svfiprintf_r+0x2e>
 80056b4:	230c      	movs	r3, #12
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	e0d0      	b.n	8005860 <_svfiprintf_r+0x1d0>
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	616b      	str	r3, [r5, #20]
 80056c2:	2300      	movs	r3, #0
 80056c4:	9309      	str	r3, [sp, #36]	; 0x24
 80056c6:	2320      	movs	r3, #32
 80056c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056cc:	2330      	movs	r3, #48	; 0x30
 80056ce:	f04f 0901 	mov.w	r9, #1
 80056d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005878 <_svfiprintf_r+0x1e8>
 80056da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056de:	4623      	mov	r3, r4
 80056e0:	469a      	mov	sl, r3
 80056e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e6:	b10a      	cbz	r2, 80056ec <_svfiprintf_r+0x5c>
 80056e8:	2a25      	cmp	r2, #37	; 0x25
 80056ea:	d1f9      	bne.n	80056e0 <_svfiprintf_r+0x50>
 80056ec:	ebba 0b04 	subs.w	fp, sl, r4
 80056f0:	d00b      	beq.n	800570a <_svfiprintf_r+0x7a>
 80056f2:	465b      	mov	r3, fp
 80056f4:	4622      	mov	r2, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	4638      	mov	r0, r7
 80056fa:	f7ff ff6f 	bl	80055dc <__ssputs_r>
 80056fe:	3001      	adds	r0, #1
 8005700:	f000 80a9 	beq.w	8005856 <_svfiprintf_r+0x1c6>
 8005704:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005706:	445a      	add	r2, fp
 8005708:	9209      	str	r2, [sp, #36]	; 0x24
 800570a:	f89a 3000 	ldrb.w	r3, [sl]
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80a1 	beq.w	8005856 <_svfiprintf_r+0x1c6>
 8005714:	2300      	movs	r3, #0
 8005716:	f04f 32ff 	mov.w	r2, #4294967295
 800571a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800571e:	f10a 0a01 	add.w	sl, sl, #1
 8005722:	9304      	str	r3, [sp, #16]
 8005724:	9307      	str	r3, [sp, #28]
 8005726:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800572a:	931a      	str	r3, [sp, #104]	; 0x68
 800572c:	4654      	mov	r4, sl
 800572e:	2205      	movs	r2, #5
 8005730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005734:	4850      	ldr	r0, [pc, #320]	; (8005878 <_svfiprintf_r+0x1e8>)
 8005736:	f000 fa57 	bl	8005be8 <memchr>
 800573a:	9a04      	ldr	r2, [sp, #16]
 800573c:	b9d8      	cbnz	r0, 8005776 <_svfiprintf_r+0xe6>
 800573e:	06d0      	lsls	r0, r2, #27
 8005740:	bf44      	itt	mi
 8005742:	2320      	movmi	r3, #32
 8005744:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005748:	0711      	lsls	r1, r2, #28
 800574a:	bf44      	itt	mi
 800574c:	232b      	movmi	r3, #43	; 0x2b
 800574e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005752:	f89a 3000 	ldrb.w	r3, [sl]
 8005756:	2b2a      	cmp	r3, #42	; 0x2a
 8005758:	d015      	beq.n	8005786 <_svfiprintf_r+0xf6>
 800575a:	4654      	mov	r4, sl
 800575c:	2000      	movs	r0, #0
 800575e:	f04f 0c0a 	mov.w	ip, #10
 8005762:	9a07      	ldr	r2, [sp, #28]
 8005764:	4621      	mov	r1, r4
 8005766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800576a:	3b30      	subs	r3, #48	; 0x30
 800576c:	2b09      	cmp	r3, #9
 800576e:	d94d      	bls.n	800580c <_svfiprintf_r+0x17c>
 8005770:	b1b0      	cbz	r0, 80057a0 <_svfiprintf_r+0x110>
 8005772:	9207      	str	r2, [sp, #28]
 8005774:	e014      	b.n	80057a0 <_svfiprintf_r+0x110>
 8005776:	eba0 0308 	sub.w	r3, r0, r8
 800577a:	fa09 f303 	lsl.w	r3, r9, r3
 800577e:	4313      	orrs	r3, r2
 8005780:	46a2      	mov	sl, r4
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	e7d2      	b.n	800572c <_svfiprintf_r+0x9c>
 8005786:	9b03      	ldr	r3, [sp, #12]
 8005788:	1d19      	adds	r1, r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	9103      	str	r1, [sp, #12]
 800578e:	2b00      	cmp	r3, #0
 8005790:	bfbb      	ittet	lt
 8005792:	425b      	neglt	r3, r3
 8005794:	f042 0202 	orrlt.w	r2, r2, #2
 8005798:	9307      	strge	r3, [sp, #28]
 800579a:	9307      	strlt	r3, [sp, #28]
 800579c:	bfb8      	it	lt
 800579e:	9204      	strlt	r2, [sp, #16]
 80057a0:	7823      	ldrb	r3, [r4, #0]
 80057a2:	2b2e      	cmp	r3, #46	; 0x2e
 80057a4:	d10c      	bne.n	80057c0 <_svfiprintf_r+0x130>
 80057a6:	7863      	ldrb	r3, [r4, #1]
 80057a8:	2b2a      	cmp	r3, #42	; 0x2a
 80057aa:	d134      	bne.n	8005816 <_svfiprintf_r+0x186>
 80057ac:	9b03      	ldr	r3, [sp, #12]
 80057ae:	3402      	adds	r4, #2
 80057b0:	1d1a      	adds	r2, r3, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	9203      	str	r2, [sp, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bfb8      	it	lt
 80057ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80057be:	9305      	str	r3, [sp, #20]
 80057c0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800587c <_svfiprintf_r+0x1ec>
 80057c4:	2203      	movs	r2, #3
 80057c6:	4650      	mov	r0, sl
 80057c8:	7821      	ldrb	r1, [r4, #0]
 80057ca:	f000 fa0d 	bl	8005be8 <memchr>
 80057ce:	b138      	cbz	r0, 80057e0 <_svfiprintf_r+0x150>
 80057d0:	2240      	movs	r2, #64	; 0x40
 80057d2:	9b04      	ldr	r3, [sp, #16]
 80057d4:	eba0 000a 	sub.w	r0, r0, sl
 80057d8:	4082      	lsls	r2, r0
 80057da:	4313      	orrs	r3, r2
 80057dc:	3401      	adds	r4, #1
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e4:	2206      	movs	r2, #6
 80057e6:	4826      	ldr	r0, [pc, #152]	; (8005880 <_svfiprintf_r+0x1f0>)
 80057e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057ec:	f000 f9fc 	bl	8005be8 <memchr>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d038      	beq.n	8005866 <_svfiprintf_r+0x1d6>
 80057f4:	4b23      	ldr	r3, [pc, #140]	; (8005884 <_svfiprintf_r+0x1f4>)
 80057f6:	bb1b      	cbnz	r3, 8005840 <_svfiprintf_r+0x1b0>
 80057f8:	9b03      	ldr	r3, [sp, #12]
 80057fa:	3307      	adds	r3, #7
 80057fc:	f023 0307 	bic.w	r3, r3, #7
 8005800:	3308      	adds	r3, #8
 8005802:	9303      	str	r3, [sp, #12]
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	4433      	add	r3, r6
 8005808:	9309      	str	r3, [sp, #36]	; 0x24
 800580a:	e768      	b.n	80056de <_svfiprintf_r+0x4e>
 800580c:	460c      	mov	r4, r1
 800580e:	2001      	movs	r0, #1
 8005810:	fb0c 3202 	mla	r2, ip, r2, r3
 8005814:	e7a6      	b.n	8005764 <_svfiprintf_r+0xd4>
 8005816:	2300      	movs	r3, #0
 8005818:	f04f 0c0a 	mov.w	ip, #10
 800581c:	4619      	mov	r1, r3
 800581e:	3401      	adds	r4, #1
 8005820:	9305      	str	r3, [sp, #20]
 8005822:	4620      	mov	r0, r4
 8005824:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005828:	3a30      	subs	r2, #48	; 0x30
 800582a:	2a09      	cmp	r2, #9
 800582c:	d903      	bls.n	8005836 <_svfiprintf_r+0x1a6>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0c6      	beq.n	80057c0 <_svfiprintf_r+0x130>
 8005832:	9105      	str	r1, [sp, #20]
 8005834:	e7c4      	b.n	80057c0 <_svfiprintf_r+0x130>
 8005836:	4604      	mov	r4, r0
 8005838:	2301      	movs	r3, #1
 800583a:	fb0c 2101 	mla	r1, ip, r1, r2
 800583e:	e7f0      	b.n	8005822 <_svfiprintf_r+0x192>
 8005840:	ab03      	add	r3, sp, #12
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	462a      	mov	r2, r5
 8005846:	4638      	mov	r0, r7
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <_svfiprintf_r+0x1f8>)
 800584a:	a904      	add	r1, sp, #16
 800584c:	f3af 8000 	nop.w
 8005850:	1c42      	adds	r2, r0, #1
 8005852:	4606      	mov	r6, r0
 8005854:	d1d6      	bne.n	8005804 <_svfiprintf_r+0x174>
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	065b      	lsls	r3, r3, #25
 800585a:	f53f af2d 	bmi.w	80056b8 <_svfiprintf_r+0x28>
 800585e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005860:	b01d      	add	sp, #116	; 0x74
 8005862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005866:	ab03      	add	r3, sp, #12
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	462a      	mov	r2, r5
 800586c:	4638      	mov	r0, r7
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <_svfiprintf_r+0x1f8>)
 8005870:	a904      	add	r1, sp, #16
 8005872:	f000 f87d 	bl	8005970 <_printf_i>
 8005876:	e7eb      	b.n	8005850 <_svfiprintf_r+0x1c0>
 8005878:	0800643a 	.word	0x0800643a
 800587c:	08006440 	.word	0x08006440
 8005880:	08006444 	.word	0x08006444
 8005884:	00000000 	.word	0x00000000
 8005888:	080055dd 	.word	0x080055dd

0800588c <_printf_common>:
 800588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005890:	4616      	mov	r6, r2
 8005892:	4699      	mov	r9, r3
 8005894:	688a      	ldr	r2, [r1, #8]
 8005896:	690b      	ldr	r3, [r1, #16]
 8005898:	4607      	mov	r7, r0
 800589a:	4293      	cmp	r3, r2
 800589c:	bfb8      	it	lt
 800589e:	4613      	movlt	r3, r2
 80058a0:	6033      	str	r3, [r6, #0]
 80058a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058a6:	460c      	mov	r4, r1
 80058a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058ac:	b10a      	cbz	r2, 80058b2 <_printf_common+0x26>
 80058ae:	3301      	adds	r3, #1
 80058b0:	6033      	str	r3, [r6, #0]
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	0699      	lsls	r1, r3, #26
 80058b6:	bf42      	ittt	mi
 80058b8:	6833      	ldrmi	r3, [r6, #0]
 80058ba:	3302      	addmi	r3, #2
 80058bc:	6033      	strmi	r3, [r6, #0]
 80058be:	6825      	ldr	r5, [r4, #0]
 80058c0:	f015 0506 	ands.w	r5, r5, #6
 80058c4:	d106      	bne.n	80058d4 <_printf_common+0x48>
 80058c6:	f104 0a19 	add.w	sl, r4, #25
 80058ca:	68e3      	ldr	r3, [r4, #12]
 80058cc:	6832      	ldr	r2, [r6, #0]
 80058ce:	1a9b      	subs	r3, r3, r2
 80058d0:	42ab      	cmp	r3, r5
 80058d2:	dc2b      	bgt.n	800592c <_printf_common+0xa0>
 80058d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058d8:	1e13      	subs	r3, r2, #0
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	bf18      	it	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	0692      	lsls	r2, r2, #26
 80058e2:	d430      	bmi.n	8005946 <_printf_common+0xba>
 80058e4:	4649      	mov	r1, r9
 80058e6:	4638      	mov	r0, r7
 80058e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058ec:	47c0      	blx	r8
 80058ee:	3001      	adds	r0, #1
 80058f0:	d023      	beq.n	800593a <_printf_common+0xae>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	6922      	ldr	r2, [r4, #16]
 80058f6:	f003 0306 	and.w	r3, r3, #6
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	bf14      	ite	ne
 80058fe:	2500      	movne	r5, #0
 8005900:	6833      	ldreq	r3, [r6, #0]
 8005902:	f04f 0600 	mov.w	r6, #0
 8005906:	bf08      	it	eq
 8005908:	68e5      	ldreq	r5, [r4, #12]
 800590a:	f104 041a 	add.w	r4, r4, #26
 800590e:	bf08      	it	eq
 8005910:	1aed      	subeq	r5, r5, r3
 8005912:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005916:	bf08      	it	eq
 8005918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800591c:	4293      	cmp	r3, r2
 800591e:	bfc4      	itt	gt
 8005920:	1a9b      	subgt	r3, r3, r2
 8005922:	18ed      	addgt	r5, r5, r3
 8005924:	42b5      	cmp	r5, r6
 8005926:	d11a      	bne.n	800595e <_printf_common+0xd2>
 8005928:	2000      	movs	r0, #0
 800592a:	e008      	b.n	800593e <_printf_common+0xb2>
 800592c:	2301      	movs	r3, #1
 800592e:	4652      	mov	r2, sl
 8005930:	4649      	mov	r1, r9
 8005932:	4638      	mov	r0, r7
 8005934:	47c0      	blx	r8
 8005936:	3001      	adds	r0, #1
 8005938:	d103      	bne.n	8005942 <_printf_common+0xb6>
 800593a:	f04f 30ff 	mov.w	r0, #4294967295
 800593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005942:	3501      	adds	r5, #1
 8005944:	e7c1      	b.n	80058ca <_printf_common+0x3e>
 8005946:	2030      	movs	r0, #48	; 0x30
 8005948:	18e1      	adds	r1, r4, r3
 800594a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005954:	4422      	add	r2, r4
 8005956:	3302      	adds	r3, #2
 8005958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800595c:	e7c2      	b.n	80058e4 <_printf_common+0x58>
 800595e:	2301      	movs	r3, #1
 8005960:	4622      	mov	r2, r4
 8005962:	4649      	mov	r1, r9
 8005964:	4638      	mov	r0, r7
 8005966:	47c0      	blx	r8
 8005968:	3001      	adds	r0, #1
 800596a:	d0e6      	beq.n	800593a <_printf_common+0xae>
 800596c:	3601      	adds	r6, #1
 800596e:	e7d9      	b.n	8005924 <_printf_common+0x98>

08005970 <_printf_i>:
 8005970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	7e0f      	ldrb	r7, [r1, #24]
 8005976:	4691      	mov	r9, r2
 8005978:	2f78      	cmp	r7, #120	; 0x78
 800597a:	4680      	mov	r8, r0
 800597c:	460c      	mov	r4, r1
 800597e:	469a      	mov	sl, r3
 8005980:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005982:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005986:	d807      	bhi.n	8005998 <_printf_i+0x28>
 8005988:	2f62      	cmp	r7, #98	; 0x62
 800598a:	d80a      	bhi.n	80059a2 <_printf_i+0x32>
 800598c:	2f00      	cmp	r7, #0
 800598e:	f000 80d5 	beq.w	8005b3c <_printf_i+0x1cc>
 8005992:	2f58      	cmp	r7, #88	; 0x58
 8005994:	f000 80c1 	beq.w	8005b1a <_printf_i+0x1aa>
 8005998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800599c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80059a0:	e03a      	b.n	8005a18 <_printf_i+0xa8>
 80059a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059a6:	2b15      	cmp	r3, #21
 80059a8:	d8f6      	bhi.n	8005998 <_printf_i+0x28>
 80059aa:	a101      	add	r1, pc, #4	; (adr r1, 80059b0 <_printf_i+0x40>)
 80059ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005999 	.word	0x08005999
 80059bc:	08005999 	.word	0x08005999
 80059c0:	08005999 	.word	0x08005999
 80059c4:	08005999 	.word	0x08005999
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005999 	.word	0x08005999
 80059d0:	08005999 	.word	0x08005999
 80059d4:	08005999 	.word	0x08005999
 80059d8:	08005999 	.word	0x08005999
 80059dc:	08005b23 	.word	0x08005b23
 80059e0:	08005a49 	.word	0x08005a49
 80059e4:	08005add 	.word	0x08005add
 80059e8:	08005999 	.word	0x08005999
 80059ec:	08005999 	.word	0x08005999
 80059f0:	08005b45 	.word	0x08005b45
 80059f4:	08005999 	.word	0x08005999
 80059f8:	08005a49 	.word	0x08005a49
 80059fc:	08005999 	.word	0x08005999
 8005a00:	08005999 	.word	0x08005999
 8005a04:	08005ae5 	.word	0x08005ae5
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	1d1a      	adds	r2, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0a0      	b.n	8005b5e <_printf_i+0x1ee>
 8005a1c:	6820      	ldr	r0, [r4, #0]
 8005a1e:	682b      	ldr	r3, [r5, #0]
 8005a20:	0607      	lsls	r7, r0, #24
 8005a22:	f103 0104 	add.w	r1, r3, #4
 8005a26:	6029      	str	r1, [r5, #0]
 8005a28:	d501      	bpl.n	8005a2e <_printf_i+0xbe>
 8005a2a:	681e      	ldr	r6, [r3, #0]
 8005a2c:	e003      	b.n	8005a36 <_printf_i+0xc6>
 8005a2e:	0646      	lsls	r6, r0, #25
 8005a30:	d5fb      	bpl.n	8005a2a <_printf_i+0xba>
 8005a32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a36:	2e00      	cmp	r6, #0
 8005a38:	da03      	bge.n	8005a42 <_printf_i+0xd2>
 8005a3a:	232d      	movs	r3, #45	; 0x2d
 8005a3c:	4276      	negs	r6, r6
 8005a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a42:	230a      	movs	r3, #10
 8005a44:	4859      	ldr	r0, [pc, #356]	; (8005bac <_printf_i+0x23c>)
 8005a46:	e012      	b.n	8005a6e <_printf_i+0xfe>
 8005a48:	682b      	ldr	r3, [r5, #0]
 8005a4a:	6820      	ldr	r0, [r4, #0]
 8005a4c:	1d19      	adds	r1, r3, #4
 8005a4e:	6029      	str	r1, [r5, #0]
 8005a50:	0605      	lsls	r5, r0, #24
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0xe8>
 8005a54:	681e      	ldr	r6, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0xee>
 8005a58:	0641      	lsls	r1, r0, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0xe4>
 8005a5c:	881e      	ldrh	r6, [r3, #0]
 8005a5e:	2f6f      	cmp	r7, #111	; 0x6f
 8005a60:	bf0c      	ite	eq
 8005a62:	2308      	moveq	r3, #8
 8005a64:	230a      	movne	r3, #10
 8005a66:	4851      	ldr	r0, [pc, #324]	; (8005bac <_printf_i+0x23c>)
 8005a68:	2100      	movs	r1, #0
 8005a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a6e:	6865      	ldr	r5, [r4, #4]
 8005a70:	2d00      	cmp	r5, #0
 8005a72:	bfa8      	it	ge
 8005a74:	6821      	ldrge	r1, [r4, #0]
 8005a76:	60a5      	str	r5, [r4, #8]
 8005a78:	bfa4      	itt	ge
 8005a7a:	f021 0104 	bicge.w	r1, r1, #4
 8005a7e:	6021      	strge	r1, [r4, #0]
 8005a80:	b90e      	cbnz	r6, 8005a86 <_printf_i+0x116>
 8005a82:	2d00      	cmp	r5, #0
 8005a84:	d04b      	beq.n	8005b1e <_printf_i+0x1ae>
 8005a86:	4615      	mov	r5, r2
 8005a88:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a8c:	fb03 6711 	mls	r7, r3, r1, r6
 8005a90:	5dc7      	ldrb	r7, [r0, r7]
 8005a92:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a96:	4637      	mov	r7, r6
 8005a98:	42bb      	cmp	r3, r7
 8005a9a:	460e      	mov	r6, r1
 8005a9c:	d9f4      	bls.n	8005a88 <_printf_i+0x118>
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d10b      	bne.n	8005aba <_printf_i+0x14a>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	07de      	lsls	r6, r3, #31
 8005aa6:	d508      	bpl.n	8005aba <_printf_i+0x14a>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	6861      	ldr	r1, [r4, #4]
 8005aac:	4299      	cmp	r1, r3
 8005aae:	bfde      	ittt	le
 8005ab0:	2330      	movle	r3, #48	; 0x30
 8005ab2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ab6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005aba:	1b52      	subs	r2, r2, r5
 8005abc:	6122      	str	r2, [r4, #16]
 8005abe:	464b      	mov	r3, r9
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f8cd a000 	str.w	sl, [sp]
 8005ac8:	aa03      	add	r2, sp, #12
 8005aca:	f7ff fedf 	bl	800588c <_printf_common>
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d14a      	bne.n	8005b68 <_printf_i+0x1f8>
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	b004      	add	sp, #16
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	f043 0320 	orr.w	r3, r3, #32
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	2778      	movs	r7, #120	; 0x78
 8005ae6:	4832      	ldr	r0, [pc, #200]	; (8005bb0 <_printf_i+0x240>)
 8005ae8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	6829      	ldr	r1, [r5, #0]
 8005af0:	061f      	lsls	r7, r3, #24
 8005af2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005af6:	d402      	bmi.n	8005afe <_printf_i+0x18e>
 8005af8:	065f      	lsls	r7, r3, #25
 8005afa:	bf48      	it	mi
 8005afc:	b2b6      	uxthmi	r6, r6
 8005afe:	07df      	lsls	r7, r3, #31
 8005b00:	bf48      	it	mi
 8005b02:	f043 0320 	orrmi.w	r3, r3, #32
 8005b06:	6029      	str	r1, [r5, #0]
 8005b08:	bf48      	it	mi
 8005b0a:	6023      	strmi	r3, [r4, #0]
 8005b0c:	b91e      	cbnz	r6, 8005b16 <_printf_i+0x1a6>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	f023 0320 	bic.w	r3, r3, #32
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	2310      	movs	r3, #16
 8005b18:	e7a6      	b.n	8005a68 <_printf_i+0xf8>
 8005b1a:	4824      	ldr	r0, [pc, #144]	; (8005bac <_printf_i+0x23c>)
 8005b1c:	e7e4      	b.n	8005ae8 <_printf_i+0x178>
 8005b1e:	4615      	mov	r5, r2
 8005b20:	e7bd      	b.n	8005a9e <_printf_i+0x12e>
 8005b22:	682b      	ldr	r3, [r5, #0]
 8005b24:	6826      	ldr	r6, [r4, #0]
 8005b26:	1d18      	adds	r0, r3, #4
 8005b28:	6961      	ldr	r1, [r4, #20]
 8005b2a:	6028      	str	r0, [r5, #0]
 8005b2c:	0635      	lsls	r5, r6, #24
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	d501      	bpl.n	8005b36 <_printf_i+0x1c6>
 8005b32:	6019      	str	r1, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <_printf_i+0x1cc>
 8005b36:	0670      	lsls	r0, r6, #25
 8005b38:	d5fb      	bpl.n	8005b32 <_printf_i+0x1c2>
 8005b3a:	8019      	strh	r1, [r3, #0]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4615      	mov	r5, r2
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	e7bc      	b.n	8005abe <_printf_i+0x14e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	2100      	movs	r1, #0
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	602a      	str	r2, [r5, #0]
 8005b4c:	681d      	ldr	r5, [r3, #0]
 8005b4e:	6862      	ldr	r2, [r4, #4]
 8005b50:	4628      	mov	r0, r5
 8005b52:	f000 f849 	bl	8005be8 <memchr>
 8005b56:	b108      	cbz	r0, 8005b5c <_printf_i+0x1ec>
 8005b58:	1b40      	subs	r0, r0, r5
 8005b5a:	6060      	str	r0, [r4, #4]
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	6123      	str	r3, [r4, #16]
 8005b60:	2300      	movs	r3, #0
 8005b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b66:	e7aa      	b.n	8005abe <_printf_i+0x14e>
 8005b68:	462a      	mov	r2, r5
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	47d0      	blx	sl
 8005b72:	3001      	adds	r0, #1
 8005b74:	d0ad      	beq.n	8005ad2 <_printf_i+0x162>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	079b      	lsls	r3, r3, #30
 8005b7a:	d413      	bmi.n	8005ba4 <_printf_i+0x234>
 8005b7c:	68e0      	ldr	r0, [r4, #12]
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	4298      	cmp	r0, r3
 8005b82:	bfb8      	it	lt
 8005b84:	4618      	movlt	r0, r3
 8005b86:	e7a6      	b.n	8005ad6 <_printf_i+0x166>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4640      	mov	r0, r8
 8005b90:	47d0      	blx	sl
 8005b92:	3001      	adds	r0, #1
 8005b94:	d09d      	beq.n	8005ad2 <_printf_i+0x162>
 8005b96:	3501      	adds	r5, #1
 8005b98:	68e3      	ldr	r3, [r4, #12]
 8005b9a:	9903      	ldr	r1, [sp, #12]
 8005b9c:	1a5b      	subs	r3, r3, r1
 8005b9e:	42ab      	cmp	r3, r5
 8005ba0:	dcf2      	bgt.n	8005b88 <_printf_i+0x218>
 8005ba2:	e7eb      	b.n	8005b7c <_printf_i+0x20c>
 8005ba4:	2500      	movs	r5, #0
 8005ba6:	f104 0619 	add.w	r6, r4, #25
 8005baa:	e7f5      	b.n	8005b98 <_printf_i+0x228>
 8005bac:	0800644b 	.word	0x0800644b
 8005bb0:	0800645c 	.word	0x0800645c

08005bb4 <memmove>:
 8005bb4:	4288      	cmp	r0, r1
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	eb01 0402 	add.w	r4, r1, r2
 8005bbc:	d902      	bls.n	8005bc4 <memmove+0x10>
 8005bbe:	4284      	cmp	r4, r0
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	d807      	bhi.n	8005bd4 <memmove+0x20>
 8005bc4:	1e43      	subs	r3, r0, #1
 8005bc6:	42a1      	cmp	r1, r4
 8005bc8:	d008      	beq.n	8005bdc <memmove+0x28>
 8005bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bd2:	e7f8      	b.n	8005bc6 <memmove+0x12>
 8005bd4:	4601      	mov	r1, r0
 8005bd6:	4402      	add	r2, r0
 8005bd8:	428a      	cmp	r2, r1
 8005bda:	d100      	bne.n	8005bde <memmove+0x2a>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005be6:	e7f7      	b.n	8005bd8 <memmove+0x24>

08005be8 <memchr>:
 8005be8:	4603      	mov	r3, r0
 8005bea:	b510      	push	{r4, lr}
 8005bec:	b2c9      	uxtb	r1, r1
 8005bee:	4402      	add	r2, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	d101      	bne.n	8005bfa <memchr+0x12>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e003      	b.n	8005c02 <memchr+0x1a>
 8005bfa:	7804      	ldrb	r4, [r0, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	428c      	cmp	r4, r1
 8005c00:	d1f6      	bne.n	8005bf0 <memchr+0x8>
 8005c02:	bd10      	pop	{r4, pc}

08005c04 <memcpy>:
 8005c04:	440a      	add	r2, r1
 8005c06:	4291      	cmp	r1, r2
 8005c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c0c:	d100      	bne.n	8005c10 <memcpy+0xc>
 8005c0e:	4770      	bx	lr
 8005c10:	b510      	push	{r4, lr}
 8005c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c1c:	d1f9      	bne.n	8005c12 <memcpy+0xe>
 8005c1e:	bd10      	pop	{r4, pc}

08005c20 <_realloc_r>:
 8005c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c24:	4680      	mov	r8, r0
 8005c26:	4614      	mov	r4, r2
 8005c28:	460e      	mov	r6, r1
 8005c2a:	b921      	cbnz	r1, 8005c36 <_realloc_r+0x16>
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c32:	f7ff bb81 	b.w	8005338 <_malloc_r>
 8005c36:	b92a      	cbnz	r2, 8005c44 <_realloc_r+0x24>
 8005c38:	f7ff fc88 	bl	800554c <_free_r>
 8005c3c:	4625      	mov	r5, r4
 8005c3e:	4628      	mov	r0, r5
 8005c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c44:	f000 f81b 	bl	8005c7e <_malloc_usable_size_r>
 8005c48:	4284      	cmp	r4, r0
 8005c4a:	4607      	mov	r7, r0
 8005c4c:	d802      	bhi.n	8005c54 <_realloc_r+0x34>
 8005c4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c52:	d812      	bhi.n	8005c7a <_realloc_r+0x5a>
 8005c54:	4621      	mov	r1, r4
 8005c56:	4640      	mov	r0, r8
 8005c58:	f7ff fb6e 	bl	8005338 <_malloc_r>
 8005c5c:	4605      	mov	r5, r0
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	d0ed      	beq.n	8005c3e <_realloc_r+0x1e>
 8005c62:	42bc      	cmp	r4, r7
 8005c64:	4622      	mov	r2, r4
 8005c66:	4631      	mov	r1, r6
 8005c68:	bf28      	it	cs
 8005c6a:	463a      	movcs	r2, r7
 8005c6c:	f7ff ffca 	bl	8005c04 <memcpy>
 8005c70:	4631      	mov	r1, r6
 8005c72:	4640      	mov	r0, r8
 8005c74:	f7ff fc6a 	bl	800554c <_free_r>
 8005c78:	e7e1      	b.n	8005c3e <_realloc_r+0x1e>
 8005c7a:	4635      	mov	r5, r6
 8005c7c:	e7df      	b.n	8005c3e <_realloc_r+0x1e>

08005c7e <_malloc_usable_size_r>:
 8005c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c82:	1f18      	subs	r0, r3, #4
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bfbc      	itt	lt
 8005c88:	580b      	ldrlt	r3, [r1, r0]
 8005c8a:	18c0      	addlt	r0, r0, r3
 8005c8c:	4770      	bx	lr
	...

08005c90 <_init>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr

08005c9c <_fini>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr
