
cli_with_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a58  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08004b68  08004b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec8  08004ec8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08004ec8  08004ec8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ec8  08004ec8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ecc  08004ecc  00014ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004ed0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000060  08004f30  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08004f30  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009533  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fe4  00000000  00000000  000295ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000664  00000000  00000000  0002be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018534  00000000  00000000  0002c4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d098  00000000  00000000  000449f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000873a8  00000000  00000000  00051a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002604  00000000  00000000  000d8e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000db43c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b50 	.word	0x08004b50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08004b50 	.word	0x08004b50

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__aeabi_d2uiz>:
 800072c:	004a      	lsls	r2, r1, #1
 800072e:	d211      	bcs.n	8000754 <__aeabi_d2uiz+0x28>
 8000730:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000734:	d211      	bcs.n	800075a <__aeabi_d2uiz+0x2e>
 8000736:	d50d      	bpl.n	8000754 <__aeabi_d2uiz+0x28>
 8000738:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800073c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000740:	d40e      	bmi.n	8000760 <__aeabi_d2uiz+0x34>
 8000742:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800074a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074e:	fa23 f002 	lsr.w	r0, r3, r2
 8000752:	4770      	bx	lr
 8000754:	f04f 0000 	mov.w	r0, #0
 8000758:	4770      	bx	lr
 800075a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075e:	d102      	bne.n	8000766 <__aeabi_d2uiz+0x3a>
 8000760:	f04f 30ff 	mov.w	r0, #4294967295
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_ADC1_Init+0x74>)
 800077e:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <MX_ADC1_Init+0x78>)
 8000780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000782:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_ADC1_Init+0x74>)
 800078a:	2201      	movs	r2, #1
 800078c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_ADC1_Init+0x74>)
 8000796:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800079a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079c:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_ADC1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007aa:	f001 fc33 	bl	8002014 <HAL_ADC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80007b4:	f001 f9db 	bl	8001b6e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_ADC1_Init+0x74>)
 80007ca:	f001 fdb5 	bl	8002338 <HAL_ADC_ConfigChannel>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007d4:	f001 f9cb 	bl	8001b6e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	2000007c 	.word	0x2000007c
 80007e4:	40012400 	.word	0x40012400

080007e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_ADC_MspInit+0x6c>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d121      	bne.n	800084c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800080e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <HAL_ADC_MspInit+0x70>)
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6193      	str	r3, [r2, #24]
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <HAL_ADC_MspInit+0x70>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800083c:	2303      	movs	r3, #3
 800083e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_ADC_MspInit+0x74>)
 8000848:	f002 fa06 	bl	8002c58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3720      	adds	r7, #32
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40012400 	.word	0x40012400
 8000858:	40021000 	.word	0x40021000
 800085c:	40010800 	.word	0x40010800

08000860 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_DMA_Init+0x38>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <MX_DMA_Init+0x38>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_DMA_Init+0x38>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200f      	movs	r0, #15
 8000884:	f001 ffc3 	bl	800280e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000888:	200f      	movs	r0, #15
 800088a:	f001 ffdc 	bl	8002846 <HAL_NVIC_EnableIRQ>

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0308 	add.w	r3, r7, #8
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_GPIO_Init+0x78>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_GPIO_Init+0x78>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_GPIO_Init+0x78>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_GPIO_Init+0x78>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a11      	ldr	r2, [pc, #68]	; (8000914 <MX_GPIO_Init+0x78>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_GPIO_Init+0x78>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 80008e6:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_GPIO_Init+0x7c>)
 80008e8:	f002 fb3a 	bl	8002f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 80008ec:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80008f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2302      	movs	r3, #2
 80008fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4619      	mov	r1, r3
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0x7c>)
 8000906:	f002 f9a7 	bl	8002c58 <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <HAL_UART_RxCpltCallback>:
bool is_same_word(uint8_t *buf,uint8_t *compare,uint8_t start_compare);
keytype is_command(uint8_t *buf,uint8_t i);
void cli_start(uint8_t i,keytype key_input);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_UART_RxCpltCallback+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d104      	bne.n	800093a <HAL_UART_RxCpltCallback+0x1e>
		HAL_UART_Receive_DMA(&huart1,&command_tx[0],5);
 8000930:	2205      	movs	r2, #5
 8000932:	4905      	ldr	r1, [pc, #20]	; (8000948 <HAL_UART_RxCpltCallback+0x2c>)
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <HAL_UART_RxCpltCallback+0x28>)
 8000936:	f003 f8de 	bl	8003af6 <HAL_UART_Receive_DMA>
	}
	UNUSED(huart);
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000164 	.word	0x20000164
 8000948:	200000ac 	.word	0x200000ac

0800094c <uart_send>:

void uart_send(uint8_t uart_num, char *fmt,...){
 800094c:	b40e      	push	{r1, r2, r3}
 800094e:	b580      	push	{r7, lr}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 8000958:	f107 0320 	add.w	r3, r7, #32
 800095c:	60fb      	str	r3, [r7, #12]
	vsnprintf((char *)send_buffer,send_buffer_length,fmt,arg);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	69fa      	ldr	r2, [r7, #28]
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	4810      	ldr	r0, [pc, #64]	; (80009a8 <uart_send+0x5c>)
 8000966:	f003 fc53 	bl	8004210 <vsniprintf>
	if(uart_num==1){
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d106      	bne.n	800097e <uart_send+0x32>
		HAL_UART_Transmit(&huart1,send_buffer,send_buffer_length,100);
 8000970:	2364      	movs	r3, #100	; 0x64
 8000972:	2240      	movs	r2, #64	; 0x40
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <uart_send+0x5c>)
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <uart_send+0x60>)
 8000978:	f003 f83a 	bl	80039f0 <HAL_UART_Transmit>
 800097c:	e008      	b.n	8000990 <uart_send+0x44>
	}
	else if(uart_num==2){
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d105      	bne.n	8000990 <uart_send+0x44>
		HAL_UART_Transmit(&huart2,send_buffer,send_buffer_length,100);
 8000984:	2364      	movs	r3, #100	; 0x64
 8000986:	2240      	movs	r2, #64	; 0x40
 8000988:	4907      	ldr	r1, [pc, #28]	; (80009a8 <uart_send+0x5c>)
 800098a:	4809      	ldr	r0, [pc, #36]	; (80009b0 <uart_send+0x64>)
 800098c:	f003 f830 	bl	80039f0 <HAL_UART_Transmit>
	}
	memset(send_buffer,0,send_buffer_length);
 8000990:	2240      	movs	r2, #64	; 0x40
 8000992:	2100      	movs	r1, #0
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <uart_send+0x5c>)
 8000996:	f003 fc49 	bl	800422c <memset>
	va_end(arg);
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009a4:	b003      	add	sp, #12
 80009a6:	4770      	bx	lr
 80009a8:	200000b4 	.word	0x200000b4
 80009ac:	20000164 	.word	0x20000164
 80009b0:	200001ac 	.word	0x200001ac

080009b4 <is_command>:
keytype is_command(uint8_t *buf,uint8_t i){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
	keytype type_key = KEY_NONE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	73fb      	strb	r3, [r7, #15]
	switch (buf[i]){
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b7f      	cmp	r3, #127	; 0x7f
 80009ce:	d061      	beq.n	8000a94 <is_command+0xe0>
 80009d0:	2b7f      	cmp	r3, #127	; 0x7f
 80009d2:	dc68      	bgt.n	8000aa6 <is_command+0xf2>
 80009d4:	2b1b      	cmp	r3, #27
 80009d6:	d006      	beq.n	80009e6 <is_command+0x32>
 80009d8:	2b1b      	cmp	r3, #27
 80009da:	dc64      	bgt.n	8000aa6 <is_command+0xf2>
 80009dc:	2b08      	cmp	r3, #8
 80009de:	d05c      	beq.n	8000a9a <is_command+0xe6>
 80009e0:	2b0d      	cmp	r3, #13
 80009e2:	d05d      	beq.n	8000aa0 <is_command+0xec>
			break;
		case 0x0d:
			type_key = ENTER;
			break;
		default:
			break;
 80009e4:	e05f      	b.n	8000aa6 <is_command+0xf2>
			HAL_Delay(1);
 80009e6:	2001      	movs	r0, #1
 80009e8:	f001 faf0 	bl	8001fcc <HAL_Delay>
			switch(buf[(i+2)%5]){
 80009ec:	78fb      	ldrb	r3, [r7, #3]
 80009ee:	1c9a      	adds	r2, r3, #2
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <is_command+0x11c>)
 80009f2:	fb83 1302 	smull	r1, r3, r3, r2
 80009f6:	1059      	asrs	r1, r3, #1
 80009f8:	17d3      	asrs	r3, r2, #31
 80009fa:	1ac9      	subs	r1, r1, r3
 80009fc:	460b      	mov	r3, r1
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	1ad1      	subs	r1, r2, r3
 8000a04:	460a      	mov	r2, r1
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	3b31      	subs	r3, #49	; 0x31
 8000a0e:	2b13      	cmp	r3, #19
 8000a10:	d83c      	bhi.n	8000a8c <is_command+0xd8>
 8000a12:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <is_command+0x64>)
 8000a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a18:	08000a87 	.word	0x08000a87
 8000a1c:	08000a8d 	.word	0x08000a8d
 8000a20:	08000a8d 	.word	0x08000a8d
 8000a24:	08000a81 	.word	0x08000a81
 8000a28:	08000a8d 	.word	0x08000a8d
 8000a2c:	08000a8d 	.word	0x08000a8d
 8000a30:	08000a8d 	.word	0x08000a8d
 8000a34:	08000a8d 	.word	0x08000a8d
 8000a38:	08000a8d 	.word	0x08000a8d
 8000a3c:	08000a8d 	.word	0x08000a8d
 8000a40:	08000a8d 	.word	0x08000a8d
 8000a44:	08000a8d 	.word	0x08000a8d
 8000a48:	08000a8d 	.word	0x08000a8d
 8000a4c:	08000a8d 	.word	0x08000a8d
 8000a50:	08000a8d 	.word	0x08000a8d
 8000a54:	08000a8d 	.word	0x08000a8d
 8000a58:	08000a7b 	.word	0x08000a7b
 8000a5c:	08000a75 	.word	0x08000a75
 8000a60:	08000a6f 	.word	0x08000a6f
 8000a64:	08000a69 	.word	0x08000a69
					type_key = LEFT;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	73fb      	strb	r3, [r7, #15]
					break;
 8000a6c:	e011      	b.n	8000a92 <is_command+0xde>
					type_key = RIGHT;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	73fb      	strb	r3, [r7, #15]
					break;
 8000a72:	e00e      	b.n	8000a92 <is_command+0xde>
					type_key = DOWN;
 8000a74:	2302      	movs	r3, #2
 8000a76:	73fb      	strb	r3, [r7, #15]
					break;
 8000a78:	e00b      	b.n	8000a92 <is_command+0xde>
					type_key = UP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
					break;
 8000a7e:	e008      	b.n	8000a92 <is_command+0xde>
					type_key = END;
 8000a80:	2305      	movs	r3, #5
 8000a82:	73fb      	strb	r3, [r7, #15]
					break;
 8000a84:	e005      	b.n	8000a92 <is_command+0xde>
					type_key = HOME;
 8000a86:	2306      	movs	r3, #6
 8000a88:	73fb      	strb	r3, [r7, #15]
					break;
 8000a8a:	e002      	b.n	8000a92 <is_command+0xde>
					type_key = KEY_ERROR;
 8000a8c:	230b      	movs	r3, #11
 8000a8e:	73fb      	strb	r3, [r7, #15]
					break;
 8000a90:	bf00      	nop
			break;
 8000a92:	e009      	b.n	8000aa8 <is_command+0xf4>
			type_key = DEL;
 8000a94:	2307      	movs	r3, #7
 8000a96:	73fb      	strb	r3, [r7, #15]
			break;
 8000a98:	e006      	b.n	8000aa8 <is_command+0xf4>
			type_key = BACKSPACE;
 8000a9a:	2308      	movs	r3, #8
 8000a9c:	73fb      	strb	r3, [r7, #15]
			break;
 8000a9e:	e003      	b.n	8000aa8 <is_command+0xf4>
			type_key = ENTER;
 8000aa0:	2309      	movs	r3, #9
 8000aa2:	73fb      	strb	r3, [r7, #15]
			break;
 8000aa4:	e000      	b.n	8000aa8 <is_command+0xf4>
			break;
 8000aa6:	bf00      	nop
	}
	if(buf[i]>=32 && buf[i]<=126){
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b1f      	cmp	r3, #31
 8000ab2:	d907      	bls.n	8000ac4 <is_command+0x110>
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b7e      	cmp	r3, #126	; 0x7e
 8000abe:	d801      	bhi.n	8000ac4 <is_command+0x110>
		type_key=IS_WORD;
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	73fb      	strb	r3, [r7, #15]
	}
	return type_key;
 8000ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	66666667 	.word	0x66666667

08000ad4 <is_same_word>:
/*
 * compare uint8_t buf and compare if they are completely same character return
 * true. else they are not same character return false
*/
bool is_same_word(uint8_t *buf,uint8_t *compare,uint8_t start_compare){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	71fb      	strb	r3, [r7, #7]
    bool ret=false;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	75fb      	strb	r3, [r7, #23]
    uint8_t end_compare=strlen((const char *)compare);
 8000ae6:	68b8      	ldr	r0, [r7, #8]
 8000ae8:	f7ff fb32 	bl	8000150 <strlen>
 8000aec:	4603      	mov	r3, r0
 8000aee:	757b      	strb	r3, [r7, #21]
    for (uint8_t i=start_compare;i<start_compare+end_compare;i++){
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	75bb      	strb	r3, [r7, #22]
 8000af4:	e02e      	b.n	8000b54 <is_same_word+0x80>
        if(compare[i-start_compare]==0){
 8000af6:	7dba      	ldrb	r2, [r7, #22]
 8000af8:	79fb      	ldrb	r3, [r7, #7]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	4413      	add	r3, r2
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d102      	bne.n	8000b0e <is_same_word+0x3a>
            ret=false;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	75fb      	strb	r3, [r7, #23]
            break;
 8000b0c:	e028      	b.n	8000b60 <is_same_word+0x8c>
        }
        if (buf[i]==compare[i-start_compare]){
 8000b0e:	7dbb      	ldrb	r3, [r7, #22]
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	7db9      	ldrb	r1, [r7, #22]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	1acb      	subs	r3, r1, r3
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	440b      	add	r3, r1
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d102      	bne.n	8000b2e <is_same_word+0x5a>
            ret=true;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	75fb      	strb	r3, [r7, #23]
 8000b2c:	e00f      	b.n	8000b4e <is_same_word+0x7a>
        }
        else if(buf[i]!=compare[i-start_compare]){
 8000b2e:	7dbb      	ldrb	r3, [r7, #22]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	4413      	add	r3, r2
 8000b34:	781a      	ldrb	r2, [r3, #0]
 8000b36:	7db9      	ldrb	r1, [r7, #22]
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	1acb      	subs	r3, r1, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	440b      	add	r3, r1
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d002      	beq.n	8000b4e <is_same_word+0x7a>
            ret=false;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	75fb      	strb	r3, [r7, #23]
            break;
 8000b4c:	e008      	b.n	8000b60 <is_same_word+0x8c>
    for (uint8_t i=start_compare;i<start_compare+end_compare;i++){
 8000b4e:	7dbb      	ldrb	r3, [r7, #22]
 8000b50:	3301      	adds	r3, #1
 8000b52:	75bb      	strb	r3, [r7, #22]
 8000b54:	7dba      	ldrb	r2, [r7, #22]
 8000b56:	79f9      	ldrb	r1, [r7, #7]
 8000b58:	7d7b      	ldrb	r3, [r7, #21]
 8000b5a:	440b      	add	r3, r1
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbca      	blt.n	8000af6 <is_same_word+0x22>
        }
    }
    return ret;
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	0000      	movs	r0, r0
 8000b6c:	0000      	movs	r0, r0
	...

08000b70 <command_input>:

void command_input(uint8_t *buf){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	bool existing_command = false;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	75fb      	strb	r3, [r7, #23]
	uint8_t word_len=0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	743b      	strb	r3, [r7, #16]
	if(is_same_word(buf,(uint8_t *)"help",0)){
 8000b80:	2200      	movs	r2, #0
 8000b82:	49b5      	ldr	r1, [pc, #724]	; (8000e58 <command_input+0x2e8>)
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ffa5 	bl	8000ad4 <is_same_word>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d032      	beq.n	8000bf6 <command_input+0x86>
		uart_send(1,"\n---------------------------------------------------");
 8000b90:	49b2      	ldr	r1, [pc, #712]	; (8000e5c <command_input+0x2ec>)
 8000b92:	2001      	movs	r0, #1
 8000b94:	f7ff feda 	bl	800094c <uart_send>
		uart_send(1,"----------------\n\n");
 8000b98:	49b1      	ldr	r1, [pc, #708]	; (8000e60 <command_input+0x2f0>)
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff fed6 	bl	800094c <uart_send>
		uart_send(1,"\t\t\tcommand_list\n\n");
 8000ba0:	49b0      	ldr	r1, [pc, #704]	; (8000e64 <command_input+0x2f4>)
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	f7ff fed2 	bl	800094c <uart_send>
		uart_send(1,"1. printf [string] : print string at terminal.\n");
 8000ba8:	49af      	ldr	r1, [pc, #700]	; (8000e68 <command_input+0x2f8>)
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff fece 	bl	800094c <uart_send>
		uart_send(1,"note) ledx : x can be 1, 2 value.\n");
 8000bb0:	49ae      	ldr	r1, [pc, #696]	; (8000e6c <command_input+0x2fc>)
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff feca 	bl	800094c <uart_send>
		uart_send(1,"2. ledx [on/off] : on/off led\n");
 8000bb8:	49ad      	ldr	r1, [pc, #692]	; (8000e70 <command_input+0x300>)
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fec6 	bl	800094c <uart_send>
		uart_send(1,"3. ledx toggle [number] : toggle led with user set number\n");
 8000bc0:	49ac      	ldr	r1, [pc, #688]	; (8000e74 <command_input+0x304>)
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fec2 	bl	800094c <uart_send>
		uart_send(1,"4. adc read : read adc voltage val, where reference voltage,");
 8000bc8:	49ab      	ldr	r1, [pc, #684]	; (8000e78 <command_input+0x308>)
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff febe 	bl	800094c <uart_send>
		uart_send(1,"is 3.3V.\n");
 8000bd0:	49aa      	ldr	r1, [pc, #680]	; (8000e7c <command_input+0x30c>)
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff feba 	bl	800094c <uart_send>
		uart_send(1,"5. clear : clear terminal.\n");
 8000bd8:	49a9      	ldr	r1, [pc, #676]	; (8000e80 <command_input+0x310>)
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f7ff feb6 	bl	800094c <uart_send>
		uart_send(1,"\n---------------------------------------------------");
 8000be0:	499e      	ldr	r1, [pc, #632]	; (8000e5c <command_input+0x2ec>)
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff feb2 	bl	800094c <uart_send>
		uart_send(1,"----------------\n\n");
 8000be8:	499d      	ldr	r1, [pc, #628]	; (8000e60 <command_input+0x2f0>)
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff feae 	bl	800094c <uart_send>
		existing_command = true;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	75fb      	strb	r3, [r7, #23]
 8000bf4:	e1d1      	b.n	8000f9a <command_input+0x42a>
	}
	else if(is_same_word(buf,(uint8_t *)"printf",0)){
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	49a2      	ldr	r1, [pc, #648]	; (8000e84 <command_input+0x314>)
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f7ff ff6a 	bl	8000ad4 <is_same_word>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00c      	beq.n	8000c20 <command_input+0xb0>
		word_len=strlen("printf")+1;
 8000c06:	2307      	movs	r3, #7
 8000c08:	743b      	strb	r3, [r7, #16]
		uart_send(1,"\n%s",buf+word_len);
 8000c0a:	7c3b      	ldrb	r3, [r7, #16]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4413      	add	r3, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	499d      	ldr	r1, [pc, #628]	; (8000e88 <command_input+0x318>)
 8000c14:	2001      	movs	r0, #1
 8000c16:	f7ff fe99 	bl	800094c <uart_send>
		existing_command = true;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
 8000c1e:	e1bc      	b.n	8000f9a <command_input+0x42a>
	}
	else if(is_same_word(buf,(uint8_t *)"clear",0)){
 8000c20:	2200      	movs	r2, #0
 8000c22:	499a      	ldr	r1, [pc, #616]	; (8000e8c <command_input+0x31c>)
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff55 	bl	8000ad4 <is_same_word>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <command_input+0xce>
		uart_send(1,"\x1B[2J");
 8000c30:	4997      	ldr	r1, [pc, #604]	; (8000e90 <command_input+0x320>)
 8000c32:	2001      	movs	r0, #1
 8000c34:	f7ff fe8a 	bl	800094c <uart_send>
		existing_command = true;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	75fb      	strb	r3, [r7, #23]
 8000c3c:	e1ad      	b.n	8000f9a <command_input+0x42a>
	}
	else if(is_same_word(buf,(uint8_t *)"adc read",0)){
 8000c3e:	2200      	movs	r2, #0
 8000c40:	4994      	ldr	r1, [pc, #592]	; (8000e94 <command_input+0x324>)
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ff46 	bl	8000ad4 <is_same_word>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d01f      	beq.n	8000c8e <command_input+0x11e>
		uint32_t adc_val = HAL_ADC_GetValue(&hadc1);
 8000c4e:	4892      	ldr	r0, [pc, #584]	; (8000e98 <command_input+0x328>)
 8000c50:	f001 fb66 	bl	8002320 <HAL_ADC_GetValue>
 8000c54:	60b8      	str	r0, [r7, #8]
		adc_val *= 3.3;
 8000c56:	68b8      	ldr	r0, [r7, #8]
 8000c58:	f7ff fcee 	bl	8000638 <__aeabi_ui2d>
 8000c5c:	a37c      	add	r3, pc, #496	; (adr r3, 8000e50 <command_input+0x2e0>)
 8000c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c62:	f7ff fa7d 	bl	8000160 <__aeabi_dmul>
 8000c66:	4602      	mov	r2, r0
 8000c68:	460b      	mov	r3, r1
 8000c6a:	4610      	mov	r0, r2
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f7ff fd5d 	bl	800072c <__aeabi_d2uiz>
 8000c72:	4603      	mov	r3, r0
 8000c74:	60bb      	str	r3, [r7, #8]
		uart_send(1,"\nadc voltage:%dV",(uint16_t)adc_val/4096);
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	0b1b      	lsrs	r3, r3, #12
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4986      	ldr	r1, [pc, #536]	; (8000e9c <command_input+0x32c>)
 8000c82:	2001      	movs	r0, #1
 8000c84:	f7ff fe62 	bl	800094c <uart_send>
		existing_command = true;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	75fb      	strb	r3, [r7, #23]
 8000c8c:	e185      	b.n	8000f9a <command_input+0x42a>
	}
	else if(is_same_word(buf,(uint8_t *)"led",0)){
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4983      	ldr	r1, [pc, #524]	; (8000ea0 <command_input+0x330>)
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ff1e 	bl	8000ad4 <is_same_word>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f000 817d 	beq.w	8000f9a <command_input+0x42a>
		word_len=strlen("led");
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	743b      	strb	r3, [r7, #16]
		if(is_same_word(buf,(uint8_t *)"1",word_len)){
 8000ca4:	7c3b      	ldrb	r3, [r7, #16]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	497e      	ldr	r1, [pc, #504]	; (8000ea4 <command_input+0x334>)
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f7ff ff12 	bl	8000ad4 <is_same_word>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 8094 	beq.w	8000de0 <command_input+0x270>
			word_len+=2;
 8000cb8:	7c3b      	ldrb	r3, [r7, #16]
 8000cba:	3302      	adds	r3, #2
 8000cbc:	743b      	strb	r3, [r7, #16]
			if(is_same_word(buf,(uint8_t *)"on",word_len)){
 8000cbe:	7c3b      	ldrb	r3, [r7, #16]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4979      	ldr	r1, [pc, #484]	; (8000ea8 <command_input+0x338>)
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff05 	bl	8000ad4 <is_same_word>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d00a      	beq.n	8000ce6 <command_input+0x176>
				led1_toggle=false;
 8000cd0:	4b76      	ldr	r3, [pc, #472]	; (8000eac <command_input+0x33c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4875      	ldr	r0, [pc, #468]	; (8000eb0 <command_input+0x340>)
 8000cdc:	f002 f940 	bl	8002f60 <HAL_GPIO_WritePin>
				existing_command = true;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	75fb      	strb	r3, [r7, #23]
 8000ce4:	e159      	b.n	8000f9a <command_input+0x42a>
			}
			else if(is_same_word(buf,(uint8_t *)"off",word_len)){
 8000ce6:	7c3b      	ldrb	r3, [r7, #16]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4972      	ldr	r1, [pc, #456]	; (8000eb4 <command_input+0x344>)
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fef1 	bl	8000ad4 <is_same_word>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d00a      	beq.n	8000d0e <command_input+0x19e>
				led1_toggle=false;
 8000cf8:	4b6c      	ldr	r3, [pc, #432]	; (8000eac <command_input+0x33c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2120      	movs	r1, #32
 8000d02:	486b      	ldr	r0, [pc, #428]	; (8000eb0 <command_input+0x340>)
 8000d04:	f002 f92c 	bl	8002f60 <HAL_GPIO_WritePin>
				existing_command = true;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	75fb      	strb	r3, [r7, #23]
 8000d0c:	e145      	b.n	8000f9a <command_input+0x42a>
			}
			else if(is_same_word(buf,(uint8_t *)"toggle",word_len)){
 8000d0e:	7c3b      	ldrb	r3, [r7, #16]
 8000d10:	461a      	mov	r2, r3
 8000d12:	4969      	ldr	r1, [pc, #420]	; (8000eb8 <command_input+0x348>)
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff fedd 	bl	8000ad4 <is_same_word>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 813c 	beq.w	8000f9a <command_input+0x42a>
				word_len=strlen("led1 toggle ");
 8000d22:	230c      	movs	r3, #12
 8000d24:	743b      	strb	r3, [r7, #16]
				uint8_t toggle_len=strlen((char *)buf+word_len);
 8000d26:	7c3b      	ldrb	r3, [r7, #16]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fa0f 	bl	8000150 <strlen>
 8000d32:	4603      	mov	r3, r0
 8000d34:	73bb      	strb	r3, [r7, #14]
				bool is_number = false;
 8000d36:	2300      	movs	r3, #0
 8000d38:	75bb      	strb	r3, [r7, #22]
				for(uint8_t i=0;i<toggle_len;i++){
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	757b      	strb	r3, [r7, #21]
 8000d3e:	e018      	b.n	8000d72 <command_input+0x202>
					if(buf[word_len+i]>=(int)'0' && buf[word_len+1]<=(int)'9'){
 8000d40:	7c3a      	ldrb	r2, [r7, #16]
 8000d42:	7d7b      	ldrb	r3, [r7, #21]
 8000d44:	4413      	add	r3, r2
 8000d46:	461a      	mov	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b2f      	cmp	r3, #47	; 0x2f
 8000d50:	d90c      	bls.n	8000d6c <command_input+0x1fc>
 8000d52:	7c3b      	ldrb	r3, [r7, #16]
 8000d54:	3301      	adds	r3, #1
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b39      	cmp	r3, #57	; 0x39
 8000d5e:	d805      	bhi.n	8000d6c <command_input+0x1fc>
						is_number=true;
 8000d60:	2301      	movs	r3, #1
 8000d62:	75bb      	strb	r3, [r7, #22]
				for(uint8_t i=0;i<toggle_len;i++){
 8000d64:	7d7b      	ldrb	r3, [r7, #21]
 8000d66:	3301      	adds	r3, #1
 8000d68:	757b      	strb	r3, [r7, #21]
 8000d6a:	e002      	b.n	8000d72 <command_input+0x202>
					}
					else{
						is_number=false;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	75bb      	strb	r3, [r7, #22]
						break;
 8000d70:	e003      	b.n	8000d7a <command_input+0x20a>
				for(uint8_t i=0;i<toggle_len;i++){
 8000d72:	7d7a      	ldrb	r2, [r7, #21]
 8000d74:	7bbb      	ldrb	r3, [r7, #14]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d3e2      	bcc.n	8000d40 <command_input+0x1d0>
					}
				}
				if(!is_number){
 8000d7a:	7dbb      	ldrb	r3, [r7, #22]
 8000d7c:	f083 0301 	eor.w	r3, r3, #1
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d004      	beq.n	8000d90 <command_input+0x220>
					uart_send(1,(char *)"\nerror : toggle time value must be number!");
 8000d86:	494d      	ldr	r1, [pc, #308]	; (8000ebc <command_input+0x34c>)
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f7ff fddf 	bl	800094c <uart_send>
					return;
 8000d8e:	e10e      	b.n	8000fae <command_input+0x43e>
				}
				led1_toggle_time = 0;
 8000d90:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <command_input+0x350>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	801a      	strh	r2, [r3, #0]
				led1_toggle=true;
 8000d96:	4b45      	ldr	r3, [pc, #276]	; (8000eac <command_input+0x33c>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<toggle_len;i++){
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	753b      	strb	r3, [r7, #20]
 8000da0:	e017      	b.n	8000dd2 <command_input+0x262>
					led1_toggle_time = (buf[word_len+i]-48)+led1_toggle_time*10;
 8000da2:	7c3a      	ldrb	r2, [r7, #16]
 8000da4:	7d3b      	ldrb	r3, [r7, #20]
 8000da6:	4413      	add	r3, r2
 8000da8:	461a      	mov	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <command_input+0x350>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	4619      	mov	r1, r3
 8000db8:	0089      	lsls	r1, r1, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3b30      	subs	r3, #48	; 0x30
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b3d      	ldr	r3, [pc, #244]	; (8000ec0 <command_input+0x350>)
 8000dca:	801a      	strh	r2, [r3, #0]
				for(uint8_t i=0;i<toggle_len;i++){
 8000dcc:	7d3b      	ldrb	r3, [r7, #20]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	753b      	strb	r3, [r7, #20]
 8000dd2:	7d3a      	ldrb	r2, [r7, #20]
 8000dd4:	7bbb      	ldrb	r3, [r7, #14]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d3e3      	bcc.n	8000da2 <command_input+0x232>
				}
				existing_command = true;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
 8000dde:	e0dc      	b.n	8000f9a <command_input+0x42a>
			}
		}
		else if(is_same_word(buf,(uint8_t *)"2",word_len)){
 8000de0:	7c3b      	ldrb	r3, [r7, #16]
 8000de2:	461a      	mov	r2, r3
 8000de4:	4937      	ldr	r1, [pc, #220]	; (8000ec4 <command_input+0x354>)
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fe74 	bl	8000ad4 <is_same_word>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 80d3 	beq.w	8000f9a <command_input+0x42a>
			word_len+=2;
 8000df4:	7c3b      	ldrb	r3, [r7, #16]
 8000df6:	3302      	adds	r3, #2
 8000df8:	743b      	strb	r3, [r7, #16]
			if(is_same_word(buf,(uint8_t *)"on",word_len)){
 8000dfa:	7c3b      	ldrb	r3, [r7, #16]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	492a      	ldr	r1, [pc, #168]	; (8000ea8 <command_input+0x338>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fe67 	bl	8000ad4 <is_same_word>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00b      	beq.n	8000e24 <command_input+0x2b4>
				led2_toggle=false;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <command_input+0x358>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <command_input+0x340>)
 8000e1a:	f002 f8a1 	bl	8002f60 <HAL_GPIO_WritePin>
				existing_command = true;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	75fb      	strb	r3, [r7, #23]
 8000e22:	e0ba      	b.n	8000f9a <command_input+0x42a>
			}
			else if(is_same_word(buf,(uint8_t *)"off",word_len)){
 8000e24:	7c3b      	ldrb	r3, [r7, #16]
 8000e26:	461a      	mov	r2, r3
 8000e28:	4922      	ldr	r1, [pc, #136]	; (8000eb4 <command_input+0x344>)
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fe52 	bl	8000ad4 <is_same_word>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d04a      	beq.n	8000ecc <command_input+0x35c>
				led2_toggle=false;
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <command_input+0x358>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12,GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e42:	481b      	ldr	r0, [pc, #108]	; (8000eb0 <command_input+0x340>)
 8000e44:	f002 f88c 	bl	8002f60 <HAL_GPIO_WritePin>
				existing_command = true;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	75fb      	strb	r3, [r7, #23]
 8000e4c:	e0a5      	b.n	8000f9a <command_input+0x42a>
 8000e4e:	bf00      	nop
 8000e50:	66666666 	.word	0x66666666
 8000e54:	400a6666 	.word	0x400a6666
 8000e58:	08004b68 	.word	0x08004b68
 8000e5c:	08004b70 	.word	0x08004b70
 8000e60:	08004ba8 	.word	0x08004ba8
 8000e64:	08004bbc 	.word	0x08004bbc
 8000e68:	08004bd0 	.word	0x08004bd0
 8000e6c:	08004c00 	.word	0x08004c00
 8000e70:	08004c24 	.word	0x08004c24
 8000e74:	08004c44 	.word	0x08004c44
 8000e78:	08004c80 	.word	0x08004c80
 8000e7c:	08004cc0 	.word	0x08004cc0
 8000e80:	08004ccc 	.word	0x08004ccc
 8000e84:	08004ce8 	.word	0x08004ce8
 8000e88:	08004cf0 	.word	0x08004cf0
 8000e8c:	08004cf4 	.word	0x08004cf4
 8000e90:	08004cfc 	.word	0x08004cfc
 8000e94:	08004d04 	.word	0x08004d04
 8000e98:	2000007c 	.word	0x2000007c
 8000e9c:	08004d10 	.word	0x08004d10
 8000ea0:	08004d24 	.word	0x08004d24
 8000ea4:	08004d28 	.word	0x08004d28
 8000ea8:	08004d2c 	.word	0x08004d2c
 8000eac:	2000015b 	.word	0x2000015b
 8000eb0:	40010800 	.word	0x40010800
 8000eb4:	08004d30 	.word	0x08004d30
 8000eb8:	08004d34 	.word	0x08004d34
 8000ebc:	08004d3c 	.word	0x08004d3c
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	08004d68 	.word	0x08004d68
 8000ec8:	2000015c 	.word	0x2000015c
			}
			else if(is_same_word(buf,(uint8_t *)"toggle",word_len)){
 8000ecc:	7c3b      	ldrb	r3, [r7, #16]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <command_input+0x444>)
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff fdfe 	bl	8000ad4 <is_same_word>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d05d      	beq.n	8000f9a <command_input+0x42a>
				word_len=strlen("led2 toggle ");
 8000ede:	230c      	movs	r3, #12
 8000ee0:	743b      	strb	r3, [r7, #16]
				uint8_t toggle_len=strlen((char *)buf+word_len);
 8000ee2:	7c3b      	ldrb	r3, [r7, #16]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff f931 	bl	8000150 <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]
				bool is_number = false;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	74fb      	strb	r3, [r7, #19]
				for(uint8_t i=0;i<toggle_len;i++){
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	74bb      	strb	r3, [r7, #18]
 8000efa:	e018      	b.n	8000f2e <command_input+0x3be>
					if(buf[word_len+i]>=(int)'0' && buf[word_len+1]<=(int)'9'){
 8000efc:	7c3a      	ldrb	r2, [r7, #16]
 8000efe:	7cbb      	ldrb	r3, [r7, #18]
 8000f00:	4413      	add	r3, r2
 8000f02:	461a      	mov	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4413      	add	r3, r2
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b2f      	cmp	r3, #47	; 0x2f
 8000f0c:	d90c      	bls.n	8000f28 <command_input+0x3b8>
 8000f0e:	7c3b      	ldrb	r3, [r7, #16]
 8000f10:	3301      	adds	r3, #1
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b39      	cmp	r3, #57	; 0x39
 8000f1a:	d805      	bhi.n	8000f28 <command_input+0x3b8>
						is_number=true;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	74fb      	strb	r3, [r7, #19]
				for(uint8_t i=0;i<toggle_len;i++){
 8000f20:	7cbb      	ldrb	r3, [r7, #18]
 8000f22:	3301      	adds	r3, #1
 8000f24:	74bb      	strb	r3, [r7, #18]
 8000f26:	e002      	b.n	8000f2e <command_input+0x3be>
					}
					else{
						is_number=false;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	74fb      	strb	r3, [r7, #19]
						break;
 8000f2c:	e003      	b.n	8000f36 <command_input+0x3c6>
				for(uint8_t i=0;i<toggle_len;i++){
 8000f2e:	7cba      	ldrb	r2, [r7, #18]
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d3e2      	bcc.n	8000efc <command_input+0x38c>
					}
				}
				if(!is_number){
 8000f36:	7cfb      	ldrb	r3, [r7, #19]
 8000f38:	f083 0301 	eor.w	r3, r3, #1
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d004      	beq.n	8000f4c <command_input+0x3dc>
					uart_send(1,(char *)"\nerror : toggle time value must be number!");
 8000f42:	491d      	ldr	r1, [pc, #116]	; (8000fb8 <command_input+0x448>)
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fd01 	bl	800094c <uart_send>
					return;
 8000f4a:	e030      	b.n	8000fae <command_input+0x43e>
				}
				led2_toggle_time = 0;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <command_input+0x44c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	801a      	strh	r2, [r3, #0]
				led2_toggle=true;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <command_input+0x450>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
				for(uint8_t i=0;i<toggle_len;i++){
 8000f58:	2300      	movs	r3, #0
 8000f5a:	747b      	strb	r3, [r7, #17]
 8000f5c:	e017      	b.n	8000f8e <command_input+0x41e>
					led2_toggle_time = (buf[word_len+i]-48)+led2_toggle_time*10;
 8000f5e:	7c3a      	ldrb	r2, [r7, #16]
 8000f60:	7c7b      	ldrb	r3, [r7, #17]
 8000f62:	4413      	add	r3, r2
 8000f64:	461a      	mov	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <command_input+0x44c>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	4619      	mov	r1, r3
 8000f74:	0089      	lsls	r1, r1, #2
 8000f76:	440b      	add	r3, r1
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	3b30      	subs	r3, #48	; 0x30
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b0d      	ldr	r3, [pc, #52]	; (8000fbc <command_input+0x44c>)
 8000f86:	801a      	strh	r2, [r3, #0]
				for(uint8_t i=0;i<toggle_len;i++){
 8000f88:	7c7b      	ldrb	r3, [r7, #17]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	747b      	strb	r3, [r7, #17]
 8000f8e:	7c7a      	ldrb	r2, [r7, #17]
 8000f90:	7bfb      	ldrb	r3, [r7, #15]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d3e3      	bcc.n	8000f5e <command_input+0x3ee>
				}
				existing_command = true;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
			}
		}
	}
	if (!existing_command){
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	f083 0301 	eor.w	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <command_input+0x43e>
		uart_send(1,"\ncommand is not existing. type \'help\' to get command list.");
 8000fa6:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <command_input+0x454>)
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fccf 	bl	800094c <uart_send>
	}
}
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	08004d34 	.word	0x08004d34
 8000fb8:	08004d3c 	.word	0x08004d3c
 8000fbc:	20000002 	.word	0x20000002
 8000fc0:	2000015c 	.word	0x2000015c
 8000fc4:	08004d6c 	.word	0x08004d6c

08000fc8 <gpio_led_toggle>:

void gpio_led_toggle(uint32_t *led1_time,uint32_t *led2_time){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
	if (led1_toggle){
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <gpio_led_toggle+0x70>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d012      	beq.n	8001000 <gpio_led_toggle+0x38>
		if (HAL_GetTick()-*led1_time>led1_toggle_time){
 8000fda:	f000 ffed 	bl	8001fb8 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <gpio_led_toggle+0x74>)
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d908      	bls.n	8001000 <gpio_led_toggle+0x38>
			*led1_time=HAL_GetTick();
 8000fee:	f000 ffe3 	bl	8001fb8 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000ff8:	2120      	movs	r1, #32
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <gpio_led_toggle+0x78>)
 8000ffc:	f001 ffc8 	bl	8002f90 <HAL_GPIO_TogglePin>
		}
	}
	if (led2_toggle){
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <gpio_led_toggle+0x7c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <gpio_led_toggle+0x68>
		if (HAL_GetTick()-*led2_time>led2_toggle_time){
 8001008:	f000 ffd6 	bl	8001fb8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <gpio_led_toggle+0x80>)
 8001016:	8812      	ldrh	r2, [r2, #0]
 8001018:	4293      	cmp	r3, r2
 800101a:	d909      	bls.n	8001030 <gpio_led_toggle+0x68>
			*led2_time=HAL_GetTick();
 800101c:	f000 ffcc 	bl	8001fb8 <HAL_GetTick>
 8001020:	4602      	mov	r2, r0
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_12);
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <gpio_led_toggle+0x78>)
 800102c:	f001 ffb0 	bl	8002f90 <HAL_GPIO_TogglePin>
		}
	}
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000015b 	.word	0x2000015b
 800103c:	20000000 	.word	0x20000000
 8001040:	40010800 	.word	0x40010800
 8001044:	2000015c 	.word	0x2000015c
 8001048:	20000002 	.word	0x20000002

0800104c <cli_start>:

void cli_start(uint8_t i,keytype key_input){
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	switch (key_input){
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	3b01      	subs	r3, #1
 8001060:	2b09      	cmp	r3, #9
 8001062:	f200 842d 	bhi.w	80018c0 <cli_start+0x874>
 8001066:	a201      	add	r2, pc, #4	; (adr r2, 800106c <cli_start+0x20>)
 8001068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106c:	0800116b 	.word	0x0800116b
 8001070:	0800121f 	.word	0x0800121f
 8001074:	08001095 	.word	0x08001095
 8001078:	080010e7 	.word	0x080010e7
 800107c:	080012d1 	.word	0x080012d1
 8001080:	08001391 	.word	0x08001391
 8001084:	08001761 	.word	0x08001761
 8001088:	080015f1 	.word	0x080015f1
 800108c:	080013e7 	.word	0x080013e7
 8001090:	0800147b 	.word	0x0800147b
		case LEFT:
			if(data[data_num].cursor_index>0){
 8001094:	4bb5      	ldr	r3, [pc, #724]	; (800136c <cli_start+0x320>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4ab5      	ldr	r2, [pc, #724]	; (8001370 <cli_start+0x324>)
 800109c:	460b      	mov	r3, r1
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	440b      	add	r3, r1
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	3321      	adds	r3, #33	; 0x21
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 840a 	beq.w	80018c4 <cli_start+0x878>
				data[data_num].cursor_index--;
 80010b0:	4bae      	ldr	r3, [pc, #696]	; (800136c <cli_start+0x320>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	49ae      	ldr	r1, [pc, #696]	; (8001370 <cli_start+0x324>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4413      	add	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	440b      	add	r3, r1
 80010c2:	3321      	adds	r3, #33	; 0x21
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b2d8      	uxtb	r0, r3
 80010ca:	49a9      	ldr	r1, [pc, #676]	; (8001370 <cli_start+0x324>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	440b      	add	r3, r1
 80010d6:	3321      	adds	r3, #33	; 0x21
 80010d8:	4602      	mov	r2, r0
 80010da:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1D");
 80010dc:	49a5      	ldr	r1, [pc, #660]	; (8001374 <cli_start+0x328>)
 80010de:	2001      	movs	r0, #1
 80010e0:	f7ff fc34 	bl	800094c <uart_send>
			}
			break;
 80010e4:	e3ee      	b.n	80018c4 <cli_start+0x878>
		case RIGHT:
			if(data[data_num].cursor_index<32 && data[data_num].cursor_index<data[data_num].command_index){
 80010e6:	4ba1      	ldr	r3, [pc, #644]	; (800136c <cli_start+0x320>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	4619      	mov	r1, r3
 80010ec:	4aa0      	ldr	r2, [pc, #640]	; (8001370 <cli_start+0x324>)
 80010ee:	460b      	mov	r3, r1
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	440b      	add	r3, r1
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	3321      	adds	r3, #33	; 0x21
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b1f      	cmp	r3, #31
 80010fe:	f200 83e3 	bhi.w	80018c8 <cli_start+0x87c>
 8001102:	4b9a      	ldr	r3, [pc, #616]	; (800136c <cli_start+0x320>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	4a99      	ldr	r2, [pc, #612]	; (8001370 <cli_start+0x324>)
 800110a:	460b      	mov	r3, r1
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	440b      	add	r3, r1
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	3321      	adds	r3, #33	; 0x21
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b94      	ldr	r3, [pc, #592]	; (800136c <cli_start+0x320>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	4994      	ldr	r1, [pc, #592]	; (8001370 <cli_start+0x324>)
 8001120:	4603      	mov	r3, r0
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	4403      	add	r3, r0
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	440b      	add	r3, r1
 800112a:	3320      	adds	r3, #32
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	f080 83ca 	bcs.w	80018c8 <cli_start+0x87c>
				data[data_num].cursor_index++;
 8001134:	4b8d      	ldr	r3, [pc, #564]	; (800136c <cli_start+0x320>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	498d      	ldr	r1, [pc, #564]	; (8001370 <cli_start+0x324>)
 800113c:	4613      	mov	r3, r2
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	440b      	add	r3, r1
 8001146:	3321      	adds	r3, #33	; 0x21
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b2d8      	uxtb	r0, r3
 800114e:	4988      	ldr	r1, [pc, #544]	; (8001370 <cli_start+0x324>)
 8001150:	4613      	mov	r3, r2
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	440b      	add	r3, r1
 800115a:	3321      	adds	r3, #33	; 0x21
 800115c:	4602      	mov	r2, r0
 800115e:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1C");
 8001160:	4985      	ldr	r1, [pc, #532]	; (8001378 <cli_start+0x32c>)
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff fbf2 	bl	800094c <uart_send>
			}
			break;
 8001168:	e3ae      	b.n	80018c8 <cli_start+0x87c>
		case UP:
			if(data[data_num].cursor_index>0){
 800116a:	4b80      	ldr	r3, [pc, #512]	; (800136c <cli_start+0x320>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4619      	mov	r1, r3
 8001170:	4a7f      	ldr	r2, [pc, #508]	; (8001370 <cli_start+0x324>)
 8001172:	460b      	mov	r3, r1
 8001174:	011b      	lsls	r3, r3, #4
 8001176:	440b      	add	r3, r1
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	3321      	adds	r3, #33	; 0x21
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00f      	beq.n	80011a4 <cli_start+0x158>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 8001184:	4b79      	ldr	r3, [pc, #484]	; (800136c <cli_start+0x320>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4619      	mov	r1, r3
 800118a:	4a79      	ldr	r2, [pc, #484]	; (8001370 <cli_start+0x324>)
 800118c:	460b      	mov	r3, r1
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	440b      	add	r3, r1
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	3321      	adds	r3, #33	; 0x21
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4977      	ldr	r1, [pc, #476]	; (800137c <cli_start+0x330>)
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff fbd4 	bl	800094c <uart_send>
			}
			uart_send(1,"\x1B[0J");
 80011a4:	4976      	ldr	r1, [pc, #472]	; (8001380 <cli_start+0x334>)
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff fbd0 	bl	800094c <uart_send>
			data_num++;
 80011ac:	4b6f      	ldr	r3, [pc, #444]	; (800136c <cli_start+0x320>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	4b6d      	ldr	r3, [pc, #436]	; (800136c <cli_start+0x320>)
 80011b6:	701a      	strb	r2, [r3, #0]
			data_num%=3;
 80011b8:	4b6c      	ldr	r3, [pc, #432]	; (800136c <cli_start+0x320>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b71      	ldr	r3, [pc, #452]	; (8001384 <cli_start+0x338>)
 80011be:	fba3 1302 	umull	r1, r3, r3, r2
 80011c2:	0859      	lsrs	r1, r3, #1
 80011c4:	460b      	mov	r3, r1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	440b      	add	r3, r1
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b67      	ldr	r3, [pc, #412]	; (800136c <cli_start+0x320>)
 80011d0:	701a      	strb	r2, [r3, #0]
			uart_send(1,"\x1B[4h%s\x1B[4l",data[data_num].command_buffer);
 80011d2:	4b66      	ldr	r3, [pc, #408]	; (800136c <cli_start+0x320>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	4613      	mov	r3, r2
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	4a63      	ldr	r2, [pc, #396]	; (8001370 <cli_start+0x324>)
 80011e2:	4413      	add	r3, r2
 80011e4:	461a      	mov	r2, r3
 80011e6:	4968      	ldr	r1, [pc, #416]	; (8001388 <cli_start+0x33c>)
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff fbaf 	bl	800094c <uart_send>
			data[data_num].cursor_index=data[data_num].command_index;
 80011ee:	4b5f      	ldr	r3, [pc, #380]	; (800136c <cli_start+0x320>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	4b5d      	ldr	r3, [pc, #372]	; (800136c <cli_start+0x320>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	4a5d      	ldr	r2, [pc, #372]	; (8001370 <cli_start+0x324>)
 80011fc:	4603      	mov	r3, r0
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	4403      	add	r3, r0
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	3320      	adds	r3, #32
 8001208:	7818      	ldrb	r0, [r3, #0]
 800120a:	4a59      	ldr	r2, [pc, #356]	; (8001370 <cli_start+0x324>)
 800120c:	460b      	mov	r3, r1
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	440b      	add	r3, r1
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	3321      	adds	r3, #33	; 0x21
 8001218:	4602      	mov	r2, r0
 800121a:	701a      	strb	r2, [r3, #0]
			break;
 800121c:	e35f      	b.n	80018de <cli_start+0x892>
		case DOWN:
			if(data[data_num].cursor_index>0){
 800121e:	4b53      	ldr	r3, [pc, #332]	; (800136c <cli_start+0x320>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	4619      	mov	r1, r3
 8001224:	4a52      	ldr	r2, [pc, #328]	; (8001370 <cli_start+0x324>)
 8001226:	460b      	mov	r3, r1
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	440b      	add	r3, r1
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	3321      	adds	r3, #33	; 0x21
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d00f      	beq.n	8001258 <cli_start+0x20c>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 8001238:	4b4c      	ldr	r3, [pc, #304]	; (800136c <cli_start+0x320>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <cli_start+0x324>)
 8001240:	460b      	mov	r3, r1
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	440b      	add	r3, r1
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	3321      	adds	r3, #33	; 0x21
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	494a      	ldr	r1, [pc, #296]	; (800137c <cli_start+0x330>)
 8001252:	2001      	movs	r0, #1
 8001254:	f7ff fb7a 	bl	800094c <uart_send>
			}
			uart_send(1,"\x1B[0J");
 8001258:	4949      	ldr	r1, [pc, #292]	; (8001380 <cli_start+0x334>)
 800125a:	2001      	movs	r0, #1
 800125c:	f7ff fb76 	bl	800094c <uart_send>
			if(data_num>0){
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <cli_start+0x320>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <cli_start+0x22a>
				data_num--;
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <cli_start+0x320>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <cli_start+0x320>)
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e006      	b.n	8001284 <cli_start+0x238>
			}
			else if(data_num==0){
 8001276:	4b3d      	ldr	r3, [pc, #244]	; (800136c <cli_start+0x320>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <cli_start+0x238>
				data_num=2;
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <cli_start+0x320>)
 8001280:	2202      	movs	r2, #2
 8001282:	701a      	strb	r2, [r3, #0]
			}
			uart_send(1,"\x1B[4h%s\x1B[4l",data[data_num].command_buffer);
 8001284:	4b39      	ldr	r3, [pc, #228]	; (800136c <cli_start+0x320>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4613      	mov	r3, r2
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	4413      	add	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4a37      	ldr	r2, [pc, #220]	; (8001370 <cli_start+0x324>)
 8001294:	4413      	add	r3, r2
 8001296:	461a      	mov	r2, r3
 8001298:	493b      	ldr	r1, [pc, #236]	; (8001388 <cli_start+0x33c>)
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fb56 	bl	800094c <uart_send>
			data[data_num].cursor_index=data[data_num].command_index;
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <cli_start+0x320>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	4b31      	ldr	r3, [pc, #196]	; (800136c <cli_start+0x320>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4a30      	ldr	r2, [pc, #192]	; (8001370 <cli_start+0x324>)
 80012ae:	4603      	mov	r3, r0
 80012b0:	011b      	lsls	r3, r3, #4
 80012b2:	4403      	add	r3, r0
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4413      	add	r3, r2
 80012b8:	3320      	adds	r3, #32
 80012ba:	7818      	ldrb	r0, [r3, #0]
 80012bc:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <cli_start+0x324>)
 80012be:	460b      	mov	r3, r1
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	440b      	add	r3, r1
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4413      	add	r3, r2
 80012c8:	3321      	adds	r3, #33	; 0x21
 80012ca:	4602      	mov	r2, r0
 80012cc:	701a      	strb	r2, [r3, #0]
			break;
 80012ce:	e306      	b.n	80018de <cli_start+0x892>
		case END:
			if(data[data_num].command_index>data[data_num].cursor_index){
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <cli_start+0x320>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	4a26      	ldr	r2, [pc, #152]	; (8001370 <cli_start+0x324>)
 80012d8:	460b      	mov	r3, r1
 80012da:	011b      	lsls	r3, r3, #4
 80012dc:	440b      	add	r3, r1
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	3320      	adds	r3, #32
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <cli_start+0x320>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	4920      	ldr	r1, [pc, #128]	; (8001370 <cli_start+0x324>)
 80012ee:	4603      	mov	r3, r0
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	4403      	add	r3, r0
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	440b      	add	r3, r1
 80012f8:	3321      	adds	r3, #33	; 0x21
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f240 82e5 	bls.w	80018cc <cli_start+0x880>
				uart_send(1,"\x1B[%dC",data[data_num].command_index-data[data_num].cursor_index);
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <cli_start+0x320>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	4a19      	ldr	r2, [pc, #100]	; (8001370 <cli_start+0x324>)
 800130a:	460b      	mov	r3, r1
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	440b      	add	r3, r1
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	3320      	adds	r3, #32
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <cli_start+0x320>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	4619      	mov	r1, r3
 8001320:	4a13      	ldr	r2, [pc, #76]	; (8001370 <cli_start+0x324>)
 8001322:	460b      	mov	r3, r1
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	440b      	add	r3, r1
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	4413      	add	r3, r2
 800132c:	3321      	adds	r3, #33	; 0x21
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	1ac3      	subs	r3, r0, r3
 8001332:	461a      	mov	r2, r3
 8001334:	4915      	ldr	r1, [pc, #84]	; (800138c <cli_start+0x340>)
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff fb08 	bl	800094c <uart_send>
				data[data_num].cursor_index=data[data_num].command_index;
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <cli_start+0x320>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <cli_start+0x320>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	4a09      	ldr	r2, [pc, #36]	; (8001370 <cli_start+0x324>)
 800134a:	4603      	mov	r3, r0
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	4403      	add	r3, r0
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	3320      	adds	r3, #32
 8001356:	7818      	ldrb	r0, [r3, #0]
 8001358:	4a05      	ldr	r2, [pc, #20]	; (8001370 <cli_start+0x324>)
 800135a:	460b      	mov	r3, r1
 800135c:	011b      	lsls	r3, r3, #4
 800135e:	440b      	add	r3, r1
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	3321      	adds	r3, #33	; 0x21
 8001366:	4602      	mov	r2, r0
 8001368:	701a      	strb	r2, [r3, #0]
			}
			break;
 800136a:	e2af      	b.n	80018cc <cli_start+0x880>
 800136c:	2000015a 	.word	0x2000015a
 8001370:	200000f4 	.word	0x200000f4
 8001374:	08004da8 	.word	0x08004da8
 8001378:	08004db0 	.word	0x08004db0
 800137c:	08004db8 	.word	0x08004db8
 8001380:	08004dc0 	.word	0x08004dc0
 8001384:	aaaaaaab 	.word	0xaaaaaaab
 8001388:	08004dc8 	.word	0x08004dc8
 800138c:	08004dd4 	.word	0x08004dd4
		case HOME:
			if(data[data_num].cursor_index>0){
 8001390:	4b90      	ldr	r3, [pc, #576]	; (80015d4 <cli_start+0x588>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4619      	mov	r1, r3
 8001396:	4a90      	ldr	r2, [pc, #576]	; (80015d8 <cli_start+0x58c>)
 8001398:	460b      	mov	r3, r1
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	440b      	add	r3, r1
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4413      	add	r3, r2
 80013a2:	3321      	adds	r3, #33	; 0x21
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 8292 	beq.w	80018d0 <cli_start+0x884>
				uart_send(1,"\x1B[%dD",data[data_num].cursor_index);
 80013ac:	4b89      	ldr	r3, [pc, #548]	; (80015d4 <cli_start+0x588>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	4a89      	ldr	r2, [pc, #548]	; (80015d8 <cli_start+0x58c>)
 80013b4:	460b      	mov	r3, r1
 80013b6:	011b      	lsls	r3, r3, #4
 80013b8:	440b      	add	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	3321      	adds	r3, #33	; 0x21
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4985      	ldr	r1, [pc, #532]	; (80015dc <cli_start+0x590>)
 80013c6:	2001      	movs	r0, #1
 80013c8:	f7ff fac0 	bl	800094c <uart_send>
				data[data_num].cursor_index=0;
 80013cc:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <cli_start+0x588>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4a81      	ldr	r2, [pc, #516]	; (80015d8 <cli_start+0x58c>)
 80013d4:	460b      	mov	r3, r1
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	440b      	add	r3, r1
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	3321      	adds	r3, #33	; 0x21
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80013e4:	e274      	b.n	80018d0 <cli_start+0x884>
		case ENTER:
			/*operating command when enter is pressed*/
			command_input(data[data_num].command_buffer);
 80013e6:	4b7b      	ldr	r3, [pc, #492]	; (80015d4 <cli_start+0x588>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4613      	mov	r3, r2
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	4413      	add	r3, r2
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4a78      	ldr	r2, [pc, #480]	; (80015d8 <cli_start+0x58c>)
 80013f6:	4413      	add	r3, r2
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fbb9 	bl	8000b70 <command_input>
			/*end operating*/
			uart_send(1,"\nCLI-# ");
 80013fe:	4978      	ldr	r1, [pc, #480]	; (80015e0 <cli_start+0x594>)
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff faa3 	bl	800094c <uart_send>
			data_num++;
 8001406:	4b73      	ldr	r3, [pc, #460]	; (80015d4 <cli_start+0x588>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4b71      	ldr	r3, [pc, #452]	; (80015d4 <cli_start+0x588>)
 8001410:	701a      	strb	r2, [r3, #0]
			data_num%=3;
 8001412:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <cli_start+0x588>)
 8001414:	781a      	ldrb	r2, [r3, #0]
 8001416:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <cli_start+0x598>)
 8001418:	fba3 1302 	umull	r1, r3, r3, r2
 800141c:	0859      	lsrs	r1, r3, #1
 800141e:	460b      	mov	r3, r1
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	440b      	add	r3, r1
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	b2da      	uxtb	r2, r3
 8001428:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <cli_start+0x588>)
 800142a:	701a      	strb	r2, [r3, #0]
			memset(data[data_num].command_buffer,0,32);
 800142c:	4b69      	ldr	r3, [pc, #420]	; (80015d4 <cli_start+0x588>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4613      	mov	r3, r2
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4a67      	ldr	r2, [pc, #412]	; (80015d8 <cli_start+0x58c>)
 800143c:	4413      	add	r3, r2
 800143e:	2220      	movs	r2, #32
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fef2 	bl	800422c <memset>
			data[data_num].command_index=0;
 8001448:	4b62      	ldr	r3, [pc, #392]	; (80015d4 <cli_start+0x588>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	4a62      	ldr	r2, [pc, #392]	; (80015d8 <cli_start+0x58c>)
 8001450:	460b      	mov	r3, r1
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	440b      	add	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	3320      	adds	r3, #32
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
			data[data_num].cursor_index=0;
 8001460:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <cli_start+0x588>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	4a5c      	ldr	r2, [pc, #368]	; (80015d8 <cli_start+0x58c>)
 8001468:	460b      	mov	r3, r1
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	440b      	add	r3, r1
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	3321      	adds	r3, #33	; 0x21
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
			break;
 8001478:	e231      	b.n	80018de <cli_start+0x892>
		case IS_WORD:
			if(data[data_num].command_index<32){
 800147a:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <cli_start+0x588>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	4a55      	ldr	r2, [pc, #340]	; (80015d8 <cli_start+0x58c>)
 8001482:	460b      	mov	r3, r1
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	440b      	add	r3, r1
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	3320      	adds	r3, #32
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b1f      	cmp	r3, #31
 8001492:	f200 821f 	bhi.w	80018d4 <cli_start+0x888>
				data[data_num].command_index++;
 8001496:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <cli_start+0x588>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	494e      	ldr	r1, [pc, #312]	; (80015d8 <cli_start+0x58c>)
 800149e:	4613      	mov	r3, r2
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	440b      	add	r3, r1
 80014a8:	3320      	adds	r3, #32
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	3301      	adds	r3, #1
 80014ae:	b2d8      	uxtb	r0, r3
 80014b0:	4949      	ldr	r1, [pc, #292]	; (80015d8 <cli_start+0x58c>)
 80014b2:	4613      	mov	r3, r2
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	440b      	add	r3, r1
 80014bc:	3320      	adds	r3, #32
 80014be:	4602      	mov	r2, r0
 80014c0:	701a      	strb	r2, [r3, #0]
				if(data[data_num].command_index-1!=data[data_num].cursor_index){
 80014c2:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <cli_start+0x588>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4a43      	ldr	r2, [pc, #268]	; (80015d8 <cli_start+0x58c>)
 80014ca:	460b      	mov	r3, r1
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	440b      	add	r3, r1
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	3320      	adds	r3, #32
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	4b3e      	ldr	r3, [pc, #248]	; (80015d4 <cli_start+0x588>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	493d      	ldr	r1, [pc, #244]	; (80015d8 <cli_start+0x58c>)
 80014e2:	4603      	mov	r3, r0
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	4403      	add	r3, r0
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	440b      	add	r3, r1
 80014ec:	3321      	adds	r3, #33	; 0x21
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d03f      	beq.n	8001574 <cli_start+0x528>
					for(int8_t j=data[data_num].command_index-1;j>=data[data_num].cursor_index;j--){
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <cli_start+0x588>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4a37      	ldr	r2, [pc, #220]	; (80015d8 <cli_start+0x58c>)
 80014fc:	460b      	mov	r3, r1
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	440b      	add	r3, r1
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	3320      	adds	r3, #32
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	3b01      	subs	r3, #1
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e021      	b.n	8001556 <cli_start+0x50a>
						data[data_num].command_buffer[j+1]=data[data_num].command_buffer[j];
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <cli_start+0x588>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461d      	mov	r5, r3
 8001518:	f997 100f 	ldrsb.w	r1, [r7, #15]
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <cli_start+0x588>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461c      	mov	r4, r3
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	482b      	ldr	r0, [pc, #172]	; (80015d8 <cli_start+0x58c>)
 800152a:	462b      	mov	r3, r5
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	442b      	add	r3, r5
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4403      	add	r3, r0
 8001534:	440b      	add	r3, r1
 8001536:	7818      	ldrb	r0, [r3, #0]
 8001538:	4927      	ldr	r1, [pc, #156]	; (80015d8 <cli_start+0x58c>)
 800153a:	4623      	mov	r3, r4
 800153c:	011b      	lsls	r3, r3, #4
 800153e:	4423      	add	r3, r4
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	440b      	add	r3, r1
 8001544:	4413      	add	r3, r2
 8001546:	4602      	mov	r2, r0
 8001548:	701a      	strb	r2, [r3, #0]
					for(int8_t j=data[data_num].command_index-1;j>=data[data_num].cursor_index;j--){
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b2db      	uxtb	r3, r3
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800155a:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <cli_start+0x588>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	491d      	ldr	r1, [pc, #116]	; (80015d8 <cli_start+0x58c>)
 8001562:	4603      	mov	r3, r0
 8001564:	011b      	lsls	r3, r3, #4
 8001566:	4403      	add	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	440b      	add	r3, r1
 800156c:	3321      	adds	r3, #33	; 0x21
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	dace      	bge.n	8001512 <cli_start+0x4c6>
					}
				}
				data[data_num].command_buffer[data[data_num].cursor_index++]=command_tx[i];
 8001574:	79f8      	ldrb	r0, [r7, #7]
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <cli_start+0x588>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461d      	mov	r5, r3
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <cli_start+0x588>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4915      	ldr	r1, [pc, #84]	; (80015d8 <cli_start+0x58c>)
 8001584:	4613      	mov	r3, r2
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	440b      	add	r3, r1
 800158e:	3321      	adds	r3, #33	; 0x21
 8001590:	7819      	ldrb	r1, [r3, #0]
 8001592:	1c4b      	adds	r3, r1, #1
 8001594:	b2de      	uxtb	r6, r3
 8001596:	4c10      	ldr	r4, [pc, #64]	; (80015d8 <cli_start+0x58c>)
 8001598:	4613      	mov	r3, r2
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	4413      	add	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4423      	add	r3, r4
 80015a2:	3321      	adds	r3, #33	; 0x21
 80015a4:	4632      	mov	r2, r6
 80015a6:	701a      	strb	r2, [r3, #0]
 80015a8:	460c      	mov	r4, r1
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <cli_start+0x59c>)
 80015ac:	5c19      	ldrb	r1, [r3, r0]
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <cli_start+0x58c>)
 80015b0:	462b      	mov	r3, r5
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	442b      	add	r3, r5
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	4423      	add	r3, r4
 80015bc:	460a      	mov	r2, r1
 80015be:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[4h%c\x1B[4l",command_tx[i]);
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <cli_start+0x59c>)
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	461a      	mov	r2, r3
 80015c8:	4908      	ldr	r1, [pc, #32]	; (80015ec <cli_start+0x5a0>)
 80015ca:	2001      	movs	r0, #1
 80015cc:	f7ff f9be 	bl	800094c <uart_send>
			}
			break;
 80015d0:	e180      	b.n	80018d4 <cli_start+0x888>
 80015d2:	bf00      	nop
 80015d4:	2000015a 	.word	0x2000015a
 80015d8:	200000f4 	.word	0x200000f4
 80015dc:	08004db8 	.word	0x08004db8
 80015e0:	08004ddc 	.word	0x08004ddc
 80015e4:	aaaaaaab 	.word	0xaaaaaaab
 80015e8:	200000ac 	.word	0x200000ac
 80015ec:	08004de4 	.word	0x08004de4
		case BACKSPACE:
			if(data[data_num].command_index>0 && data[data_num].cursor_index>0){
 80015f0:	4bbe      	ldr	r3, [pc, #760]	; (80018ec <cli_start+0x8a0>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4abe      	ldr	r2, [pc, #760]	; (80018f0 <cli_start+0x8a4>)
 80015f8:	460b      	mov	r3, r1
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	440b      	add	r3, r1
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	3320      	adds	r3, #32
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 8166 	beq.w	80018d8 <cli_start+0x88c>
 800160c:	4bb7      	ldr	r3, [pc, #732]	; (80018ec <cli_start+0x8a0>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4ab7      	ldr	r2, [pc, #732]	; (80018f0 <cli_start+0x8a4>)
 8001614:	460b      	mov	r3, r1
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	440b      	add	r3, r1
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	3321      	adds	r3, #33	; 0x21
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8158 	beq.w	80018d8 <cli_start+0x88c>
				data[data_num].command_index--;
 8001628:	4bb0      	ldr	r3, [pc, #704]	; (80018ec <cli_start+0x8a0>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	49b0      	ldr	r1, [pc, #704]	; (80018f0 <cli_start+0x8a4>)
 8001630:	4613      	mov	r3, r2
 8001632:	011b      	lsls	r3, r3, #4
 8001634:	4413      	add	r3, r2
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	440b      	add	r3, r1
 800163a:	3320      	adds	r3, #32
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3b01      	subs	r3, #1
 8001640:	b2d8      	uxtb	r0, r3
 8001642:	49ab      	ldr	r1, [pc, #684]	; (80018f0 <cli_start+0x8a4>)
 8001644:	4613      	mov	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	4413      	add	r3, r2
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	440b      	add	r3, r1
 800164e:	3320      	adds	r3, #32
 8001650:	4602      	mov	r2, r0
 8001652:	701a      	strb	r2, [r3, #0]
				data[data_num].command_buffer[--data[data_num].cursor_index]=0;
 8001654:	4ba5      	ldr	r3, [pc, #660]	; (80018ec <cli_start+0x8a0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	4ba4      	ldr	r3, [pc, #656]	; (80018ec <cli_start+0x8a0>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	49a3      	ldr	r1, [pc, #652]	; (80018f0 <cli_start+0x8a4>)
 8001662:	4613      	mov	r3, r2
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	4413      	add	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	440b      	add	r3, r1
 800166c:	3321      	adds	r3, #33	; 0x21
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3b01      	subs	r3, #1
 8001672:	b2dc      	uxtb	r4, r3
 8001674:	499e      	ldr	r1, [pc, #632]	; (80018f0 <cli_start+0x8a4>)
 8001676:	4613      	mov	r3, r2
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	440b      	add	r3, r1
 8001680:	3321      	adds	r3, #33	; 0x21
 8001682:	4621      	mov	r1, r4
 8001684:	7019      	strb	r1, [r3, #0]
 8001686:	499a      	ldr	r1, [pc, #616]	; (80018f0 <cli_start+0x8a4>)
 8001688:	4613      	mov	r3, r2
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	440b      	add	r3, r1
 8001692:	3321      	adds	r3, #33	; 0x21
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	4a95      	ldr	r2, [pc, #596]	; (80018f0 <cli_start+0x8a4>)
 800169a:	4603      	mov	r3, r0
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4403      	add	r3, r0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 80016aa:	4b90      	ldr	r3, [pc, #576]	; (80018ec <cli_start+0x8a0>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4619      	mov	r1, r3
 80016b0:	4a8f      	ldr	r2, [pc, #572]	; (80018f0 <cli_start+0x8a4>)
 80016b2:	460b      	mov	r3, r1
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	440b      	add	r3, r1
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3321      	adds	r3, #33	; 0x21
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	73bb      	strb	r3, [r7, #14]
 80016c2:	e021      	b.n	8001708 <cli_start+0x6bc>
					data[data_num].command_buffer[j]=data[data_num].command_buffer[j+1];
 80016c4:	4b89      	ldr	r3, [pc, #548]	; (80018ec <cli_start+0x8a0>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461d      	mov	r5, r3
 80016ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016ce:	1c59      	adds	r1, r3, #1
 80016d0:	4b86      	ldr	r3, [pc, #536]	; (80018ec <cli_start+0x8a0>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461c      	mov	r4, r3
 80016d6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80016da:	4885      	ldr	r0, [pc, #532]	; (80018f0 <cli_start+0x8a4>)
 80016dc:	462b      	mov	r3, r5
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	442b      	add	r3, r5
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4403      	add	r3, r0
 80016e6:	440b      	add	r3, r1
 80016e8:	7818      	ldrb	r0, [r3, #0]
 80016ea:	4981      	ldr	r1, [pc, #516]	; (80018f0 <cli_start+0x8a4>)
 80016ec:	4623      	mov	r3, r4
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	4423      	add	r3, r4
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	440b      	add	r3, r1
 80016f6:	4413      	add	r3, r2
 80016f8:	4602      	mov	r2, r0
 80016fa:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 80016fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	3301      	adds	r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	73bb      	strb	r3, [r7, #14]
 8001708:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800170c:	4b77      	ldr	r3, [pc, #476]	; (80018ec <cli_start+0x8a0>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	4977      	ldr	r1, [pc, #476]	; (80018f0 <cli_start+0x8a4>)
 8001714:	4603      	mov	r3, r0
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	4403      	add	r3, r0
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	440b      	add	r3, r1
 800171e:	3320      	adds	r3, #32
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	dbce      	blt.n	80016c4 <cli_start+0x678>
				}
				data[data_num].command_buffer[data[data_num].command_index]=0;
 8001726:	4b71      	ldr	r3, [pc, #452]	; (80018ec <cli_start+0x8a0>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <cli_start+0x8a0>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	4a6f      	ldr	r2, [pc, #444]	; (80018f0 <cli_start+0x8a4>)
 8001734:	4603      	mov	r3, r0
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	4403      	add	r3, r0
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	3320      	adds	r3, #32
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <cli_start+0x8a4>)
 8001746:	460b      	mov	r3, r1
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	440b      	add	r3, r1
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	4413      	add	r3, r2
 8001750:	4403      	add	r3, r0
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1D\x1B[1P");
 8001756:	4967      	ldr	r1, [pc, #412]	; (80018f4 <cli_start+0x8a8>)
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff f8f7 	bl	800094c <uart_send>
			}
			break;
 800175e:	e0bb      	b.n	80018d8 <cli_start+0x88c>
		case DEL:
			if(data[data_num].command_index>0 && data[data_num].command_index!=data[data_num].cursor_index){
 8001760:	4b62      	ldr	r3, [pc, #392]	; (80018ec <cli_start+0x8a0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
 8001766:	4a62      	ldr	r2, [pc, #392]	; (80018f0 <cli_start+0x8a4>)
 8001768:	460b      	mov	r3, r1
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	3320      	adds	r3, #32
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80b0 	beq.w	80018dc <cli_start+0x890>
 800177c:	4b5b      	ldr	r3, [pc, #364]	; (80018ec <cli_start+0x8a0>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4a5b      	ldr	r2, [pc, #364]	; (80018f0 <cli_start+0x8a4>)
 8001784:	460b      	mov	r3, r1
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	440b      	add	r3, r1
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	3320      	adds	r3, #32
 8001790:	781a      	ldrb	r2, [r3, #0]
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <cli_start+0x8a0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	4955      	ldr	r1, [pc, #340]	; (80018f0 <cli_start+0x8a4>)
 800179a:	4603      	mov	r3, r0
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4403      	add	r3, r0
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	440b      	add	r3, r1
 80017a4:	3321      	adds	r3, #33	; 0x21
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f000 8097 	beq.w	80018dc <cli_start+0x890>
				data[data_num].command_index--;
 80017ae:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <cli_start+0x8a0>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	494e      	ldr	r1, [pc, #312]	; (80018f0 <cli_start+0x8a4>)
 80017b6:	4613      	mov	r3, r2
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	440b      	add	r3, r1
 80017c0:	3320      	adds	r3, #32
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	b2d8      	uxtb	r0, r3
 80017c8:	4949      	ldr	r1, [pc, #292]	; (80018f0 <cli_start+0x8a4>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	011b      	lsls	r3, r3, #4
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	440b      	add	r3, r1
 80017d4:	3320      	adds	r3, #32
 80017d6:	4602      	mov	r2, r0
 80017d8:	701a      	strb	r2, [r3, #0]
				data[data_num].command_buffer[data[data_num].cursor_index]=0;
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <cli_start+0x8a0>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4619      	mov	r1, r3
 80017e0:	4b42      	ldr	r3, [pc, #264]	; (80018ec <cli_start+0x8a0>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	4a42      	ldr	r2, [pc, #264]	; (80018f0 <cli_start+0x8a4>)
 80017e8:	4603      	mov	r3, r0
 80017ea:	011b      	lsls	r3, r3, #4
 80017ec:	4403      	add	r3, r0
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	3321      	adds	r3, #33	; 0x21
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	4a3d      	ldr	r2, [pc, #244]	; (80018f0 <cli_start+0x8a4>)
 80017fa:	460b      	mov	r3, r1
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	440b      	add	r3, r1
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4413      	add	r3, r2
 8001804:	4403      	add	r3, r0
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <cli_start+0x8a0>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	4a37      	ldr	r2, [pc, #220]	; (80018f0 <cli_start+0x8a4>)
 8001812:	460b      	mov	r3, r1
 8001814:	011b      	lsls	r3, r3, #4
 8001816:	440b      	add	r3, r1
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	3321      	adds	r3, #33	; 0x21
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	737b      	strb	r3, [r7, #13]
 8001822:	e021      	b.n	8001868 <cli_start+0x81c>
					data[data_num].command_buffer[j]=data[data_num].command_buffer[j+1];
 8001824:	4b31      	ldr	r3, [pc, #196]	; (80018ec <cli_start+0x8a0>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461d      	mov	r5, r3
 800182a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800182e:	1c59      	adds	r1, r3, #1
 8001830:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <cli_start+0x8a0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	461c      	mov	r4, r3
 8001836:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800183a:	482d      	ldr	r0, [pc, #180]	; (80018f0 <cli_start+0x8a4>)
 800183c:	462b      	mov	r3, r5
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	442b      	add	r3, r5
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4403      	add	r3, r0
 8001846:	440b      	add	r3, r1
 8001848:	7818      	ldrb	r0, [r3, #0]
 800184a:	4929      	ldr	r1, [pc, #164]	; (80018f0 <cli_start+0x8a4>)
 800184c:	4623      	mov	r3, r4
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4423      	add	r3, r4
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	440b      	add	r3, r1
 8001856:	4413      	add	r3, r2
 8001858:	4602      	mov	r2, r0
 800185a:	701a      	strb	r2, [r3, #0]
				for(int8_t j=data[data_num].cursor_index;j<data[data_num].command_index;j++){
 800185c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	3301      	adds	r3, #1
 8001864:	b2db      	uxtb	r3, r3
 8001866:	737b      	strb	r3, [r7, #13]
 8001868:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <cli_start+0x8a0>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	491f      	ldr	r1, [pc, #124]	; (80018f0 <cli_start+0x8a4>)
 8001874:	4603      	mov	r3, r0
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4403      	add	r3, r0
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	440b      	add	r3, r1
 800187e:	3320      	adds	r3, #32
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbce      	blt.n	8001824 <cli_start+0x7d8>
				}
				data[data_num].command_buffer[data[data_num].command_index]=0;
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <cli_start+0x8a0>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4b17      	ldr	r3, [pc, #92]	; (80018ec <cli_start+0x8a0>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <cli_start+0x8a4>)
 8001894:	4603      	mov	r3, r0
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4403      	add	r3, r0
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	3320      	adds	r3, #32
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <cli_start+0x8a4>)
 80018a6:	460b      	mov	r3, r1
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	440b      	add	r3, r1
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	4413      	add	r3, r2
 80018b0:	4403      	add	r3, r0
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
				uart_send(1,"\x1B[1P");
 80018b6:	4910      	ldr	r1, [pc, #64]	; (80018f8 <cli_start+0x8ac>)
 80018b8:	2001      	movs	r0, #1
 80018ba:	f7ff f847 	bl	800094c <uart_send>
			}
			break;
 80018be:	e00d      	b.n	80018dc <cli_start+0x890>
		default:
			break;
 80018c0:	bf00      	nop
 80018c2:	e00c      	b.n	80018de <cli_start+0x892>
			break;
 80018c4:	bf00      	nop
 80018c6:	e00a      	b.n	80018de <cli_start+0x892>
			break;
 80018c8:	bf00      	nop
 80018ca:	e008      	b.n	80018de <cli_start+0x892>
			break;
 80018cc:	bf00      	nop
 80018ce:	e006      	b.n	80018de <cli_start+0x892>
			break;
 80018d0:	bf00      	nop
 80018d2:	e004      	b.n	80018de <cli_start+0x892>
			break;
 80018d4:	bf00      	nop
 80018d6:	e002      	b.n	80018de <cli_start+0x892>
			break;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <cli_start+0x892>
			break;
 80018dc:	bf00      	nop
	}
	uart_send(2,"\x1B[2J");
 80018de:	4907      	ldr	r1, [pc, #28]	; (80018fc <cli_start+0x8b0>)
 80018e0:	2002      	movs	r0, #2
 80018e2:	f7ff f833 	bl	800094c <uart_send>
	for (int8_t j=0;j<3;j++){
 80018e6:	2300      	movs	r3, #0
 80018e8:	733b      	strb	r3, [r7, #12]
 80018ea:	e01e      	b.n	800192a <cli_start+0x8de>
 80018ec:	2000015a 	.word	0x2000015a
 80018f0:	200000f4 	.word	0x200000f4
 80018f4:	08004df0 	.word	0x08004df0
 80018f8:	08004dfc 	.word	0x08004dfc
 80018fc:	08004cfc 	.word	0x08004cfc
		uart_send(2,"%d. buffer val:%s\n",j,data[j].command_buffer);
 8001900:	f997 100c 	ldrsb.w	r1, [r7, #12]
 8001904:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8001908:	4613      	mov	r3, r2
 800190a:	011b      	lsls	r3, r3, #4
 800190c:	4413      	add	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <cli_start+0x950>)
 8001912:	4413      	add	r3, r2
 8001914:	460a      	mov	r2, r1
 8001916:	4922      	ldr	r1, [pc, #136]	; (80019a0 <cli_start+0x954>)
 8001918:	2002      	movs	r0, #2
 800191a:	f7ff f817 	bl	800094c <uart_send>
	for (int8_t j=0;j<3;j++){
 800191e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3301      	adds	r3, #1
 8001926:	b2db      	uxtb	r3, r3
 8001928:	733b      	strb	r3, [r7, #12]
 800192a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800192e:	2b02      	cmp	r3, #2
 8001930:	dde6      	ble.n	8001900 <cli_start+0x8b4>
	}
	uart_send(2,"\n\n\n");
 8001932:	491c      	ldr	r1, [pc, #112]	; (80019a4 <cli_start+0x958>)
 8001934:	2002      	movs	r0, #2
 8001936:	f7ff f809 	bl	800094c <uart_send>
	uart_send(2,"num %d command buffer val:%s\n",data_num,data[data_num].command_buffer);
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <cli_start+0x95c>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	4619      	mov	r1, r3
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <cli_start+0x95c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <cli_start+0x950>)
 8001950:	4413      	add	r3, r2
 8001952:	460a      	mov	r2, r1
 8001954:	4915      	ldr	r1, [pc, #84]	; (80019ac <cli_start+0x960>)
 8001956:	2002      	movs	r0, #2
 8001958:	f7fe fff8 	bl	800094c <uart_send>
	uart_send(2,"command index:%d cursor index:%d\n",data[data_num].command_index,data[data_num].cursor_index);
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <cli_start+0x95c>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4619      	mov	r1, r3
 8001962:	4a0e      	ldr	r2, [pc, #56]	; (800199c <cli_start+0x950>)
 8001964:	460b      	mov	r3, r1
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	440b      	add	r3, r1
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	3320      	adds	r3, #32
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <cli_start+0x95c>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	4a08      	ldr	r2, [pc, #32]	; (800199c <cli_start+0x950>)
 800197c:	460b      	mov	r3, r1
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	440b      	add	r3, r1
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	3321      	adds	r3, #33	; 0x21
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	4602      	mov	r2, r0
 800198c:	4908      	ldr	r1, [pc, #32]	; (80019b0 <cli_start+0x964>)
 800198e:	2002      	movs	r0, #2
 8001990:	f7fe ffdc 	bl	800094c <uart_send>
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199c:	200000f4 	.word	0x200000f4
 80019a0:	08004e04 	.word	0x08004e04
 80019a4:	08004e18 	.word	0x08004e18
 80019a8:	2000015a 	.word	0x2000015a
 80019ac:	08004e1c 	.word	0x08004e1c
 80019b0:	08004e3c 	.word	0x08004e3c

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f000 faa5 	bl	8001f08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f87b 	bl	8001ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c2:	f7fe ff6b 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 80019c6:	f7fe ff4b 	bl	8000860 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80019ca:	f000 f975 	bl	8001cb8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019ce:	f000 f99d 	bl	8001d0c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80019d2:	f7fe fecb 	bl	800076c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1,&command_tx[0],5);
 80019d6:	2205      	movs	r2, #5
 80019d8:	4930      	ldr	r1, [pc, #192]	; (8001a9c <main+0xe8>)
 80019da:	4831      	ldr	r0, [pc, #196]	; (8001aa0 <main+0xec>)
 80019dc:	f002 fa3a 	bl	8003e54 <UART_Start_Receive_DMA>
  HAL_ADC_Start(&hadc1);
 80019e0:	4830      	ldr	r0, [pc, #192]	; (8001aa4 <main+0xf0>)
 80019e2:	f000 fbef 	bl	80021c4 <HAL_ADC_Start>
  uint32_t pre_time1=HAL_GetTick();
 80019e6:	f000 fae7 	bl	8001fb8 <HAL_GetTick>
 80019ea:	4603      	mov	r3, r0
 80019ec:	60bb      	str	r3, [r7, #8]
  uint32_t pre_time2=HAL_GetTick();
 80019ee:	f000 fae3 	bl	8001fb8 <HAL_GetTick>
 80019f2:	4603      	mov	r3, r0
 80019f4:	607b      	str	r3, [r7, #4]
  for (int8_t i=0;i<3;i++){
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	e012      	b.n	8001a22 <main+0x6e>
	  memset(data[i].command_buffer,0,32);
 80019fc:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	4413      	add	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4a27      	ldr	r2, [pc, #156]	; (8001aa8 <main+0xf4>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2220      	movs	r2, #32
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f002 fc0b 	bl	800422c <memset>
  for (int8_t i=0;i<3;i++){
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	dde8      	ble.n	80019fc <main+0x48>
  }
  memset(send_buffer,0,32);
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	481f      	ldr	r0, [pc, #124]	; (8001aac <main+0xf8>)
 8001a30:	f002 fbfc 	bl	800422c <memset>
  uart_send(1,"CLI-# ");
 8001a34:	491e      	ldr	r1, [pc, #120]	; (8001ab0 <main+0xfc>)
 8001a36:	2001      	movs	r0, #1
 8001a38:	f7fe ff88 	bl	800094c <uart_send>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t i=0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73bb      	strb	r3, [r7, #14]
	keytype key=KEY_NONE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	737b      	strb	r3, [r7, #13]
	for (;;){
		i=i%5;
 8001a44:	7bba      	ldrb	r2, [r7, #14]
 8001a46:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <main+0x100>)
 8001a48:	fba3 1302 	umull	r1, r3, r3, r2
 8001a4c:	0899      	lsrs	r1, r3, #2
 8001a4e:	460b      	mov	r3, r1
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	73bb      	strb	r3, [r7, #14]
		gpio_led_toggle(&pre_time1,&pre_time2);
 8001a58:	1d3a      	adds	r2, r7, #4
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fab1 	bl	8000fc8 <gpio_led_toggle>
		key=is_command(&command_tx[0],i);
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	480c      	ldr	r0, [pc, #48]	; (8001a9c <main+0xe8>)
 8001a6c:	f7fe ffa2 	bl	80009b4 <is_command>
 8001a70:	4603      	mov	r3, r0
 8001a72:	737b      	strb	r3, [r7, #13]
		if (key!=KEY_NONE){
 8001a74:	7b7b      	ldrb	r3, [r7, #13]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d103      	bne.n	8001a82 <main+0xce>
			break;
		}
		i++;
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	73bb      	strb	r3, [r7, #14]
		i=i%5;
 8001a80:	e7e0      	b.n	8001a44 <main+0x90>
			break;
 8001a82:	bf00      	nop
	  }
	cli_start(i,key);
 8001a84:	7b7a      	ldrb	r2, [r7, #13]
 8001a86:	7bbb      	ldrb	r3, [r7, #14]
 8001a88:	4611      	mov	r1, r2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fade 	bl	800104c <cli_start>
	memset(command_tx,0,5);
 8001a90:	2205      	movs	r2, #5
 8001a92:	2100      	movs	r1, #0
 8001a94:	4801      	ldr	r0, [pc, #4]	; (8001a9c <main+0xe8>)
 8001a96:	f002 fbc9 	bl	800422c <memset>
  {
 8001a9a:	e7cf      	b.n	8001a3c <main+0x88>
 8001a9c:	200000ac 	.word	0x200000ac
 8001aa0:	20000164 	.word	0x20000164
 8001aa4:	2000007c 	.word	0x2000007c
 8001aa8:	200000f4 	.word	0x200000f4
 8001aac:	200000b4 	.word	0x200000b4
 8001ab0:	08004e60 	.word	0x08004e60
 8001ab4:	cccccccd 	.word	0xcccccccd

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b094      	sub	sp, #80	; 0x50
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac2:	2228      	movs	r2, #40	; 0x28
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f002 fbb0 	bl	800422c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af6:	2301      	movs	r3, #1
 8001af8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001afa:	2302      	movs	r3, #2
 8001afc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b04:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 fa58 	bl	8002fc4 <HAL_RCC_OscConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b1a:	f000 f828 	bl	8001b6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1e:	230f      	movs	r3, #15
 8001b20:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2102      	movs	r1, #2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f001 fcc4 	bl	80034c8 <HAL_RCC_ClockConfig>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001b46:	f000 f812 	bl	8001b6e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b52:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4618      	mov	r0, r3
 8001b58:	f001 fe44 	bl	80037e4 <HAL_RCCEx_PeriphCLKConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001b62:	f000 f804 	bl	8001b6e <Error_Handler>
  }
}
 8001b66:	bf00      	nop
 8001b68:	3750      	adds	r7, #80	; 0x50
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b72:	b672      	cpsid	i
}
 8001b74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b76:	e7fe      	b.n	8001b76 <Error_Handler+0x8>

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6193      	str	r3, [r2, #24]
 8001b8a:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_MspInit+0x5c>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_MspInit+0x60>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_MspInit+0x60>)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	3714      	adds	r7, #20
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	40010000 	.word	0x40010000

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be0:	e7fe      	b.n	8001be0 <NMI_Handler+0x4>

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <MemManage_Handler+0x4>

08001bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bc80      	pop	{r7}
 8001c04:	4770      	bx	lr

08001c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr

08001c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c22:	f000 f9b7 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c30:	4802      	ldr	r0, [pc, #8]	; (8001c3c <DMA1_Channel5_IRQHandler+0x10>)
 8001c32:	f000 fedd 	bl	80029f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200001f4 	.word	0x200001f4

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f002 fae4 	bl	800423c <__errno>
 8001c74:	4603      	mov	r3, r0
 8001c76:	220c      	movs	r2, #12
 8001c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20005000 	.word	0x20005000
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	20000160 	.word	0x20000160
 8001ca8:	20000388 	.word	0x20000388

08001cac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	; (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	; (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cf0:	f001 fe2e 	bl	8003950 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f7ff ff38 	bl	8001b6e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000164 	.word	0x20000164
 8001d08:	40013800 	.word	0x40013800

08001d0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <MX_USART2_UART_Init+0x50>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d44:	f001 fe04 	bl	8003950 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d4e:	f7ff ff0e 	bl	8001b6e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200001ac 	.word	0x200001ac
 8001d5c:	40004400 	.word	0x40004400

08001d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0318 	add.w	r3, r7, #24
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_UART_MspInit+0x144>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d158      	bne.n	8001e32 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a48      	ldr	r2, [pc, #288]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001d9e:	f043 0304 	orr.w	r3, r3, #4
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001db0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4839      	ldr	r0, [pc, #228]	; (8001eac <HAL_UART_MspInit+0x14c>)
 8001dc6:	f000 ff47 	bl	8002c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0318 	add.w	r3, r7, #24
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4833      	ldr	r0, [pc, #204]	; (8001eac <HAL_UART_MspInit+0x14c>)
 8001de0:	f000 ff3a 	bl	8002c58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001de4:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001de6:	4a33      	ldr	r2, [pc, #204]	; (8001eb4 <HAL_UART_MspInit+0x154>)
 8001de8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df0:	4b2f      	ldr	r3, [pc, #188]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001df6:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e02:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e08:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e0e:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e14:	4826      	ldr	r0, [pc, #152]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001e16:	f000 fd31 	bl	800287c <HAL_DMA_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001e20:	f7ff fea5 	bl	8001b6e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001e28:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e2a:	4a21      	ldr	r2, [pc, #132]	; (8001eb0 <HAL_UART_MspInit+0x150>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e30:	e034      	b.n	8001e9c <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a20      	ldr	r2, [pc, #128]	; (8001eb8 <HAL_UART_MspInit+0x158>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d12f      	bne.n	8001e9c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e46:	61d3      	str	r3, [r2, #28]
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6193      	str	r3, [r2, #24]
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_UART_MspInit+0x148>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480b      	ldr	r0, [pc, #44]	; (8001eac <HAL_UART_MspInit+0x14c>)
 8001e80:	f000 feea 	bl	8002c58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e84:	2308      	movs	r3, #8
 8001e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4805      	ldr	r0, [pc, #20]	; (8001eac <HAL_UART_MspInit+0x14c>)
 8001e98:	f000 fede 	bl	8002c58 <HAL_GPIO_Init>
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40013800 	.word	0x40013800
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	200001f4 	.word	0x200001f4
 8001eb4:	40020058 	.word	0x40020058
 8001eb8:	40004400 	.word	0x40004400

08001ebc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ebc:	f7ff fef6 	bl	8001cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ec2:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a09      	ldr	r2, [pc, #36]	; (8001efc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ed8:	4c09      	ldr	r4, [pc, #36]	; (8001f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f002 f9af 	bl	8004248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eea:	f7ff fd63 	bl	80019b4 <main>
  bx lr
 8001eee:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ef8:	08004ed0 	.word	0x08004ed0
  ldr r2, =_sbss
 8001efc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001f00:	20000384 	.word	0x20000384

08001f04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_2_IRQHandler>
	...

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_Init+0x28>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_Init+0x28>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 fc6d 	bl	80027f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f000 f808 	bl	8001f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff fe28 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x54>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fc85 	bl	8002862 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f000 fc4d 	bl	800280e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_InitTick+0x5c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000004 	.word	0x20000004
 8001f8c:	2000000c 	.word	0x2000000c
 8001f90:	20000008 	.word	0x20000008

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x1c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	2000000c 	.word	0x2000000c
 8001fb4:	20000238 	.word	0x20000238

08001fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_GetTick+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000238 	.word	0x20000238

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffe0 	bl	8001fb8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000000c 	.word	0x2000000c

08002014 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e0be      	b.n	80021b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fbc8 	bl	80007e8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fabf 	bl	80025dc <ADC_ConversionStop_Disable>
 800205e:	4603      	mov	r3, r0
 8002060:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 8099 	bne.w	80021a2 <HAL_ADC_Init+0x18e>
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f040 8095 	bne.w	80021a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002080:	f023 0302 	bic.w	r3, r3, #2
 8002084:	f043 0202 	orr.w	r2, r3, #2
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002094:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	7b1b      	ldrb	r3, [r3, #12]
 800209a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800209c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ac:	d003      	beq.n	80020b6 <HAL_ADC_Init+0xa2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_ADC_Init+0xa8>
 80020b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ba:	e000      	b.n	80020be <HAL_ADC_Init+0xaa>
 80020bc:	2300      	movs	r3, #0
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	7d1b      	ldrb	r3, [r3, #20]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d119      	bne.n	8002100 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7b1b      	ldrb	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	3b01      	subs	r3, #1
 80020da:	035a      	lsls	r2, r3, #13
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	e00b      	b.n	8002100 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f043 0220 	orr.w	r2, r3, #32
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	f043 0201 	orr.w	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	4b28      	ldr	r3, [pc, #160]	; (80021bc <HAL_ADC_Init+0x1a8>)
 800211c:	4013      	ands	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	68b9      	ldr	r1, [r7, #8]
 8002124:	430b      	orrs	r3, r1
 8002126:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002130:	d003      	beq.n	800213a <HAL_ADC_Init+0x126>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d104      	bne.n	8002144 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	3b01      	subs	r3, #1
 8002140:	051b      	lsls	r3, r3, #20
 8002142:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	430a      	orrs	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_ADC_Init+0x1ac>)
 8002160:	4013      	ands	r3, r2
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d10b      	bne.n	8002180 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800217e:	e018      	b.n	80021b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	f023 0312 	bic.w	r3, r3, #18
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021a0:	e007      	b.n	80021b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f043 0210 	orr.w	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	ffe1f7fd 	.word	0xffe1f7fd
 80021c0:	ff1f0efe 	.word	0xff1f0efe

080021c4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021cc:	2300      	movs	r3, #0
 80021ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_ADC_Start+0x1a>
 80021da:	2302      	movs	r3, #2
 80021dc:	e098      	b.n	8002310 <HAL_ADC_Start+0x14c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f99e 	bl	8002528 <ADC_Enable>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8087 	bne.w	8002306 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a41      	ldr	r2, [pc, #260]	; (8002318 <HAL_ADC_Start+0x154>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d105      	bne.n	8002222 <HAL_ADC_Start+0x5e>
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_ADC_Start+0x158>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d115      	bne.n	800224e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	2b00      	cmp	r3, #0
 800223a:	d026      	beq.n	800228a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002244:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800224c:	e01d      	b.n	800228a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2f      	ldr	r2, [pc, #188]	; (800231c <HAL_ADC_Start+0x158>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_ADC_Start+0xaa>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_ADC_Start+0x154>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10d      	bne.n	800228a <HAL_ADC_Start+0xc6>
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_ADC_Start+0x158>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d007      	beq.n	800228a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002282:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	f023 0206 	bic.w	r2, r3, #6
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80022a2:	e002      	b.n	80022aa <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f06f 0202 	mvn.w	r2, #2
 80022ba:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022ca:	d113      	bne.n	80022f4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_ADC_Start+0x154>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d105      	bne.n	80022e2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_ADC_Start+0x158>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	e00c      	b.n	800230e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e003      	b.n	800230e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40012800 	.word	0x40012800
 800231c:	40012400 	.word	0x40012400

08002320 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x20>
 8002354:	2302      	movs	r3, #2
 8002356:	e0dc      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1da>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d81c      	bhi.n	80023a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b05      	subs	r3, #5
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b05      	subs	r3, #5
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	; 0x34
 80023a0:	e03c      	b.n	800241c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d81c      	bhi.n	80023e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b23      	subs	r3, #35	; 0x23
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4019      	ands	r1, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	; 0x23
 80023d6:	fa00 f203 	lsl.w	r2, r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
 80023e2:	e01b      	b.n	800241c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b41      	subs	r3, #65	; 0x41
 80023f6:	221f      	movs	r2, #31
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4019      	ands	r1, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b41      	subs	r3, #65	; 0x41
 8002410:	fa00 f203 	lsl.w	r2, r0, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d91c      	bls.n	800245e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68d9      	ldr	r1, [r3, #12]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	3b1e      	subs	r3, #30
 8002436:	2207      	movs	r2, #7
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6898      	ldr	r0, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	3b1e      	subs	r3, #30
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	e019      	b.n	8002492 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6919      	ldr	r1, [r3, #16]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6898      	ldr	r0, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b10      	cmp	r3, #16
 8002498:	d003      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800249e:	2b11      	cmp	r3, #17
 80024a0:	d132      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_ADC_ConfigChannel+0x1e4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d125      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d126      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d11a      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_ADC_ConfigChannel+0x1e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <HAL_ADC_ConfigChannel+0x1ec>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x1b2>
 80024f6:	e007      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	40012400 	.word	0x40012400
 8002520:	20000004 	.word	0x20000004
 8002524:	431bde83 	.word	0x431bde83

08002528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d040      	beq.n	80025c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <ADC_Enable+0xac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <ADC_Enable+0xb0>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	0c9b      	lsrs	r3, r3, #18
 8002562:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002564:	e002      	b.n	800256c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3b01      	subs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002572:	f7ff fd21 	bl	8001fb8 <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002578:	e01f      	b.n	80025ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800257a:	f7ff fd1d 	bl	8001fb8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d918      	bls.n	80025ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d011      	beq.n	80025ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	f043 0210 	orr.w	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e007      	b.n	80025ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d1d8      	bne.n	800257a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000004 	.word	0x20000004
 80025d8:	431bde83 	.word	0x431bde83

080025dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12e      	bne.n	8002654 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002606:	f7ff fcd7 	bl	8001fb8 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800260c:	e01b      	b.n	8002646 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800260e:	f7ff fcd3 	bl	8001fb8 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d914      	bls.n	8002646 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10d      	bne.n	8002646 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e007      	b.n	8002656 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d0dc      	beq.n	800260e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002670:	4b0c      	ldr	r3, [pc, #48]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800267c:	4013      	ands	r3, r2
 800267e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800268c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002692:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	60d3      	str	r3, [r2, #12]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	0a1b      	lsrs	r3, r3, #8
 80026b2:	f003 0307 	and.w	r3, r3, #7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	db0b      	blt.n	80026ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	f003 021f 	and.w	r2, r3, #31
 80026dc:	4906      	ldr	r1, [pc, #24]	; (80026f8 <__NVIC_EnableIRQ+0x34>)
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	2001      	movs	r0, #1
 80026e6:	fa00 f202 	lsl.w	r2, r0, r2
 80026ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	; (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	; (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3b01      	subs	r3, #1
 80027c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c4:	d301      	bcc.n	80027ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027c6:	2301      	movs	r3, #1
 80027c8:	e00f      	b.n	80027ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <SysTick_Config+0x40>)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d2:	210f      	movs	r1, #15
 80027d4:	f04f 30ff 	mov.w	r0, #4294967295
 80027d8:	f7ff ff90 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <SysTick_Config+0x40>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <SysTick_Config+0x40>)
 80027e4:	2207      	movs	r2, #7
 80027e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	e000e010 	.word	0xe000e010

080027f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ff2d 	bl	8002660 <__NVIC_SetPriorityGrouping>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800280e:	b580      	push	{r7, lr}
 8002810:	b086      	sub	sp, #24
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002820:	f7ff ff42 	bl	80026a8 <__NVIC_GetPriorityGrouping>
 8002824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	6978      	ldr	r0, [r7, #20]
 800282c:	f7ff ff90 	bl	8002750 <NVIC_EncodePriority>
 8002830:	4602      	mov	r2, r0
 8002832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff5f 	bl	80026fc <__NVIC_SetPriority>
}
 800283e:	bf00      	nop
 8002840:	3718      	adds	r7, #24
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff35 	bl	80026c4 <__NVIC_EnableIRQ>
}
 800285a:	bf00      	nop
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ffa2 	bl	80027b4 <SysTick_Config>
 8002870:	4603      	mov	r3, r0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e043      	b.n	800291a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	461a      	mov	r2, r3
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_DMA_Init+0xa8>)
 800289a:	4413      	add	r3, r2
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_DMA_Init+0xac>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	009a      	lsls	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a1f      	ldr	r2, [pc, #124]	; (800292c <HAL_DMA_Init+0xb0>)
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80028c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80028d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	bffdfff8 	.word	0xbffdfff8
 8002928:	cccccccd 	.word	0xcccccccd
 800292c:	40020000 	.word	0x40020000

08002930 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_DMA_Start_IT+0x20>
 800294c:	2302      	movs	r3, #2
 800294e:	e04b      	b.n	80029e8 <HAL_DMA_Start_IT+0xb8>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d13a      	bne.n	80029da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0201 	bic.w	r2, r2, #1
 8002980:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68b9      	ldr	r1, [r7, #8]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f937 	bl	8002bfc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	2b00      	cmp	r3, #0
 8002994:	d008      	beq.n	80029a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 020e 	orr.w	r2, r2, #14
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e00f      	b.n	80029c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 020a 	orr.w	r2, r2, #10
 80029c6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	e005      	b.n	80029e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
 80029e4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d04f      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xc8>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d04a      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0320 	and.w	r3, r3, #32
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a66      	ldr	r2, [pc, #408]	; (8002be0 <HAL_DMA_IRQHandler+0x1f0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d029      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xae>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a65      	ldr	r2, [pc, #404]	; (8002be4 <HAL_DMA_IRQHandler+0x1f4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d022      	beq.n	8002a9a <HAL_DMA_IRQHandler+0xaa>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a63      	ldr	r2, [pc, #396]	; (8002be8 <HAL_DMA_IRQHandler+0x1f8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0xa4>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a62      	ldr	r2, [pc, #392]	; (8002bec <HAL_DMA_IRQHandler+0x1fc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d012      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x9e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a60      	ldr	r2, [pc, #384]	; (8002bf0 <HAL_DMA_IRQHandler+0x200>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00a      	beq.n	8002a88 <HAL_DMA_IRQHandler+0x98>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5f      	ldr	r2, [pc, #380]	; (8002bf4 <HAL_DMA_IRQHandler+0x204>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d102      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x92>
 8002a7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a80:	e00e      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002a86:	e00b      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002a8c:	e008      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a92:	e005      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a98:	e002      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a9a:	2340      	movs	r3, #64	; 0x40
 8002a9c:	e000      	b.n	8002aa0 <HAL_DMA_IRQHandler+0xb0>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	4a55      	ldr	r2, [pc, #340]	; (8002bf8 <HAL_DMA_IRQHandler+0x208>)
 8002aa2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 8094 	beq.w	8002bd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ab6:	e08e      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	2202      	movs	r2, #2
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d056      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x186>
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d051      	beq.n	8002b76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10b      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 020a 	bic.w	r2, r2, #10
 8002aee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a38      	ldr	r2, [pc, #224]	; (8002be0 <HAL_DMA_IRQHandler+0x1f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d029      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x166>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <HAL_DMA_IRQHandler+0x1f4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_IRQHandler+0x162>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a35      	ldr	r2, [pc, #212]	; (8002be8 <HAL_DMA_IRQHandler+0x1f8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01a      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x15c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a34      	ldr	r2, [pc, #208]	; (8002bec <HAL_DMA_IRQHandler+0x1fc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d012      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x156>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a32      	ldr	r2, [pc, #200]	; (8002bf0 <HAL_DMA_IRQHandler+0x200>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00a      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x150>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a31      	ldr	r2, [pc, #196]	; (8002bf4 <HAL_DMA_IRQHandler+0x204>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d102      	bne.n	8002b3a <HAL_DMA_IRQHandler+0x14a>
 8002b34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b38:	e00e      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b3e:	e00b      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b44:	e008      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b4a:	e005      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b50:	e002      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b52:	2320      	movs	r3, #32
 8002b54:	e000      	b.n	8002b58 <HAL_DMA_IRQHandler+0x168>
 8002b56:	2302      	movs	r3, #2
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <HAL_DMA_IRQHandler+0x208>)
 8002b5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d034      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b74:	e02f      	b.n	8002bd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d028      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x1e8>
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d023      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 020e 	bic.w	r2, r2, #14
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f202 	lsl.w	r2, r1, r2
 8002bae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	4798      	blx	r3
    }
  }
  return;
 8002bd6:	bf00      	nop
 8002bd8:	bf00      	nop
}
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40020008 	.word	0x40020008
 8002be4:	4002001c 	.word	0x4002001c
 8002be8:	40020030 	.word	0x40020030
 8002bec:	40020044 	.word	0x40020044
 8002bf0:	40020058 	.word	0x40020058
 8002bf4:	4002006c 	.word	0x4002006c
 8002bf8:	40020000 	.word	0x40020000

08002bfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c12:	2101      	movs	r1, #1
 8002c14:	fa01 f202 	lsl.w	r2, r1, r2
 8002c18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d108      	bne.n	8002c3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c3a:	e007      	b.n	8002c4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	60da      	str	r2, [r3, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b08b      	sub	sp, #44	; 0x2c
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c62:	2300      	movs	r3, #0
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6a:	e169      	b.n	8002f40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	f040 8158 	bne.w	8002f3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4a9a      	ldr	r2, [pc, #616]	; (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d05e      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002c94:	4a98      	ldr	r2, [pc, #608]	; (8002ef8 <HAL_GPIO_Init+0x2a0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d875      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002c9a:	4a98      	ldr	r2, [pc, #608]	; (8002efc <HAL_GPIO_Init+0x2a4>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d058      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002ca0:	4a96      	ldr	r2, [pc, #600]	; (8002efc <HAL_GPIO_Init+0x2a4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d86f      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a96      	ldr	r2, [pc, #600]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d052      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cac:	4a94      	ldr	r2, [pc, #592]	; (8002f00 <HAL_GPIO_Init+0x2a8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d869      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a94      	ldr	r2, [pc, #592]	; (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d04c      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cb8:	4a92      	ldr	r2, [pc, #584]	; (8002f04 <HAL_GPIO_Init+0x2ac>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d863      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a92      	ldr	r2, [pc, #584]	; (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d046      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
 8002cc4:	4a90      	ldr	r2, [pc, #576]	; (8002f08 <HAL_GPIO_Init+0x2b0>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d85d      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cca:	2b12      	cmp	r3, #18
 8002ccc:	d82a      	bhi.n	8002d24 <HAL_GPIO_Init+0xcc>
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d859      	bhi.n	8002d86 <HAL_GPIO_Init+0x12e>
 8002cd2:	a201      	add	r2, pc, #4	; (adr r2, 8002cd8 <HAL_GPIO_Init+0x80>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002d53 	.word	0x08002d53
 8002cdc:	08002d2d 	.word	0x08002d2d
 8002ce0:	08002d3f 	.word	0x08002d3f
 8002ce4:	08002d81 	.word	0x08002d81
 8002ce8:	08002d87 	.word	0x08002d87
 8002cec:	08002d87 	.word	0x08002d87
 8002cf0:	08002d87 	.word	0x08002d87
 8002cf4:	08002d87 	.word	0x08002d87
 8002cf8:	08002d87 	.word	0x08002d87
 8002cfc:	08002d87 	.word	0x08002d87
 8002d00:	08002d87 	.word	0x08002d87
 8002d04:	08002d87 	.word	0x08002d87
 8002d08:	08002d87 	.word	0x08002d87
 8002d0c:	08002d87 	.word	0x08002d87
 8002d10:	08002d87 	.word	0x08002d87
 8002d14:	08002d87 	.word	0x08002d87
 8002d18:	08002d87 	.word	0x08002d87
 8002d1c:	08002d35 	.word	0x08002d35
 8002d20:	08002d49 	.word	0x08002d49
 8002d24:	4a79      	ldr	r2, [pc, #484]	; (8002f0c <HAL_GPIO_Init+0x2b4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d2a:	e02c      	b.n	8002d86 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	623b      	str	r3, [r7, #32]
          break;
 8002d32:	e029      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	623b      	str	r3, [r7, #32]
          break;
 8002d3c:	e024      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	3308      	adds	r3, #8
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e01f      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	623b      	str	r3, [r7, #32]
          break;
 8002d50:	e01a      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d5a:	2304      	movs	r3, #4
 8002d5c:	623b      	str	r3, [r7, #32]
          break;
 8002d5e:	e013      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d105      	bne.n	8002d74 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	611a      	str	r2, [r3, #16]
          break;
 8002d72:	e009      	b.n	8002d88 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	615a      	str	r2, [r3, #20]
          break;
 8002d7e:	e003      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d80:	2300      	movs	r3, #0
 8002d82:	623b      	str	r3, [r7, #32]
          break;
 8002d84:	e000      	b.n	8002d88 <HAL_GPIO_Init+0x130>
          break;
 8002d86:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	2bff      	cmp	r3, #255	; 0xff
 8002d8c:	d801      	bhi.n	8002d92 <HAL_GPIO_Init+0x13a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	e001      	b.n	8002d96 <HAL_GPIO_Init+0x13e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	3304      	adds	r3, #4
 8002d96:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2bff      	cmp	r3, #255	; 0xff
 8002d9c:	d802      	bhi.n	8002da4 <HAL_GPIO_Init+0x14c>
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	e002      	b.n	8002daa <HAL_GPIO_Init+0x152>
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	3b08      	subs	r3, #8
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	210f      	movs	r1, #15
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	401a      	ands	r2, r3
 8002dbc:	6a39      	ldr	r1, [r7, #32]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80b1 	beq.w	8002f3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	4a4c      	ldr	r2, [pc, #304]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6193      	str	r3, [r2, #24]
 8002de4:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
 8002dee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002df0:	4a48      	ldr	r2, [pc, #288]	; (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	3302      	adds	r3, #2
 8002df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dfc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	220f      	movs	r2, #15
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <HAL_GPIO_Init+0x2c0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_GPIO_Init+0x1ec>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a3f      	ldr	r2, [pc, #252]	; (8002f1c <HAL_GPIO_Init+0x2c4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00d      	beq.n	8002e40 <HAL_GPIO_Init+0x1e8>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a3e      	ldr	r2, [pc, #248]	; (8002f20 <HAL_GPIO_Init+0x2c8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d007      	beq.n	8002e3c <HAL_GPIO_Init+0x1e4>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a3d      	ldr	r2, [pc, #244]	; (8002f24 <HAL_GPIO_Init+0x2cc>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d101      	bne.n	8002e38 <HAL_GPIO_Init+0x1e0>
 8002e34:	2303      	movs	r3, #3
 8002e36:	e006      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e004      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e002      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e40:	2301      	movs	r3, #1
 8002e42:	e000      	b.n	8002e46 <HAL_GPIO_Init+0x1ee>
 8002e44:	2300      	movs	r3, #0
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	f002 0203 	and.w	r2, r2, #3
 8002e4c:	0092      	lsls	r2, r2, #2
 8002e4e:	4093      	lsls	r3, r2
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e56:	492f      	ldr	r1, [pc, #188]	; (8002f14 <HAL_GPIO_Init+0x2bc>)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	089b      	lsrs	r3, r3, #2
 8002e5c:	3302      	adds	r3, #2
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d006      	beq.n	8002e7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e70:	4b2d      	ldr	r3, [pc, #180]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	492c      	ldr	r1, [pc, #176]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
 8002e7c:	e006      	b.n	8002e8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e7e:	4b2a      	ldr	r3, [pc, #168]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	43db      	mvns	r3, r3
 8002e86:	4928      	ldr	r1, [pc, #160]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d006      	beq.n	8002ea6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	4922      	ldr	r1, [pc, #136]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60cb      	str	r3, [r1, #12]
 8002ea4:	e006      	b.n	8002eb4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	491e      	ldr	r1, [pc, #120]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	4918      	ldr	r1, [pc, #96]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	604b      	str	r3, [r1, #4]
 8002ecc:	e006      	b.n	8002edc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ece:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	4914      	ldr	r1, [pc, #80]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d021      	beq.n	8002f2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <HAL_GPIO_Init+0x2d0>)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e021      	b.n	8002f3a <HAL_GPIO_Init+0x2e2>
 8002ef6:	bf00      	nop
 8002ef8:	10320000 	.word	0x10320000
 8002efc:	10310000 	.word	0x10310000
 8002f00:	10220000 	.word	0x10220000
 8002f04:	10210000 	.word	0x10210000
 8002f08:	10120000 	.word	0x10120000
 8002f0c:	10110000 	.word	0x10110000
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40010800 	.word	0x40010800
 8002f1c:	40010c00 	.word	0x40010c00
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40011400 	.word	0x40011400
 8002f28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_GPIO_Init+0x304>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	43db      	mvns	r3, r3
 8002f34:	4909      	ldr	r1, [pc, #36]	; (8002f5c <HAL_GPIO_Init+0x304>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	fa22 f303 	lsr.w	r3, r2, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f47f ae8e 	bne.w	8002c6c <HAL_GPIO_Init+0x14>
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	372c      	adds	r7, #44	; 0x2c
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	40010400 	.word	0x40010400

08002f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f70:	787b      	ldrb	r3, [r7, #1]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f76:	887a      	ldrh	r2, [r7, #2]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f7c:	e003      	b.n	8002f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f7e:	887b      	ldrh	r3, [r7, #2]
 8002f80:	041a      	lsls	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fa2:	887a      	ldrh	r2, [r7, #2]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	041a      	lsls	r2, r3, #16
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	43d9      	mvns	r1, r3
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	611a      	str	r2, [r3, #16]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e272      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 8087 	beq.w	80030f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe4:	4b92      	ldr	r3, [pc, #584]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d00c      	beq.n	800300a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff0:	4b8f      	ldr	r3, [pc, #572]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d112      	bne.n	8003022 <HAL_RCC_OscConfig+0x5e>
 8002ffc:	4b8c      	ldr	r3, [pc, #560]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d10b      	bne.n	8003022 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300a:	4b89      	ldr	r3, [pc, #548]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d06c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x12c>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d168      	bne.n	80030f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e24c      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302a:	d106      	bne.n	800303a <HAL_RCC_OscConfig+0x76>
 800302c:	4b80      	ldr	r3, [pc, #512]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a7f      	ldr	r2, [pc, #508]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	e02e      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10c      	bne.n	800305c <HAL_RCC_OscConfig+0x98>
 8003042:	4b7b      	ldr	r3, [pc, #492]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7a      	ldr	r2, [pc, #488]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	4b78      	ldr	r3, [pc, #480]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a77      	ldr	r2, [pc, #476]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	e01d      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003064:	d10c      	bne.n	8003080 <HAL_RCC_OscConfig+0xbc>
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a71      	ldr	r2, [pc, #452]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800306c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a6e      	ldr	r2, [pc, #440]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e00b      	b.n	8003098 <HAL_RCC_OscConfig+0xd4>
 8003080:	4b6b      	ldr	r3, [pc, #428]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a6a      	ldr	r2, [pc, #424]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b68      	ldr	r3, [pc, #416]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a67      	ldr	r2, [pc, #412]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d013      	beq.n	80030c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe ff8a 	bl	8001fb8 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe ff86 	bl	8001fb8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e200      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ba:	4b5d      	ldr	r3, [pc, #372]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0xe4>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe ff76 	bl	8001fb8 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe ff72 	bl	8001fb8 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e1ec      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030e2:	4b53      	ldr	r3, [pc, #332]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x10c>
 80030ee:	e000      	b.n	80030f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d063      	beq.n	80031c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800310a:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d11c      	bne.n	8003150 <HAL_RCC_OscConfig+0x18c>
 8003116:	4b46      	ldr	r3, [pc, #280]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d116      	bne.n	8003150 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003122:	4b43      	ldr	r3, [pc, #268]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d005      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e1c0      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313a:	4b3d      	ldr	r3, [pc, #244]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4939      	ldr	r1, [pc, #228]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800314a:	4313      	orrs	r3, r2
 800314c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	e03a      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003158:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x270>)
 800315a:	2201      	movs	r2, #1
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe ff2b 	bl	8001fb8 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f7fe ff27 	bl	8001fb8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e1a1      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003178:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4927      	ldr	r1, [pc, #156]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
 8003198:	e015      	b.n	80031c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x270>)
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7fe ff0a 	bl	8001fb8 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a8:	f7fe ff06 	bl	8001fb8 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e180      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f0      	bne.n	80031a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d03a      	beq.n	8003248 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d019      	beq.n	800320e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e0:	f7fe feea 	bl	8001fb8 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e8:	f7fe fee6 	bl	8001fb8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e160      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <HAL_RCC_OscConfig+0x26c>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003206:	2001      	movs	r0, #1
 8003208:	f000 face 	bl	80037a8 <RCC_Delay>
 800320c:	e01c      	b.n	8003248 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <HAL_RCC_OscConfig+0x274>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003214:	f7fe fed0 	bl	8001fb8 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321a:	e00f      	b.n	800323c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321c:	f7fe fecc 	bl	8001fb8 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d908      	bls.n	800323c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e146      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000
 8003234:	42420000 	.word	0x42420000
 8003238:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b92      	ldr	r3, [pc, #584]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e9      	bne.n	800321c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a6 	beq.w	80033a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b8b      	ldr	r3, [pc, #556]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10d      	bne.n	8003282 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	4b88      	ldr	r3, [pc, #544]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	4a87      	ldr	r2, [pc, #540]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800326c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003270:	61d3      	str	r3, [r2, #28]
 8003272:	4b85      	ldr	r3, [pc, #532]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	60bb      	str	r3, [r7, #8]
 800327c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	4b82      	ldr	r3, [pc, #520]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328a:	2b00      	cmp	r3, #0
 800328c:	d118      	bne.n	80032c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328e:	4b7f      	ldr	r3, [pc, #508]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7e      	ldr	r2, [pc, #504]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 8003294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fe fe8d 	bl	8001fb8 <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a2:	f7fe fe89 	bl	8001fb8 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e103      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_OscConfig+0x4c8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0f0      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d106      	bne.n	80032d6 <HAL_RCC_OscConfig+0x312>
 80032c8:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	4a6e      	ldr	r2, [pc, #440]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6213      	str	r3, [r2, #32]
 80032d4:	e02d      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCC_OscConfig+0x334>
 80032de:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	6a1b      	ldr	r3, [r3, #32]
 80032e2:	4a69      	ldr	r2, [pc, #420]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	6213      	str	r3, [r2, #32]
 80032ea:	4b67      	ldr	r3, [pc, #412]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	4a66      	ldr	r2, [pc, #408]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80032f0:	f023 0304 	bic.w	r3, r3, #4
 80032f4:	6213      	str	r3, [r2, #32]
 80032f6:	e01c      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d10c      	bne.n	800331a <HAL_RCC_OscConfig+0x356>
 8003300:	4b61      	ldr	r3, [pc, #388]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	4a60      	ldr	r2, [pc, #384]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	f043 0304 	orr.w	r3, r3, #4
 800330a:	6213      	str	r3, [r2, #32]
 800330c:	4b5e      	ldr	r3, [pc, #376]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	4a5d      	ldr	r2, [pc, #372]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	6213      	str	r3, [r2, #32]
 8003318:	e00b      	b.n	8003332 <HAL_RCC_OscConfig+0x36e>
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a5a      	ldr	r2, [pc, #360]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4b58      	ldr	r3, [pc, #352]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a57      	ldr	r2, [pc, #348]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d015      	beq.n	8003366 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333a:	f7fe fe3d 	bl	8001fb8 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fe39 	bl	8001fb8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0b1      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003358:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ee      	beq.n	8003342 <HAL_RCC_OscConfig+0x37e>
 8003364:	e014      	b.n	8003390 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fe fe27 	bl	8001fb8 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fe23 	bl	8001fb8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e09b      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003384:	4b40      	ldr	r3, [pc, #256]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ee      	bne.n	800336e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003390:	7dfb      	ldrb	r3, [r7, #23]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4b3c      	ldr	r3, [pc, #240]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	4a3b      	ldr	r2, [pc, #236]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8087 	beq.w	80034ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 030c 	and.w	r3, r3, #12
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d061      	beq.n	800347c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d146      	bne.n	800344e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c0:	4b33      	ldr	r3, [pc, #204]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7fe fdf7 	bl	8001fb8 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ce:	f7fe fdf3 	bl	8001fb8 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e06d      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e0:	4b29      	ldr	r3, [pc, #164]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f0      	bne.n	80033ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f4:	d108      	bne.n	8003408 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4921      	ldr	r1, [pc, #132]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003404:	4313      	orrs	r3, r2
 8003406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a19      	ldr	r1, [r3, #32]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	430b      	orrs	r3, r1
 800341a:	491b      	ldr	r1, [pc, #108]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	2201      	movs	r2, #1
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fdc7 	bl	8001fb8 <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fdc3 	bl	8001fb8 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e03d      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x46a>
 800344c:	e035      	b.n	80034ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_RCC_OscConfig+0x4cc>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fdb0 	bl	8001fb8 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800345c:	f7fe fdac 	bl	8001fb8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e026      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346e:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x498>
 800347a:	e01e      	b.n	80034ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d107      	bne.n	8003494 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e019      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
 8003488:	40021000 	.word	0x40021000
 800348c:	40007000 	.word	0x40007000
 8003490:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_OscConfig+0x500>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d106      	bne.n	80034b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d001      	beq.n	80034ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3718      	adds	r7, #24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0d0      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034dc:	4b6a      	ldr	r3, [pc, #424]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d910      	bls.n	800350c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ea:	4b67      	ldr	r3, [pc, #412]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 0207 	bic.w	r2, r3, #7
 80034f2:	4965      	ldr	r1, [pc, #404]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b63      	ldr	r3, [pc, #396]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800352e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	4a52      	ldr	r2, [pc, #328]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003546:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d040      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d115      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d107      	bne.n	8003596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e073      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06b      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4b39      	ldr	r3, [pc, #228]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f023 0203 	bic.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	4936      	ldr	r1, [pc, #216]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b8:	f7fe fcfe 	bl	8001fb8 <HAL_GetTick>
 80035bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c0:	f7fe fcfa 	bl	8001fb8 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e053      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	4b2d      	ldr	r3, [pc, #180]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f003 020c 	and.w	r2, r3, #12
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d1eb      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d210      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f6:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 0207 	bic.w	r2, r3, #7
 80035fe:	4922      	ldr	r1, [pc, #136]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_ClockConfig+0x1c0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490a      	ldr	r1, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1cc>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1d0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fe fc5c 	bl	8001f34 <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40022000 	.word	0x40022000
 800368c:	40021000 	.word	0x40021000
 8003690:	08004e68 	.word	0x08004e68
 8003694:	20000004 	.word	0x20000004
 8003698:	20000008 	.word	0x20000008

0800369c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	2300      	movs	r3, #0
 80036b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <HAL_RCC_GetSysClockFreq+0x94>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 030c 	and.w	r3, r3, #12
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d002      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x30>
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d003      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x36>
 80036ca:	e027      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036cc:	4b19      	ldr	r3, [pc, #100]	; (8003734 <HAL_RCC_GetSysClockFreq+0x98>)
 80036ce:	613b      	str	r3, [r7, #16]
      break;
 80036d0:	e027      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	0c9b      	lsrs	r3, r3, #18
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	4a17      	ldr	r2, [pc, #92]	; (8003738 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036dc:	5cd3      	ldrb	r3, [r2, r3]
 80036de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <HAL_RCC_GetSysClockFreq+0x94>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	0c5b      	lsrs	r3, r3, #17
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <HAL_RCC_GetSysClockFreq+0xa0>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_RCC_GetSysClockFreq+0x98>)
 80036fe:	fb03 f202 	mul.w	r2, r3, r2
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	e004      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	613b      	str	r3, [r7, #16]
      break;
 800371a:	e002      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800371c:	4b05      	ldr	r3, [pc, #20]	; (8003734 <HAL_RCC_GetSysClockFreq+0x98>)
 800371e:	613b      	str	r3, [r7, #16]
      break;
 8003720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003722:	693b      	ldr	r3, [r7, #16]
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	007a1200 	.word	0x007a1200
 8003738:	08004e80 	.word	0x08004e80
 800373c:	08004e90 	.word	0x08004e90
 8003740:	003d0900 	.word	0x003d0900

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b02      	ldr	r3, [pc, #8]	; (8003754 <HAL_RCC_GetHCLKFreq+0x10>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800375c:	f7ff fff2 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	4903      	ldr	r1, [pc, #12]	; (800377c <HAL_RCC_GetPCLK1Freq+0x24>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	08004e78 	.word	0x08004e78

08003780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003784:	f7ff ffde 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	0adb      	lsrs	r3, r3, #11
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4903      	ldr	r1, [pc, #12]	; (80037a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800379c:	4618      	mov	r0, r3
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40021000 	.word	0x40021000
 80037a4:	08004e78 	.word	0x08004e78

080037a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <RCC_Delay+0x34>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a0a      	ldr	r2, [pc, #40]	; (80037e0 <RCC_Delay+0x38>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0a5b      	lsrs	r3, r3, #9
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	fb02 f303 	mul.w	r3, r2, r3
 80037c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80037c4:	bf00      	nop
  }
  while (Delay --);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	1e5a      	subs	r2, r3, #1
 80037ca:	60fa      	str	r2, [r7, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1f9      	bne.n	80037c4 <RCC_Delay+0x1c>
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr
 80037dc:	20000004 	.word	0x20000004
 80037e0:	10624dd3 	.word	0x10624dd3

080037e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d07d      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003804:	4b4f      	ldr	r3, [pc, #316]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003810:	4b4c      	ldr	r3, [pc, #304]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	4a4b      	ldr	r2, [pc, #300]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	61d3      	str	r3, [r2, #28]
 800381c:	4b49      	ldr	r3, [pc, #292]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381e:	69db      	ldr	r3, [r3, #28]
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	60bb      	str	r3, [r7, #8]
 8003826:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003828:	2301      	movs	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382c:	4b46      	ldr	r3, [pc, #280]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003834:	2b00      	cmp	r3, #0
 8003836:	d118      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003838:	4b43      	ldr	r3, [pc, #268]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a42      	ldr	r2, [pc, #264]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003842:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003844:	f7fe fbb8 	bl	8001fb8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800384a:	e008      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800384c:	f7fe fbb4 	bl	8001fb8 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b64      	cmp	r3, #100	; 0x64
 8003858:	d901      	bls.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e06d      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385e:	4b3a      	ldr	r3, [pc, #232]	; (8003948 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003872:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d02e      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	429a      	cmp	r2, r3
 8003886:	d027      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003888:	4b2e      	ldr	r3, [pc, #184]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003890:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003892:	4b2e      	ldr	r3, [pc, #184]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003898:	4b2c      	ldr	r3, [pc, #176]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d014      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ae:	f7fe fb83 	bl	8001fb8 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b4:	e00a      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038b6:	f7fe fb7f 	bl	8001fb8 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d901      	bls.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e036      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0ee      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038d8:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4917      	ldr	r1, [pc, #92]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4a13      	ldr	r2, [pc, #76]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	490b      	ldr	r1, [pc, #44]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003916:	4313      	orrs	r3, r2
 8003918:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	4904      	ldr	r1, [pc, #16]	; (8003944 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003934:	4313      	orrs	r3, r2
 8003936:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000
 8003948:	40007000 	.word	0x40007000
 800394c:	42420440 	.word	0x42420440

08003950 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e042      	b.n	80039e8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fe f9f2 	bl	8001d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2224      	movs	r2, #36	; 0x24
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003992:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fb81 	bl	800409c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695a      	ldr	r2, [r3, #20]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08a      	sub	sp, #40	; 0x28
 80039f4:	af02      	add	r7, sp, #8
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	4613      	mov	r3, r2
 80039fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d16d      	bne.n	8003aec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Transmit+0x2c>
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e066      	b.n	8003aee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2221      	movs	r2, #33	; 0x21
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a2e:	f7fe fac3 	bl	8001fb8 <HAL_GetTick>
 8003a32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	88fa      	ldrh	r2, [r7, #6]
 8003a38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	88fa      	ldrh	r2, [r7, #6]
 8003a3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a48:	d108      	bne.n	8003a5c <HAL_UART_Transmit+0x6c>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	61bb      	str	r3, [r7, #24]
 8003a5a:	e003      	b.n	8003a64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a64:	e02a      	b.n	8003abc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f980 	bl	8003d76 <UART_WaitOnFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e036      	b.n	8003aee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3302      	adds	r3, #2
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	e007      	b.n	8003aae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1cf      	bne.n	8003a66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2140      	movs	r1, #64	; 0x40
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f000 f950 	bl	8003d76 <UART_WaitOnFlagUntilTimeout>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e006      	b.n	8003aee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e000      	b.n	8003aee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003aec:	2302      	movs	r3, #2
  }
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	4613      	mov	r3, r2
 8003b02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b20      	cmp	r3, #32
 8003b0e:	d112      	bne.n	8003b36 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_UART_Receive_DMA+0x26>
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e00b      	b.n	8003b38 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f991 	bl	8003e54 <UART_Start_Receive_DMA>
 8003b32:	4603      	mov	r3, r0
 8003b34:	e000      	b.n	8003b38 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003b36:	2302      	movs	r3, #2
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr

08003b52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr

08003b64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bc80      	pop	{r7}
 8003b78:	4770      	bx	lr

08003b7a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b09c      	sub	sp, #112	; 0x70
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d172      	bne.n	8003c7c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b98:	2200      	movs	r2, #0
 8003b9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bbe:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	667b      	str	r3, [r7, #100]	; 0x64
 8003be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003bf0:	647a      	str	r2, [r7, #68]	; 0x44
 8003bf2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3314      	adds	r3, #20
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	623b      	str	r3, [r7, #32]
   return(result);
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8003c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3314      	adds	r3, #20
 8003c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c24:	633a      	str	r2, [r7, #48]	; 0x30
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e5      	bne.n	8003c04 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d119      	bne.n	8003c7c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0310 	bic.w	r3, r3, #16
 8003c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	330c      	adds	r3, #12
 8003c66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c68:	61fa      	str	r2, [r7, #28]
 8003c6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6c:	69b9      	ldr	r1, [r7, #24]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	e841 2300 	strex	r3, r2, [r1]
 8003c74:	617b      	str	r3, [r7, #20]
   return(result);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1e5      	bne.n	8003c48 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7e:	2200      	movs	r2, #0
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d106      	bne.n	8003c98 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c8e:	4619      	mov	r1, r3
 8003c90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c92:	f7ff ff67 	bl	8003b64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c96:	e002      	b.n	8003c9e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003c9a:	f7fc fe3f 	bl	800091c <HAL_UART_RxCpltCallback>
}
 8003c9e:	bf00      	nop
 8003ca0:	3770      	adds	r7, #112	; 0x70
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d108      	bne.n	8003cd4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	4619      	mov	r1, r3
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f7ff ff49 	bl	8003b64 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003cd2:	e002      	b.n	8003cda <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff ff33 	bl	8003b40 <HAL_UART_RxHalfCpltCallback>
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	bf14      	ite	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	2300      	moveq	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b21      	cmp	r3, #33	; 0x21
 8003d14:	d108      	bne.n	8003d28 <UART_DMAError+0x46>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 f930 	bl	8003f88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b22      	cmp	r3, #34	; 0x22
 8003d48:	d108      	bne.n	8003d5c <UART_DMAError+0x7a>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2200      	movs	r2, #0
 8003d54:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003d56:	68b8      	ldr	r0, [r7, #8]
 8003d58:	f000 f93d 	bl	8003fd6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f043 0210 	orr.w	r2, r3, #16
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d68:	68b8      	ldr	r0, [r7, #8]
 8003d6a:	f7ff fef2 	bl	8003b52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b090      	sub	sp, #64	; 0x40
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	60b9      	str	r1, [r7, #8]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	4613      	mov	r3, r2
 8003d84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d86:	e050      	b.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8e:	d04c      	beq.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d96:	f7fe f90f 	bl	8001fb8 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d241      	bcs.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	330c      	adds	r3, #12
 8003dc4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc6:	637a      	str	r2, [r7, #52]	; 0x34
 8003dc8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e5      	bne.n	8003da6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dfa:	623a      	str	r2, [r7, #32]
 8003dfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	69f9      	ldr	r1, [r7, #28]
 8003e00:	6a3a      	ldr	r2, [r7, #32]
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e00f      	b.n	8003e4a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4013      	ands	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d09f      	beq.n	8003d88 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3740      	adds	r7, #64	; 0x40
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b098      	sub	sp, #96	; 0x60
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2222      	movs	r2, #34	; 0x22
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	4a3e      	ldr	r2, [pc, #248]	; (8003f7c <UART_Start_Receive_DMA+0x128>)
 8003e82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e88:	4a3d      	ldr	r2, [pc, #244]	; (8003f80 <UART_Start_Receive_DMA+0x12c>)
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	4a3c      	ldr	r2, [pc, #240]	; (8003f84 <UART_Start_Receive_DMA+0x130>)
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e98:	2200      	movs	r2, #0
 8003e9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4619      	mov	r1, r3
 8003eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	f7fe fd3c 	bl	8002930 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d019      	beq.n	8003f0a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee0:	e853 3f00 	ldrex	r3, [r3]
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ef6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ef8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003efc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003efe:	e841 2300 	strex	r3, r2, [r1]
 8003f02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1e5      	bne.n	8003ed6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	657b      	str	r3, [r7, #84]	; 0x54
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f2a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e5      	bne.n	8003f0a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3314      	adds	r3, #20
 8003f44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f54:	653b      	str	r3, [r7, #80]	; 0x50
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f5e:	627a      	str	r2, [r7, #36]	; 0x24
 8003f60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6a39      	ldr	r1, [r7, #32]
 8003f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e5      	bne.n	8003f3e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3760      	adds	r7, #96	; 0x60
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	08003b7b 	.word	0x08003b7b
 8003f80:	08003ca7 	.word	0x08003ca7
 8003f84:	08003ce3 	.word	0x08003ce3

08003f88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	61ba      	str	r2, [r7, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6979      	ldr	r1, [r7, #20]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003fcc:	bf00      	nop
 8003fce:	3724      	adds	r7, #36	; 0x24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b095      	sub	sp, #84	; 0x54
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ffe:	643a      	str	r2, [r7, #64]	; 0x40
 8004000:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e5      	bne.n	8003fde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	61fb      	str	r3, [r7, #28]
   return(result);
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	64bb      	str	r3, [r7, #72]	; 0x48
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	3314      	adds	r3, #20
 8004030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004034:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404a:	2b01      	cmp	r3, #1
 800404c:	d119      	bne.n	8004082 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	330c      	adds	r3, #12
 8004054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	60bb      	str	r3, [r7, #8]
   return(result);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 0310 	bic.w	r3, r3, #16
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	330c      	adds	r3, #12
 800406c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800406e:	61ba      	str	r2, [r7, #24]
 8004070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004072:	6979      	ldr	r1, [r7, #20]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	e841 2300 	strex	r3, r2, [r1]
 800407a:	613b      	str	r3, [r7, #16]
   return(result);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1e5      	bne.n	800404e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004090:	bf00      	nop
 8004092:	3754      	adds	r7, #84	; 0x54
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr
	...

0800409c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040d6:	f023 030c 	bic.w	r3, r3, #12
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a2c      	ldr	r2, [pc, #176]	; (80041b0 <UART_SetConfig+0x114>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d103      	bne.n	800410c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004104:	f7ff fb3c 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8004108:	60f8      	str	r0, [r7, #12]
 800410a:	e002      	b.n	8004112 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800410c:	f7ff fb24 	bl	8003758 <HAL_RCC_GetPCLK1Freq>
 8004110:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	009a      	lsls	r2, r3, #2
 800411c:	441a      	add	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	fbb2 f3f3 	udiv	r3, r2, r3
 8004128:	4a22      	ldr	r2, [pc, #136]	; (80041b4 <UART_SetConfig+0x118>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	0119      	lsls	r1, r3, #4
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f2f3 	udiv	r2, r2, r3
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <UART_SetConfig+0x118>)
 800414a:	fba3 0302 	umull	r0, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	2064      	movs	r0, #100	; 0x64
 8004152:	fb00 f303 	mul.w	r3, r0, r3
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	3332      	adds	r3, #50	; 0x32
 800415c:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <UART_SetConfig+0x118>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	095b      	lsrs	r3, r3, #5
 8004164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004168:	4419      	add	r1, r3
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	009a      	lsls	r2, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <UART_SetConfig+0x118>)
 8004182:	fba3 0302 	umull	r0, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2064      	movs	r0, #100	; 0x64
 800418a:	fb00 f303 	mul.w	r3, r0, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <UART_SetConfig+0x118>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	440a      	add	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40013800 	.word	0x40013800
 80041b4:	51eb851f 	.word	0x51eb851f

080041b8 <_vsniprintf_r>:
 80041b8:	b530      	push	{r4, r5, lr}
 80041ba:	4614      	mov	r4, r2
 80041bc:	2c00      	cmp	r4, #0
 80041be:	4605      	mov	r5, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	b09b      	sub	sp, #108	; 0x6c
 80041c4:	da05      	bge.n	80041d2 <_vsniprintf_r+0x1a>
 80041c6:	238b      	movs	r3, #139	; 0x8b
 80041c8:	6003      	str	r3, [r0, #0]
 80041ca:	f04f 30ff 	mov.w	r0, #4294967295
 80041ce:	b01b      	add	sp, #108	; 0x6c
 80041d0:	bd30      	pop	{r4, r5, pc}
 80041d2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80041d6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80041da:	bf0c      	ite	eq
 80041dc:	4623      	moveq	r3, r4
 80041de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80041e2:	9302      	str	r3, [sp, #8]
 80041e4:	9305      	str	r3, [sp, #20]
 80041e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041ea:	9100      	str	r1, [sp, #0]
 80041ec:	9104      	str	r1, [sp, #16]
 80041ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80041f2:	4669      	mov	r1, sp
 80041f4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80041f6:	f000 f99b 	bl	8004530 <_svfiprintf_r>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	bfbc      	itt	lt
 80041fe:	238b      	movlt	r3, #139	; 0x8b
 8004200:	602b      	strlt	r3, [r5, #0]
 8004202:	2c00      	cmp	r4, #0
 8004204:	d0e3      	beq.n	80041ce <_vsniprintf_r+0x16>
 8004206:	2200      	movs	r2, #0
 8004208:	9b00      	ldr	r3, [sp, #0]
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e7df      	b.n	80041ce <_vsniprintf_r+0x16>
	...

08004210 <vsniprintf>:
 8004210:	b507      	push	{r0, r1, r2, lr}
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4613      	mov	r3, r2
 8004216:	460a      	mov	r2, r1
 8004218:	4601      	mov	r1, r0
 800421a:	4803      	ldr	r0, [pc, #12]	; (8004228 <vsniprintf+0x18>)
 800421c:	6800      	ldr	r0, [r0, #0]
 800421e:	f7ff ffcb 	bl	80041b8 <_vsniprintf_r>
 8004222:	b003      	add	sp, #12
 8004224:	f85d fb04 	ldr.w	pc, [sp], #4
 8004228:	2000005c 	.word	0x2000005c

0800422c <memset>:
 800422c:	4603      	mov	r3, r0
 800422e:	4402      	add	r2, r0
 8004230:	4293      	cmp	r3, r2
 8004232:	d100      	bne.n	8004236 <memset+0xa>
 8004234:	4770      	bx	lr
 8004236:	f803 1b01 	strb.w	r1, [r3], #1
 800423a:	e7f9      	b.n	8004230 <memset+0x4>

0800423c <__errno>:
 800423c:	4b01      	ldr	r3, [pc, #4]	; (8004244 <__errno+0x8>)
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	2000005c 	.word	0x2000005c

08004248 <__libc_init_array>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	2600      	movs	r6, #0
 800424c:	4d0c      	ldr	r5, [pc, #48]	; (8004280 <__libc_init_array+0x38>)
 800424e:	4c0d      	ldr	r4, [pc, #52]	; (8004284 <__libc_init_array+0x3c>)
 8004250:	1b64      	subs	r4, r4, r5
 8004252:	10a4      	asrs	r4, r4, #2
 8004254:	42a6      	cmp	r6, r4
 8004256:	d109      	bne.n	800426c <__libc_init_array+0x24>
 8004258:	f000 fc7a 	bl	8004b50 <_init>
 800425c:	2600      	movs	r6, #0
 800425e:	4d0a      	ldr	r5, [pc, #40]	; (8004288 <__libc_init_array+0x40>)
 8004260:	4c0a      	ldr	r4, [pc, #40]	; (800428c <__libc_init_array+0x44>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	42a6      	cmp	r6, r4
 8004268:	d105      	bne.n	8004276 <__libc_init_array+0x2e>
 800426a:	bd70      	pop	{r4, r5, r6, pc}
 800426c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004270:	4798      	blx	r3
 8004272:	3601      	adds	r6, #1
 8004274:	e7ee      	b.n	8004254 <__libc_init_array+0xc>
 8004276:	f855 3b04 	ldr.w	r3, [r5], #4
 800427a:	4798      	blx	r3
 800427c:	3601      	adds	r6, #1
 800427e:	e7f2      	b.n	8004266 <__libc_init_array+0x1e>
 8004280:	08004ec8 	.word	0x08004ec8
 8004284:	08004ec8 	.word	0x08004ec8
 8004288:	08004ec8 	.word	0x08004ec8
 800428c:	08004ecc 	.word	0x08004ecc

08004290 <__retarget_lock_acquire_recursive>:
 8004290:	4770      	bx	lr

08004292 <__retarget_lock_release_recursive>:
 8004292:	4770      	bx	lr

08004294 <_free_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	4605      	mov	r5, r0
 8004298:	2900      	cmp	r1, #0
 800429a:	d040      	beq.n	800431e <_free_r+0x8a>
 800429c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a0:	1f0c      	subs	r4, r1, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bfb8      	it	lt
 80042a6:	18e4      	addlt	r4, r4, r3
 80042a8:	f000 f8dc 	bl	8004464 <__malloc_lock>
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <_free_r+0x8c>)
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	b933      	cbnz	r3, 80042c0 <_free_r+0x2c>
 80042b2:	6063      	str	r3, [r4, #4]
 80042b4:	6014      	str	r4, [r2, #0]
 80042b6:	4628      	mov	r0, r5
 80042b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042bc:	f000 b8d8 	b.w	8004470 <__malloc_unlock>
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	d908      	bls.n	80042d6 <_free_r+0x42>
 80042c4:	6820      	ldr	r0, [r4, #0]
 80042c6:	1821      	adds	r1, r4, r0
 80042c8:	428b      	cmp	r3, r1
 80042ca:	bf01      	itttt	eq
 80042cc:	6819      	ldreq	r1, [r3, #0]
 80042ce:	685b      	ldreq	r3, [r3, #4]
 80042d0:	1809      	addeq	r1, r1, r0
 80042d2:	6021      	streq	r1, [r4, #0]
 80042d4:	e7ed      	b.n	80042b2 <_free_r+0x1e>
 80042d6:	461a      	mov	r2, r3
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	b10b      	cbz	r3, 80042e0 <_free_r+0x4c>
 80042dc:	42a3      	cmp	r3, r4
 80042de:	d9fa      	bls.n	80042d6 <_free_r+0x42>
 80042e0:	6811      	ldr	r1, [r2, #0]
 80042e2:	1850      	adds	r0, r2, r1
 80042e4:	42a0      	cmp	r0, r4
 80042e6:	d10b      	bne.n	8004300 <_free_r+0x6c>
 80042e8:	6820      	ldr	r0, [r4, #0]
 80042ea:	4401      	add	r1, r0
 80042ec:	1850      	adds	r0, r2, r1
 80042ee:	4283      	cmp	r3, r0
 80042f0:	6011      	str	r1, [r2, #0]
 80042f2:	d1e0      	bne.n	80042b6 <_free_r+0x22>
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	4408      	add	r0, r1
 80042fa:	6010      	str	r0, [r2, #0]
 80042fc:	6053      	str	r3, [r2, #4]
 80042fe:	e7da      	b.n	80042b6 <_free_r+0x22>
 8004300:	d902      	bls.n	8004308 <_free_r+0x74>
 8004302:	230c      	movs	r3, #12
 8004304:	602b      	str	r3, [r5, #0]
 8004306:	e7d6      	b.n	80042b6 <_free_r+0x22>
 8004308:	6820      	ldr	r0, [r4, #0]
 800430a:	1821      	adds	r1, r4, r0
 800430c:	428b      	cmp	r3, r1
 800430e:	bf01      	itttt	eq
 8004310:	6819      	ldreq	r1, [r3, #0]
 8004312:	685b      	ldreq	r3, [r3, #4]
 8004314:	1809      	addeq	r1, r1, r0
 8004316:	6021      	streq	r1, [r4, #0]
 8004318:	6063      	str	r3, [r4, #4]
 800431a:	6054      	str	r4, [r2, #4]
 800431c:	e7cb      	b.n	80042b6 <_free_r+0x22>
 800431e:	bd38      	pop	{r3, r4, r5, pc}
 8004320:	2000037c 	.word	0x2000037c

08004324 <sbrk_aligned>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4e0e      	ldr	r6, [pc, #56]	; (8004360 <sbrk_aligned+0x3c>)
 8004328:	460c      	mov	r4, r1
 800432a:	6831      	ldr	r1, [r6, #0]
 800432c:	4605      	mov	r5, r0
 800432e:	b911      	cbnz	r1, 8004336 <sbrk_aligned+0x12>
 8004330:	f000 fbaa 	bl	8004a88 <_sbrk_r>
 8004334:	6030      	str	r0, [r6, #0]
 8004336:	4621      	mov	r1, r4
 8004338:	4628      	mov	r0, r5
 800433a:	f000 fba5 	bl	8004a88 <_sbrk_r>
 800433e:	1c43      	adds	r3, r0, #1
 8004340:	d00a      	beq.n	8004358 <sbrk_aligned+0x34>
 8004342:	1cc4      	adds	r4, r0, #3
 8004344:	f024 0403 	bic.w	r4, r4, #3
 8004348:	42a0      	cmp	r0, r4
 800434a:	d007      	beq.n	800435c <sbrk_aligned+0x38>
 800434c:	1a21      	subs	r1, r4, r0
 800434e:	4628      	mov	r0, r5
 8004350:	f000 fb9a 	bl	8004a88 <_sbrk_r>
 8004354:	3001      	adds	r0, #1
 8004356:	d101      	bne.n	800435c <sbrk_aligned+0x38>
 8004358:	f04f 34ff 	mov.w	r4, #4294967295
 800435c:	4620      	mov	r0, r4
 800435e:	bd70      	pop	{r4, r5, r6, pc}
 8004360:	20000380 	.word	0x20000380

08004364 <_malloc_r>:
 8004364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004368:	1ccd      	adds	r5, r1, #3
 800436a:	f025 0503 	bic.w	r5, r5, #3
 800436e:	3508      	adds	r5, #8
 8004370:	2d0c      	cmp	r5, #12
 8004372:	bf38      	it	cc
 8004374:	250c      	movcc	r5, #12
 8004376:	2d00      	cmp	r5, #0
 8004378:	4607      	mov	r7, r0
 800437a:	db01      	blt.n	8004380 <_malloc_r+0x1c>
 800437c:	42a9      	cmp	r1, r5
 800437e:	d905      	bls.n	800438c <_malloc_r+0x28>
 8004380:	230c      	movs	r3, #12
 8004382:	2600      	movs	r6, #0
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	4630      	mov	r0, r6
 8004388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800438c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004460 <_malloc_r+0xfc>
 8004390:	f000 f868 	bl	8004464 <__malloc_lock>
 8004394:	f8d8 3000 	ldr.w	r3, [r8]
 8004398:	461c      	mov	r4, r3
 800439a:	bb5c      	cbnz	r4, 80043f4 <_malloc_r+0x90>
 800439c:	4629      	mov	r1, r5
 800439e:	4638      	mov	r0, r7
 80043a0:	f7ff ffc0 	bl	8004324 <sbrk_aligned>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	4604      	mov	r4, r0
 80043a8:	d155      	bne.n	8004456 <_malloc_r+0xf2>
 80043aa:	f8d8 4000 	ldr.w	r4, [r8]
 80043ae:	4626      	mov	r6, r4
 80043b0:	2e00      	cmp	r6, #0
 80043b2:	d145      	bne.n	8004440 <_malloc_r+0xdc>
 80043b4:	2c00      	cmp	r4, #0
 80043b6:	d048      	beq.n	800444a <_malloc_r+0xe6>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	4631      	mov	r1, r6
 80043bc:	4638      	mov	r0, r7
 80043be:	eb04 0903 	add.w	r9, r4, r3
 80043c2:	f000 fb61 	bl	8004a88 <_sbrk_r>
 80043c6:	4581      	cmp	r9, r0
 80043c8:	d13f      	bne.n	800444a <_malloc_r+0xe6>
 80043ca:	6821      	ldr	r1, [r4, #0]
 80043cc:	4638      	mov	r0, r7
 80043ce:	1a6d      	subs	r5, r5, r1
 80043d0:	4629      	mov	r1, r5
 80043d2:	f7ff ffa7 	bl	8004324 <sbrk_aligned>
 80043d6:	3001      	adds	r0, #1
 80043d8:	d037      	beq.n	800444a <_malloc_r+0xe6>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	442b      	add	r3, r5
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	f8d8 3000 	ldr.w	r3, [r8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d038      	beq.n	800445a <_malloc_r+0xf6>
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	42a2      	cmp	r2, r4
 80043ec:	d12b      	bne.n	8004446 <_malloc_r+0xe2>
 80043ee:	2200      	movs	r2, #0
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	e00f      	b.n	8004414 <_malloc_r+0xb0>
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	1b52      	subs	r2, r2, r5
 80043f8:	d41f      	bmi.n	800443a <_malloc_r+0xd6>
 80043fa:	2a0b      	cmp	r2, #11
 80043fc:	d917      	bls.n	800442e <_malloc_r+0xca>
 80043fe:	1961      	adds	r1, r4, r5
 8004400:	42a3      	cmp	r3, r4
 8004402:	6025      	str	r5, [r4, #0]
 8004404:	bf18      	it	ne
 8004406:	6059      	strne	r1, [r3, #4]
 8004408:	6863      	ldr	r3, [r4, #4]
 800440a:	bf08      	it	eq
 800440c:	f8c8 1000 	streq.w	r1, [r8]
 8004410:	5162      	str	r2, [r4, r5]
 8004412:	604b      	str	r3, [r1, #4]
 8004414:	4638      	mov	r0, r7
 8004416:	f104 060b 	add.w	r6, r4, #11
 800441a:	f000 f829 	bl	8004470 <__malloc_unlock>
 800441e:	f026 0607 	bic.w	r6, r6, #7
 8004422:	1d23      	adds	r3, r4, #4
 8004424:	1af2      	subs	r2, r6, r3
 8004426:	d0ae      	beq.n	8004386 <_malloc_r+0x22>
 8004428:	1b9b      	subs	r3, r3, r6
 800442a:	50a3      	str	r3, [r4, r2]
 800442c:	e7ab      	b.n	8004386 <_malloc_r+0x22>
 800442e:	42a3      	cmp	r3, r4
 8004430:	6862      	ldr	r2, [r4, #4]
 8004432:	d1dd      	bne.n	80043f0 <_malloc_r+0x8c>
 8004434:	f8c8 2000 	str.w	r2, [r8]
 8004438:	e7ec      	b.n	8004414 <_malloc_r+0xb0>
 800443a:	4623      	mov	r3, r4
 800443c:	6864      	ldr	r4, [r4, #4]
 800443e:	e7ac      	b.n	800439a <_malloc_r+0x36>
 8004440:	4634      	mov	r4, r6
 8004442:	6876      	ldr	r6, [r6, #4]
 8004444:	e7b4      	b.n	80043b0 <_malloc_r+0x4c>
 8004446:	4613      	mov	r3, r2
 8004448:	e7cc      	b.n	80043e4 <_malloc_r+0x80>
 800444a:	230c      	movs	r3, #12
 800444c:	4638      	mov	r0, r7
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	f000 f80e 	bl	8004470 <__malloc_unlock>
 8004454:	e797      	b.n	8004386 <_malloc_r+0x22>
 8004456:	6025      	str	r5, [r4, #0]
 8004458:	e7dc      	b.n	8004414 <_malloc_r+0xb0>
 800445a:	605b      	str	r3, [r3, #4]
 800445c:	deff      	udf	#255	; 0xff
 800445e:	bf00      	nop
 8004460:	2000037c 	.word	0x2000037c

08004464 <__malloc_lock>:
 8004464:	4801      	ldr	r0, [pc, #4]	; (800446c <__malloc_lock+0x8>)
 8004466:	f7ff bf13 	b.w	8004290 <__retarget_lock_acquire_recursive>
 800446a:	bf00      	nop
 800446c:	20000378 	.word	0x20000378

08004470 <__malloc_unlock>:
 8004470:	4801      	ldr	r0, [pc, #4]	; (8004478 <__malloc_unlock+0x8>)
 8004472:	f7ff bf0e 	b.w	8004292 <__retarget_lock_release_recursive>
 8004476:	bf00      	nop
 8004478:	20000378 	.word	0x20000378

0800447c <__ssputs_r>:
 800447c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004480:	461f      	mov	r7, r3
 8004482:	688e      	ldr	r6, [r1, #8]
 8004484:	4682      	mov	sl, r0
 8004486:	42be      	cmp	r6, r7
 8004488:	460c      	mov	r4, r1
 800448a:	4690      	mov	r8, r2
 800448c:	680b      	ldr	r3, [r1, #0]
 800448e:	d82c      	bhi.n	80044ea <__ssputs_r+0x6e>
 8004490:	898a      	ldrh	r2, [r1, #12]
 8004492:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004496:	d026      	beq.n	80044e6 <__ssputs_r+0x6a>
 8004498:	6965      	ldr	r5, [r4, #20]
 800449a:	6909      	ldr	r1, [r1, #16]
 800449c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044a0:	eba3 0901 	sub.w	r9, r3, r1
 80044a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044a8:	1c7b      	adds	r3, r7, #1
 80044aa:	444b      	add	r3, r9
 80044ac:	106d      	asrs	r5, r5, #1
 80044ae:	429d      	cmp	r5, r3
 80044b0:	bf38      	it	cc
 80044b2:	461d      	movcc	r5, r3
 80044b4:	0553      	lsls	r3, r2, #21
 80044b6:	d527      	bpl.n	8004508 <__ssputs_r+0x8c>
 80044b8:	4629      	mov	r1, r5
 80044ba:	f7ff ff53 	bl	8004364 <_malloc_r>
 80044be:	4606      	mov	r6, r0
 80044c0:	b360      	cbz	r0, 800451c <__ssputs_r+0xa0>
 80044c2:	464a      	mov	r2, r9
 80044c4:	6921      	ldr	r1, [r4, #16]
 80044c6:	f000 fafd 	bl	8004ac4 <memcpy>
 80044ca:	89a3      	ldrh	r3, [r4, #12]
 80044cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	6126      	str	r6, [r4, #16]
 80044d8:	444e      	add	r6, r9
 80044da:	6026      	str	r6, [r4, #0]
 80044dc:	463e      	mov	r6, r7
 80044de:	6165      	str	r5, [r4, #20]
 80044e0:	eba5 0509 	sub.w	r5, r5, r9
 80044e4:	60a5      	str	r5, [r4, #8]
 80044e6:	42be      	cmp	r6, r7
 80044e8:	d900      	bls.n	80044ec <__ssputs_r+0x70>
 80044ea:	463e      	mov	r6, r7
 80044ec:	4632      	mov	r2, r6
 80044ee:	4641      	mov	r1, r8
 80044f0:	6820      	ldr	r0, [r4, #0]
 80044f2:	f000 faaf 	bl	8004a54 <memmove>
 80044f6:	2000      	movs	r0, #0
 80044f8:	68a3      	ldr	r3, [r4, #8]
 80044fa:	1b9b      	subs	r3, r3, r6
 80044fc:	60a3      	str	r3, [r4, #8]
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	4433      	add	r3, r6
 8004502:	6023      	str	r3, [r4, #0]
 8004504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004508:	462a      	mov	r2, r5
 800450a:	f000 fae9 	bl	8004ae0 <_realloc_r>
 800450e:	4606      	mov	r6, r0
 8004510:	2800      	cmp	r0, #0
 8004512:	d1e0      	bne.n	80044d6 <__ssputs_r+0x5a>
 8004514:	4650      	mov	r0, sl
 8004516:	6921      	ldr	r1, [r4, #16]
 8004518:	f7ff febc 	bl	8004294 <_free_r>
 800451c:	230c      	movs	r3, #12
 800451e:	f8ca 3000 	str.w	r3, [sl]
 8004522:	89a3      	ldrh	r3, [r4, #12]
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452c:	81a3      	strh	r3, [r4, #12]
 800452e:	e7e9      	b.n	8004504 <__ssputs_r+0x88>

08004530 <_svfiprintf_r>:
 8004530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004534:	4698      	mov	r8, r3
 8004536:	898b      	ldrh	r3, [r1, #12]
 8004538:	4607      	mov	r7, r0
 800453a:	061b      	lsls	r3, r3, #24
 800453c:	460d      	mov	r5, r1
 800453e:	4614      	mov	r4, r2
 8004540:	b09d      	sub	sp, #116	; 0x74
 8004542:	d50e      	bpl.n	8004562 <_svfiprintf_r+0x32>
 8004544:	690b      	ldr	r3, [r1, #16]
 8004546:	b963      	cbnz	r3, 8004562 <_svfiprintf_r+0x32>
 8004548:	2140      	movs	r1, #64	; 0x40
 800454a:	f7ff ff0b 	bl	8004364 <_malloc_r>
 800454e:	6028      	str	r0, [r5, #0]
 8004550:	6128      	str	r0, [r5, #16]
 8004552:	b920      	cbnz	r0, 800455e <_svfiprintf_r+0x2e>
 8004554:	230c      	movs	r3, #12
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	e0d0      	b.n	8004700 <_svfiprintf_r+0x1d0>
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	616b      	str	r3, [r5, #20]
 8004562:	2300      	movs	r3, #0
 8004564:	9309      	str	r3, [sp, #36]	; 0x24
 8004566:	2320      	movs	r3, #32
 8004568:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800456c:	2330      	movs	r3, #48	; 0x30
 800456e:	f04f 0901 	mov.w	r9, #1
 8004572:	f8cd 800c 	str.w	r8, [sp, #12]
 8004576:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004718 <_svfiprintf_r+0x1e8>
 800457a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800457e:	4623      	mov	r3, r4
 8004580:	469a      	mov	sl, r3
 8004582:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004586:	b10a      	cbz	r2, 800458c <_svfiprintf_r+0x5c>
 8004588:	2a25      	cmp	r2, #37	; 0x25
 800458a:	d1f9      	bne.n	8004580 <_svfiprintf_r+0x50>
 800458c:	ebba 0b04 	subs.w	fp, sl, r4
 8004590:	d00b      	beq.n	80045aa <_svfiprintf_r+0x7a>
 8004592:	465b      	mov	r3, fp
 8004594:	4622      	mov	r2, r4
 8004596:	4629      	mov	r1, r5
 8004598:	4638      	mov	r0, r7
 800459a:	f7ff ff6f 	bl	800447c <__ssputs_r>
 800459e:	3001      	adds	r0, #1
 80045a0:	f000 80a9 	beq.w	80046f6 <_svfiprintf_r+0x1c6>
 80045a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045a6:	445a      	add	r2, fp
 80045a8:	9209      	str	r2, [sp, #36]	; 0x24
 80045aa:	f89a 3000 	ldrb.w	r3, [sl]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 80a1 	beq.w	80046f6 <_svfiprintf_r+0x1c6>
 80045b4:	2300      	movs	r3, #0
 80045b6:	f04f 32ff 	mov.w	r2, #4294967295
 80045ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045be:	f10a 0a01 	add.w	sl, sl, #1
 80045c2:	9304      	str	r3, [sp, #16]
 80045c4:	9307      	str	r3, [sp, #28]
 80045c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045ca:	931a      	str	r3, [sp, #104]	; 0x68
 80045cc:	4654      	mov	r4, sl
 80045ce:	2205      	movs	r2, #5
 80045d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d4:	4850      	ldr	r0, [pc, #320]	; (8004718 <_svfiprintf_r+0x1e8>)
 80045d6:	f000 fa67 	bl	8004aa8 <memchr>
 80045da:	9a04      	ldr	r2, [sp, #16]
 80045dc:	b9d8      	cbnz	r0, 8004616 <_svfiprintf_r+0xe6>
 80045de:	06d0      	lsls	r0, r2, #27
 80045e0:	bf44      	itt	mi
 80045e2:	2320      	movmi	r3, #32
 80045e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045e8:	0711      	lsls	r1, r2, #28
 80045ea:	bf44      	itt	mi
 80045ec:	232b      	movmi	r3, #43	; 0x2b
 80045ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045f2:	f89a 3000 	ldrb.w	r3, [sl]
 80045f6:	2b2a      	cmp	r3, #42	; 0x2a
 80045f8:	d015      	beq.n	8004626 <_svfiprintf_r+0xf6>
 80045fa:	4654      	mov	r4, sl
 80045fc:	2000      	movs	r0, #0
 80045fe:	f04f 0c0a 	mov.w	ip, #10
 8004602:	9a07      	ldr	r2, [sp, #28]
 8004604:	4621      	mov	r1, r4
 8004606:	f811 3b01 	ldrb.w	r3, [r1], #1
 800460a:	3b30      	subs	r3, #48	; 0x30
 800460c:	2b09      	cmp	r3, #9
 800460e:	d94d      	bls.n	80046ac <_svfiprintf_r+0x17c>
 8004610:	b1b0      	cbz	r0, 8004640 <_svfiprintf_r+0x110>
 8004612:	9207      	str	r2, [sp, #28]
 8004614:	e014      	b.n	8004640 <_svfiprintf_r+0x110>
 8004616:	eba0 0308 	sub.w	r3, r0, r8
 800461a:	fa09 f303 	lsl.w	r3, r9, r3
 800461e:	4313      	orrs	r3, r2
 8004620:	46a2      	mov	sl, r4
 8004622:	9304      	str	r3, [sp, #16]
 8004624:	e7d2      	b.n	80045cc <_svfiprintf_r+0x9c>
 8004626:	9b03      	ldr	r3, [sp, #12]
 8004628:	1d19      	adds	r1, r3, #4
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	9103      	str	r1, [sp, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	bfbb      	ittet	lt
 8004632:	425b      	neglt	r3, r3
 8004634:	f042 0202 	orrlt.w	r2, r2, #2
 8004638:	9307      	strge	r3, [sp, #28]
 800463a:	9307      	strlt	r3, [sp, #28]
 800463c:	bfb8      	it	lt
 800463e:	9204      	strlt	r2, [sp, #16]
 8004640:	7823      	ldrb	r3, [r4, #0]
 8004642:	2b2e      	cmp	r3, #46	; 0x2e
 8004644:	d10c      	bne.n	8004660 <_svfiprintf_r+0x130>
 8004646:	7863      	ldrb	r3, [r4, #1]
 8004648:	2b2a      	cmp	r3, #42	; 0x2a
 800464a:	d134      	bne.n	80046b6 <_svfiprintf_r+0x186>
 800464c:	9b03      	ldr	r3, [sp, #12]
 800464e:	3402      	adds	r4, #2
 8004650:	1d1a      	adds	r2, r3, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	9203      	str	r2, [sp, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfb8      	it	lt
 800465a:	f04f 33ff 	movlt.w	r3, #4294967295
 800465e:	9305      	str	r3, [sp, #20]
 8004660:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800471c <_svfiprintf_r+0x1ec>
 8004664:	2203      	movs	r2, #3
 8004666:	4650      	mov	r0, sl
 8004668:	7821      	ldrb	r1, [r4, #0]
 800466a:	f000 fa1d 	bl	8004aa8 <memchr>
 800466e:	b138      	cbz	r0, 8004680 <_svfiprintf_r+0x150>
 8004670:	2240      	movs	r2, #64	; 0x40
 8004672:	9b04      	ldr	r3, [sp, #16]
 8004674:	eba0 000a 	sub.w	r0, r0, sl
 8004678:	4082      	lsls	r2, r0
 800467a:	4313      	orrs	r3, r2
 800467c:	3401      	adds	r4, #1
 800467e:	9304      	str	r3, [sp, #16]
 8004680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004684:	2206      	movs	r2, #6
 8004686:	4826      	ldr	r0, [pc, #152]	; (8004720 <_svfiprintf_r+0x1f0>)
 8004688:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800468c:	f000 fa0c 	bl	8004aa8 <memchr>
 8004690:	2800      	cmp	r0, #0
 8004692:	d038      	beq.n	8004706 <_svfiprintf_r+0x1d6>
 8004694:	4b23      	ldr	r3, [pc, #140]	; (8004724 <_svfiprintf_r+0x1f4>)
 8004696:	bb1b      	cbnz	r3, 80046e0 <_svfiprintf_r+0x1b0>
 8004698:	9b03      	ldr	r3, [sp, #12]
 800469a:	3307      	adds	r3, #7
 800469c:	f023 0307 	bic.w	r3, r3, #7
 80046a0:	3308      	adds	r3, #8
 80046a2:	9303      	str	r3, [sp, #12]
 80046a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a6:	4433      	add	r3, r6
 80046a8:	9309      	str	r3, [sp, #36]	; 0x24
 80046aa:	e768      	b.n	800457e <_svfiprintf_r+0x4e>
 80046ac:	460c      	mov	r4, r1
 80046ae:	2001      	movs	r0, #1
 80046b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80046b4:	e7a6      	b.n	8004604 <_svfiprintf_r+0xd4>
 80046b6:	2300      	movs	r3, #0
 80046b8:	f04f 0c0a 	mov.w	ip, #10
 80046bc:	4619      	mov	r1, r3
 80046be:	3401      	adds	r4, #1
 80046c0:	9305      	str	r3, [sp, #20]
 80046c2:	4620      	mov	r0, r4
 80046c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046c8:	3a30      	subs	r2, #48	; 0x30
 80046ca:	2a09      	cmp	r2, #9
 80046cc:	d903      	bls.n	80046d6 <_svfiprintf_r+0x1a6>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0c6      	beq.n	8004660 <_svfiprintf_r+0x130>
 80046d2:	9105      	str	r1, [sp, #20]
 80046d4:	e7c4      	b.n	8004660 <_svfiprintf_r+0x130>
 80046d6:	4604      	mov	r4, r0
 80046d8:	2301      	movs	r3, #1
 80046da:	fb0c 2101 	mla	r1, ip, r1, r2
 80046de:	e7f0      	b.n	80046c2 <_svfiprintf_r+0x192>
 80046e0:	ab03      	add	r3, sp, #12
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	462a      	mov	r2, r5
 80046e6:	4638      	mov	r0, r7
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <_svfiprintf_r+0x1f8>)
 80046ea:	a904      	add	r1, sp, #16
 80046ec:	f3af 8000 	nop.w
 80046f0:	1c42      	adds	r2, r0, #1
 80046f2:	4606      	mov	r6, r0
 80046f4:	d1d6      	bne.n	80046a4 <_svfiprintf_r+0x174>
 80046f6:	89ab      	ldrh	r3, [r5, #12]
 80046f8:	065b      	lsls	r3, r3, #25
 80046fa:	f53f af2d 	bmi.w	8004558 <_svfiprintf_r+0x28>
 80046fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004700:	b01d      	add	sp, #116	; 0x74
 8004702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004706:	ab03      	add	r3, sp, #12
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	462a      	mov	r2, r5
 800470c:	4638      	mov	r0, r7
 800470e:	4b06      	ldr	r3, [pc, #24]	; (8004728 <_svfiprintf_r+0x1f8>)
 8004710:	a904      	add	r1, sp, #16
 8004712:	f000 f87d 	bl	8004810 <_printf_i>
 8004716:	e7eb      	b.n	80046f0 <_svfiprintf_r+0x1c0>
 8004718:	08004e92 	.word	0x08004e92
 800471c:	08004e98 	.word	0x08004e98
 8004720:	08004e9c 	.word	0x08004e9c
 8004724:	00000000 	.word	0x00000000
 8004728:	0800447d 	.word	0x0800447d

0800472c <_printf_common>:
 800472c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004730:	4616      	mov	r6, r2
 8004732:	4699      	mov	r9, r3
 8004734:	688a      	ldr	r2, [r1, #8]
 8004736:	690b      	ldr	r3, [r1, #16]
 8004738:	4607      	mov	r7, r0
 800473a:	4293      	cmp	r3, r2
 800473c:	bfb8      	it	lt
 800473e:	4613      	movlt	r3, r2
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004746:	460c      	mov	r4, r1
 8004748:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800474c:	b10a      	cbz	r2, 8004752 <_printf_common+0x26>
 800474e:	3301      	adds	r3, #1
 8004750:	6033      	str	r3, [r6, #0]
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	0699      	lsls	r1, r3, #26
 8004756:	bf42      	ittt	mi
 8004758:	6833      	ldrmi	r3, [r6, #0]
 800475a:	3302      	addmi	r3, #2
 800475c:	6033      	strmi	r3, [r6, #0]
 800475e:	6825      	ldr	r5, [r4, #0]
 8004760:	f015 0506 	ands.w	r5, r5, #6
 8004764:	d106      	bne.n	8004774 <_printf_common+0x48>
 8004766:	f104 0a19 	add.w	sl, r4, #25
 800476a:	68e3      	ldr	r3, [r4, #12]
 800476c:	6832      	ldr	r2, [r6, #0]
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	42ab      	cmp	r3, r5
 8004772:	dc2b      	bgt.n	80047cc <_printf_common+0xa0>
 8004774:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004778:	1e13      	subs	r3, r2, #0
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	bf18      	it	ne
 800477e:	2301      	movne	r3, #1
 8004780:	0692      	lsls	r2, r2, #26
 8004782:	d430      	bmi.n	80047e6 <_printf_common+0xba>
 8004784:	4649      	mov	r1, r9
 8004786:	4638      	mov	r0, r7
 8004788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800478c:	47c0      	blx	r8
 800478e:	3001      	adds	r0, #1
 8004790:	d023      	beq.n	80047da <_printf_common+0xae>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	6922      	ldr	r2, [r4, #16]
 8004796:	f003 0306 	and.w	r3, r3, #6
 800479a:	2b04      	cmp	r3, #4
 800479c:	bf14      	ite	ne
 800479e:	2500      	movne	r5, #0
 80047a0:	6833      	ldreq	r3, [r6, #0]
 80047a2:	f04f 0600 	mov.w	r6, #0
 80047a6:	bf08      	it	eq
 80047a8:	68e5      	ldreq	r5, [r4, #12]
 80047aa:	f104 041a 	add.w	r4, r4, #26
 80047ae:	bf08      	it	eq
 80047b0:	1aed      	subeq	r5, r5, r3
 80047b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80047b6:	bf08      	it	eq
 80047b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047bc:	4293      	cmp	r3, r2
 80047be:	bfc4      	itt	gt
 80047c0:	1a9b      	subgt	r3, r3, r2
 80047c2:	18ed      	addgt	r5, r5, r3
 80047c4:	42b5      	cmp	r5, r6
 80047c6:	d11a      	bne.n	80047fe <_printf_common+0xd2>
 80047c8:	2000      	movs	r0, #0
 80047ca:	e008      	b.n	80047de <_printf_common+0xb2>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4652      	mov	r2, sl
 80047d0:	4649      	mov	r1, r9
 80047d2:	4638      	mov	r0, r7
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d103      	bne.n	80047e2 <_printf_common+0xb6>
 80047da:	f04f 30ff 	mov.w	r0, #4294967295
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	3501      	adds	r5, #1
 80047e4:	e7c1      	b.n	800476a <_printf_common+0x3e>
 80047e6:	2030      	movs	r0, #48	; 0x30
 80047e8:	18e1      	adds	r1, r4, r3
 80047ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047f4:	4422      	add	r2, r4
 80047f6:	3302      	adds	r3, #2
 80047f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047fc:	e7c2      	b.n	8004784 <_printf_common+0x58>
 80047fe:	2301      	movs	r3, #1
 8004800:	4622      	mov	r2, r4
 8004802:	4649      	mov	r1, r9
 8004804:	4638      	mov	r0, r7
 8004806:	47c0      	blx	r8
 8004808:	3001      	adds	r0, #1
 800480a:	d0e6      	beq.n	80047da <_printf_common+0xae>
 800480c:	3601      	adds	r6, #1
 800480e:	e7d9      	b.n	80047c4 <_printf_common+0x98>

08004810 <_printf_i>:
 8004810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	7e0f      	ldrb	r7, [r1, #24]
 8004816:	4691      	mov	r9, r2
 8004818:	2f78      	cmp	r7, #120	; 0x78
 800481a:	4680      	mov	r8, r0
 800481c:	460c      	mov	r4, r1
 800481e:	469a      	mov	sl, r3
 8004820:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004826:	d807      	bhi.n	8004838 <_printf_i+0x28>
 8004828:	2f62      	cmp	r7, #98	; 0x62
 800482a:	d80a      	bhi.n	8004842 <_printf_i+0x32>
 800482c:	2f00      	cmp	r7, #0
 800482e:	f000 80d5 	beq.w	80049dc <_printf_i+0x1cc>
 8004832:	2f58      	cmp	r7, #88	; 0x58
 8004834:	f000 80c1 	beq.w	80049ba <_printf_i+0x1aa>
 8004838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800483c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004840:	e03a      	b.n	80048b8 <_printf_i+0xa8>
 8004842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004846:	2b15      	cmp	r3, #21
 8004848:	d8f6      	bhi.n	8004838 <_printf_i+0x28>
 800484a:	a101      	add	r1, pc, #4	; (adr r1, 8004850 <_printf_i+0x40>)
 800484c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004850:	080048a9 	.word	0x080048a9
 8004854:	080048bd 	.word	0x080048bd
 8004858:	08004839 	.word	0x08004839
 800485c:	08004839 	.word	0x08004839
 8004860:	08004839 	.word	0x08004839
 8004864:	08004839 	.word	0x08004839
 8004868:	080048bd 	.word	0x080048bd
 800486c:	08004839 	.word	0x08004839
 8004870:	08004839 	.word	0x08004839
 8004874:	08004839 	.word	0x08004839
 8004878:	08004839 	.word	0x08004839
 800487c:	080049c3 	.word	0x080049c3
 8004880:	080048e9 	.word	0x080048e9
 8004884:	0800497d 	.word	0x0800497d
 8004888:	08004839 	.word	0x08004839
 800488c:	08004839 	.word	0x08004839
 8004890:	080049e5 	.word	0x080049e5
 8004894:	08004839 	.word	0x08004839
 8004898:	080048e9 	.word	0x080048e9
 800489c:	08004839 	.word	0x08004839
 80048a0:	08004839 	.word	0x08004839
 80048a4:	08004985 	.word	0x08004985
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	1d1a      	adds	r2, r3, #4
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	602a      	str	r2, [r5, #0]
 80048b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0a0      	b.n	80049fe <_printf_i+0x1ee>
 80048bc:	6820      	ldr	r0, [r4, #0]
 80048be:	682b      	ldr	r3, [r5, #0]
 80048c0:	0607      	lsls	r7, r0, #24
 80048c2:	f103 0104 	add.w	r1, r3, #4
 80048c6:	6029      	str	r1, [r5, #0]
 80048c8:	d501      	bpl.n	80048ce <_printf_i+0xbe>
 80048ca:	681e      	ldr	r6, [r3, #0]
 80048cc:	e003      	b.n	80048d6 <_printf_i+0xc6>
 80048ce:	0646      	lsls	r6, r0, #25
 80048d0:	d5fb      	bpl.n	80048ca <_printf_i+0xba>
 80048d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80048d6:	2e00      	cmp	r6, #0
 80048d8:	da03      	bge.n	80048e2 <_printf_i+0xd2>
 80048da:	232d      	movs	r3, #45	; 0x2d
 80048dc:	4276      	negs	r6, r6
 80048de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e2:	230a      	movs	r3, #10
 80048e4:	4859      	ldr	r0, [pc, #356]	; (8004a4c <_printf_i+0x23c>)
 80048e6:	e012      	b.n	800490e <_printf_i+0xfe>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	6820      	ldr	r0, [r4, #0]
 80048ec:	1d19      	adds	r1, r3, #4
 80048ee:	6029      	str	r1, [r5, #0]
 80048f0:	0605      	lsls	r5, r0, #24
 80048f2:	d501      	bpl.n	80048f8 <_printf_i+0xe8>
 80048f4:	681e      	ldr	r6, [r3, #0]
 80048f6:	e002      	b.n	80048fe <_printf_i+0xee>
 80048f8:	0641      	lsls	r1, r0, #25
 80048fa:	d5fb      	bpl.n	80048f4 <_printf_i+0xe4>
 80048fc:	881e      	ldrh	r6, [r3, #0]
 80048fe:	2f6f      	cmp	r7, #111	; 0x6f
 8004900:	bf0c      	ite	eq
 8004902:	2308      	moveq	r3, #8
 8004904:	230a      	movne	r3, #10
 8004906:	4851      	ldr	r0, [pc, #324]	; (8004a4c <_printf_i+0x23c>)
 8004908:	2100      	movs	r1, #0
 800490a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800490e:	6865      	ldr	r5, [r4, #4]
 8004910:	2d00      	cmp	r5, #0
 8004912:	bfa8      	it	ge
 8004914:	6821      	ldrge	r1, [r4, #0]
 8004916:	60a5      	str	r5, [r4, #8]
 8004918:	bfa4      	itt	ge
 800491a:	f021 0104 	bicge.w	r1, r1, #4
 800491e:	6021      	strge	r1, [r4, #0]
 8004920:	b90e      	cbnz	r6, 8004926 <_printf_i+0x116>
 8004922:	2d00      	cmp	r5, #0
 8004924:	d04b      	beq.n	80049be <_printf_i+0x1ae>
 8004926:	4615      	mov	r5, r2
 8004928:	fbb6 f1f3 	udiv	r1, r6, r3
 800492c:	fb03 6711 	mls	r7, r3, r1, r6
 8004930:	5dc7      	ldrb	r7, [r0, r7]
 8004932:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004936:	4637      	mov	r7, r6
 8004938:	42bb      	cmp	r3, r7
 800493a:	460e      	mov	r6, r1
 800493c:	d9f4      	bls.n	8004928 <_printf_i+0x118>
 800493e:	2b08      	cmp	r3, #8
 8004940:	d10b      	bne.n	800495a <_printf_i+0x14a>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	07de      	lsls	r6, r3, #31
 8004946:	d508      	bpl.n	800495a <_printf_i+0x14a>
 8004948:	6923      	ldr	r3, [r4, #16]
 800494a:	6861      	ldr	r1, [r4, #4]
 800494c:	4299      	cmp	r1, r3
 800494e:	bfde      	ittt	le
 8004950:	2330      	movle	r3, #48	; 0x30
 8004952:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004956:	f105 35ff 	addle.w	r5, r5, #4294967295
 800495a:	1b52      	subs	r2, r2, r5
 800495c:	6122      	str	r2, [r4, #16]
 800495e:	464b      	mov	r3, r9
 8004960:	4621      	mov	r1, r4
 8004962:	4640      	mov	r0, r8
 8004964:	f8cd a000 	str.w	sl, [sp]
 8004968:	aa03      	add	r2, sp, #12
 800496a:	f7ff fedf 	bl	800472c <_printf_common>
 800496e:	3001      	adds	r0, #1
 8004970:	d14a      	bne.n	8004a08 <_printf_i+0x1f8>
 8004972:	f04f 30ff 	mov.w	r0, #4294967295
 8004976:	b004      	add	sp, #16
 8004978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f043 0320 	orr.w	r3, r3, #32
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	2778      	movs	r7, #120	; 0x78
 8004986:	4832      	ldr	r0, [pc, #200]	; (8004a50 <_printf_i+0x240>)
 8004988:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	6829      	ldr	r1, [r5, #0]
 8004990:	061f      	lsls	r7, r3, #24
 8004992:	f851 6b04 	ldr.w	r6, [r1], #4
 8004996:	d402      	bmi.n	800499e <_printf_i+0x18e>
 8004998:	065f      	lsls	r7, r3, #25
 800499a:	bf48      	it	mi
 800499c:	b2b6      	uxthmi	r6, r6
 800499e:	07df      	lsls	r7, r3, #31
 80049a0:	bf48      	it	mi
 80049a2:	f043 0320 	orrmi.w	r3, r3, #32
 80049a6:	6029      	str	r1, [r5, #0]
 80049a8:	bf48      	it	mi
 80049aa:	6023      	strmi	r3, [r4, #0]
 80049ac:	b91e      	cbnz	r6, 80049b6 <_printf_i+0x1a6>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	f023 0320 	bic.w	r3, r3, #32
 80049b4:	6023      	str	r3, [r4, #0]
 80049b6:	2310      	movs	r3, #16
 80049b8:	e7a6      	b.n	8004908 <_printf_i+0xf8>
 80049ba:	4824      	ldr	r0, [pc, #144]	; (8004a4c <_printf_i+0x23c>)
 80049bc:	e7e4      	b.n	8004988 <_printf_i+0x178>
 80049be:	4615      	mov	r5, r2
 80049c0:	e7bd      	b.n	800493e <_printf_i+0x12e>
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	6826      	ldr	r6, [r4, #0]
 80049c6:	1d18      	adds	r0, r3, #4
 80049c8:	6961      	ldr	r1, [r4, #20]
 80049ca:	6028      	str	r0, [r5, #0]
 80049cc:	0635      	lsls	r5, r6, #24
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	d501      	bpl.n	80049d6 <_printf_i+0x1c6>
 80049d2:	6019      	str	r1, [r3, #0]
 80049d4:	e002      	b.n	80049dc <_printf_i+0x1cc>
 80049d6:	0670      	lsls	r0, r6, #25
 80049d8:	d5fb      	bpl.n	80049d2 <_printf_i+0x1c2>
 80049da:	8019      	strh	r1, [r3, #0]
 80049dc:	2300      	movs	r3, #0
 80049de:	4615      	mov	r5, r2
 80049e0:	6123      	str	r3, [r4, #16]
 80049e2:	e7bc      	b.n	800495e <_printf_i+0x14e>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	2100      	movs	r1, #0
 80049e8:	1d1a      	adds	r2, r3, #4
 80049ea:	602a      	str	r2, [r5, #0]
 80049ec:	681d      	ldr	r5, [r3, #0]
 80049ee:	6862      	ldr	r2, [r4, #4]
 80049f0:	4628      	mov	r0, r5
 80049f2:	f000 f859 	bl	8004aa8 <memchr>
 80049f6:	b108      	cbz	r0, 80049fc <_printf_i+0x1ec>
 80049f8:	1b40      	subs	r0, r0, r5
 80049fa:	6060      	str	r0, [r4, #4]
 80049fc:	6863      	ldr	r3, [r4, #4]
 80049fe:	6123      	str	r3, [r4, #16]
 8004a00:	2300      	movs	r3, #0
 8004a02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a06:	e7aa      	b.n	800495e <_printf_i+0x14e>
 8004a08:	462a      	mov	r2, r5
 8004a0a:	4649      	mov	r1, r9
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	6923      	ldr	r3, [r4, #16]
 8004a10:	47d0      	blx	sl
 8004a12:	3001      	adds	r0, #1
 8004a14:	d0ad      	beq.n	8004972 <_printf_i+0x162>
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	079b      	lsls	r3, r3, #30
 8004a1a:	d413      	bmi.n	8004a44 <_printf_i+0x234>
 8004a1c:	68e0      	ldr	r0, [r4, #12]
 8004a1e:	9b03      	ldr	r3, [sp, #12]
 8004a20:	4298      	cmp	r0, r3
 8004a22:	bfb8      	it	lt
 8004a24:	4618      	movlt	r0, r3
 8004a26:	e7a6      	b.n	8004976 <_printf_i+0x166>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4632      	mov	r2, r6
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	4640      	mov	r0, r8
 8004a30:	47d0      	blx	sl
 8004a32:	3001      	adds	r0, #1
 8004a34:	d09d      	beq.n	8004972 <_printf_i+0x162>
 8004a36:	3501      	adds	r5, #1
 8004a38:	68e3      	ldr	r3, [r4, #12]
 8004a3a:	9903      	ldr	r1, [sp, #12]
 8004a3c:	1a5b      	subs	r3, r3, r1
 8004a3e:	42ab      	cmp	r3, r5
 8004a40:	dcf2      	bgt.n	8004a28 <_printf_i+0x218>
 8004a42:	e7eb      	b.n	8004a1c <_printf_i+0x20c>
 8004a44:	2500      	movs	r5, #0
 8004a46:	f104 0619 	add.w	r6, r4, #25
 8004a4a:	e7f5      	b.n	8004a38 <_printf_i+0x228>
 8004a4c:	08004ea3 	.word	0x08004ea3
 8004a50:	08004eb4 	.word	0x08004eb4

08004a54 <memmove>:
 8004a54:	4288      	cmp	r0, r1
 8004a56:	b510      	push	{r4, lr}
 8004a58:	eb01 0402 	add.w	r4, r1, r2
 8004a5c:	d902      	bls.n	8004a64 <memmove+0x10>
 8004a5e:	4284      	cmp	r4, r0
 8004a60:	4623      	mov	r3, r4
 8004a62:	d807      	bhi.n	8004a74 <memmove+0x20>
 8004a64:	1e43      	subs	r3, r0, #1
 8004a66:	42a1      	cmp	r1, r4
 8004a68:	d008      	beq.n	8004a7c <memmove+0x28>
 8004a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a72:	e7f8      	b.n	8004a66 <memmove+0x12>
 8004a74:	4601      	mov	r1, r0
 8004a76:	4402      	add	r2, r0
 8004a78:	428a      	cmp	r2, r1
 8004a7a:	d100      	bne.n	8004a7e <memmove+0x2a>
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a86:	e7f7      	b.n	8004a78 <memmove+0x24>

08004a88 <_sbrk_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4d05      	ldr	r5, [pc, #20]	; (8004aa4 <_sbrk_r+0x1c>)
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	f7fd f8d4 	bl	8001c40 <_sbrk>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_sbrk_r+0x1a>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_sbrk_r+0x1a>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	20000374 	.word	0x20000374

08004aa8 <memchr>:
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	b510      	push	{r4, lr}
 8004aac:	b2c9      	uxtb	r1, r1
 8004aae:	4402      	add	r2, r0
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	d101      	bne.n	8004aba <memchr+0x12>
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	e003      	b.n	8004ac2 <memchr+0x1a>
 8004aba:	7804      	ldrb	r4, [r0, #0]
 8004abc:	3301      	adds	r3, #1
 8004abe:	428c      	cmp	r4, r1
 8004ac0:	d1f6      	bne.n	8004ab0 <memchr+0x8>
 8004ac2:	bd10      	pop	{r4, pc}

08004ac4 <memcpy>:
 8004ac4:	440a      	add	r2, r1
 8004ac6:	4291      	cmp	r1, r2
 8004ac8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004acc:	d100      	bne.n	8004ad0 <memcpy+0xc>
 8004ace:	4770      	bx	lr
 8004ad0:	b510      	push	{r4, lr}
 8004ad2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ad6:	4291      	cmp	r1, r2
 8004ad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004adc:	d1f9      	bne.n	8004ad2 <memcpy+0xe>
 8004ade:	bd10      	pop	{r4, pc}

08004ae0 <_realloc_r>:
 8004ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae4:	4680      	mov	r8, r0
 8004ae6:	4614      	mov	r4, r2
 8004ae8:	460e      	mov	r6, r1
 8004aea:	b921      	cbnz	r1, 8004af6 <_realloc_r+0x16>
 8004aec:	4611      	mov	r1, r2
 8004aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004af2:	f7ff bc37 	b.w	8004364 <_malloc_r>
 8004af6:	b92a      	cbnz	r2, 8004b04 <_realloc_r+0x24>
 8004af8:	f7ff fbcc 	bl	8004294 <_free_r>
 8004afc:	4625      	mov	r5, r4
 8004afe:	4628      	mov	r0, r5
 8004b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b04:	f000 f81b 	bl	8004b3e <_malloc_usable_size_r>
 8004b08:	4284      	cmp	r4, r0
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	d802      	bhi.n	8004b14 <_realloc_r+0x34>
 8004b0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004b12:	d812      	bhi.n	8004b3a <_realloc_r+0x5a>
 8004b14:	4621      	mov	r1, r4
 8004b16:	4640      	mov	r0, r8
 8004b18:	f7ff fc24 	bl	8004364 <_malloc_r>
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0ed      	beq.n	8004afe <_realloc_r+0x1e>
 8004b22:	42bc      	cmp	r4, r7
 8004b24:	4622      	mov	r2, r4
 8004b26:	4631      	mov	r1, r6
 8004b28:	bf28      	it	cs
 8004b2a:	463a      	movcs	r2, r7
 8004b2c:	f7ff ffca 	bl	8004ac4 <memcpy>
 8004b30:	4631      	mov	r1, r6
 8004b32:	4640      	mov	r0, r8
 8004b34:	f7ff fbae 	bl	8004294 <_free_r>
 8004b38:	e7e1      	b.n	8004afe <_realloc_r+0x1e>
 8004b3a:	4635      	mov	r5, r6
 8004b3c:	e7df      	b.n	8004afe <_realloc_r+0x1e>

08004b3e <_malloc_usable_size_r>:
 8004b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b42:	1f18      	subs	r0, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	bfbc      	itt	lt
 8004b48:	580b      	ldrlt	r3, [r1, r0]
 8004b4a:	18c0      	addlt	r0, r0, r3
 8004b4c:	4770      	bx	lr
	...

08004b50 <_init>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	bf00      	nop
 8004b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b56:	bc08      	pop	{r3}
 8004b58:	469e      	mov	lr, r3
 8004b5a:	4770      	bx	lr

08004b5c <_fini>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr
